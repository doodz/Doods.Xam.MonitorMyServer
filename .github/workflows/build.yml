name: Build
on:
  push:
    branches:
      - master
  pull_request:
    types: [opened, synchronize, reopened]
jobs:
  build:
    name: Build
    runs-on: windows-latest
    steps:
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 1.11     
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      # - name: Set default Xamarin SDK versions
        # shell: powershell
        # run: |
          # $VM_ASSETS\select-xamarin-sdk-v2.sh
      - name: Setup .NET Core 2.1	
        uses: actions/setup-dotnet@v1	
        with:	
            dotnet-version: 2.1.x	
      - name: Setup .NET Core 3.1	
        uses: actions/setup-dotnet@v1	
        with:	
            dotnet-version: 3.1.x
      - name: Setup .NET Core SDK 5.0.x
        uses: actions/setup-dotnet@v1
        with:
            dotnet-version: '5.0.x'
      - name: Install dependencies
        run: |
          dotnet restore
      - name: Cache SonarCloud packages
        uses: actions/cache@v1
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache SonarCloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v1
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner
      - name: Install SonarCloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          New-Item -Path .\.sonar\scanner -ItemType Directory
          dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner
      # - name: install coverlet
        # shell: powershell
        # run: |
          # dotnet add package coverlet.collector
      - name: sonarscanner begin 
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: powershell #/d:sonar.verbose=true /d:sonar.log.level="TRACE" /d:sonar.cs.vscoveragexml.reportsPaths="*.coveragexml" /d:sonar.cs.vstest.reportsPaths="*.trx" 
        run: |
          .\.sonar\scanner\dotnet-sonarscanner begin /k:"doodz_Doods.Xam.MonitorMyServer" /o:"doodsdev" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.cs.opencover.reportsPaths="**\*coverage.*" /d:sonar.cs.vstest.reportsPaths="*.trx" 
      - name: Build 
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: powershell #/d:sonar.verbose=true /d:sonar.log.level="TRACE" /d:sonar.cs.vscoveragexml.reportsPaths="*.coveragexml" /d:sonar.cs.vstest.reportsPaths="*.trx" 
        run: |
          nuget restore
          dotnet build .\Doods.TU\Doods.TU.sln
           
      - name: Analyze 
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: powershell
        run: |
          dotnet test .\Doods.TU\Doods.TU.sln /p:CollectCoverage=true /p:CoverletOutputFormat=opencover --no-build  --collect:"XPlat Code Coverage" --logger trx 
      - name: sonarscanner end 
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: powershell
        run: |
          .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"
          
        
      - name: finds children 
        shell: powershell 
        run: |
          Get-Childitem -Include *coverage* -Recurse
        
        