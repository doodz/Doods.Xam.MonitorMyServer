<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="index_title" xml:space="preserve">
    <value>SMART stav disku</value>
  </data>
  <data name="index_version" xml:space="preserve">
    <value>SMARTsuite verzia $1</value>
  </data>
  <data name="index_show" xml:space="preserve">
    <value>Zobraziť stav disku:</value>
  </data>
  <data name="index_ok" xml:space="preserve">
    <value>Ukázať</value>
  </data>
  <data name="index_drive" xml:space="preserve">
    <value>Stav disku $1</value>
  </data>
  <data name="index_desc" xml:space="preserve">
    <value>Umiestnenie</value>
  </data>
  <data name="index_size" xml:space="preserve">
    <value>Veľkosť disku</value>
  </data>
  <data name="index_model" xml:space="preserve">
    <value>Vytvor a modeluj</value>
  </data>
  <data name="index_support" xml:space="preserve">
    <value>Podporuje SMART?</value>
  </data>
  <data name="index_enabled" xml:space="preserve">
    <value>SMART povolený?</value>
  </data>
  <data name="index_check" xml:space="preserve">
    <value>Kontrola uspešná?</value>
  </data>
  <data name="index_short" xml:space="preserve">
    <value>Krátky test</value>
  </data>
  <data name="index_ext" xml:space="preserve">
    <value>Podrobný test</value>
  </data>
  <data name="index_data" xml:space="preserve">
    <value>Zber údajov</value>
  </data>
  <data name="index_errors" xml:space="preserve">
    <value>Zaznamenané chyby</value>
  </data>
  <data name="index_ecount" xml:space="preserve">
    <value>bolo zistených $1 chýb</value>
  </data>
  <data name="index_return" xml:space="preserve">
    <value>index modulu</value>
  </data>
  <data name="monitor_type" xml:space="preserve">
    <value>SMART kontrola disku</value>
  </data>
  <data name="monitor_drive" xml:space="preserve">
    <value>Disk na kontrolu</value>
  </data>
  <data name="monitor_errors" xml:space="preserve">
    <value>Kontrolovať aj chybové záznamy?</value>
  </data>
  <data name="short_title" xml:space="preserve">
    <value>Krátky test</value>
  </data>
  <data name="short_doing" xml:space="preserve">
    <value>Spúšťam krátky test na $1 ..</value>
  </data>
  <data name="short_failed" xml:space="preserve">
    <value>.. zlyhalo!</value>
  </data>
  <data name="short_ok" xml:space="preserve">
    <value>.. test úspešne spustený. Pozrite si na úvodnej stránke modulu stav disku ako aj výsledky testu.</value>
  </data>
  <data name="ext_title" xml:space="preserve">
    <value>Podrobný test</value>
  </data>
  <data name="ext_doing" xml:space="preserve">
    <value>Spúšťam podrobný test na $1 ..</value>
  </data>
  <data name="ext_failed" xml:space="preserve">
    <value>$short_failed</value>
  </data>
  <data name="ext_ok" xml:space="preserve">
    <value>$short_ok</value>
  </data>
  <data name="data_title" xml:space="preserve">
    <value>Zber údajov</value>
  </data>
  <data name="data_doing" xml:space="preserve">
    <value>Začínam offline zber údajov na $1 ..</value>
  </data>
  <data name="data_failed" xml:space="preserve">
    <value>.. zlyhalo!</value>
  </data>
  <data name="data_ok" xml:space="preserve">
    <value>.. zber úspešne spustený. Na úvodnej stránke modulu si môžete pozrieť stav disku ako aj výsledky testu.</value>
  </data>
</root>