<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="index_title" xml:space="preserve">
    <value>Servizi Internet</value>
  </data>
  <data name="index_list" xml:space="preserve">
    <value>Lista servizi</value>
  </data>
  <data name="index_save" xml:space="preserve">
    <value>Salva</value>
  </data>
  <data name="index_delete" xml:space="preserve">
    <value>Cancella</value>
  </data>
  <data name="index_create" xml:space="preserve">
    <value>Crea</value>
  </data>
  <data name="index_service" xml:space="preserve">
    <value>Servizi Internet</value>
  </data>
  <data name="index_newservice" xml:space="preserve">
    <value>Crea un nuovo servizio internet</value>
  </data>
  <data name="index_rpc" xml:space="preserve">
    <value>Programmi RPC</value>
  </data>
  <data name="index_newrpc" xml:space="preserve">
    <value>Crea un nuovo Programma RPC</value>
  </data>
  <data name="index_apply" xml:space="preserve">
    <value>Applica le modifiche</value>
  </data>
  <data name="index_applymsg" xml:space="preserve">
    <value>Clicca su questo pulsante per applicare la configurazione corrente inviando un segnale SIGHUP al processo &lt;tt&gt;inetd&lt;/tt&gt; in esecuzione</value>
  </data>
  <data name="error_restart" xml:space="preserve">
    <value>Fallito il riavvio di inetd</value>
  </data>
  <data name="error_saverpc" xml:space="preserve">
    <value>Fallito il salvataggio del programma RPC</value>
  </data>
  <data name="error_invalidprgname" xml:space="preserve">
    <value>'$1' non e' un nome di programma valido</value>
  </data>
  <data name="error_invalidprgnum" xml:space="preserve">
    <value>'$1' non e' un valido numero di programma</value>
  </data>
  <data name="error_invalidver" xml:space="preserve">
    <value>'$1' non e' una versione RPC valida</value>
  </data>
  <data name="error_noprotocol" xml:space="preserve">
    <value>Devi scegliere almeno un protocollo</value>
  </data>
  <data name="error_notexist" xml:space="preserve">
    <value>'$1' non esiste</value>
  </data>
  <data name="error_notexecutable" xml:space="preserve">
    <value>'$1' non e' eseguibile</value>
  </data>
  <data name="error_invalidcmd" xml:space="preserve">
    <value>'$1' non e' un comando valido</value>
  </data>
  <data name="error_nouser" xml:space="preserve">
    <value>Devi scegliere un utente</value>
  </data>
  <data name="error_prgexist" xml:space="preserve">
    <value>Esiste gia' un programma RPC chiamato $1 </value>
  </data>
  <data name="error_prginuse" xml:space="preserve">
    <value>Il numero RPC del programma $1 e' gia' in uso</value>
  </data>
  <data name="error_saveservice" xml:space="preserve">
    <value>Fallito il salvataggio del servizio internet</value>
  </data>
  <data name="error_invalidport" xml:space="preserve">
    <value>'$1' non e' un numero di porta valido</value>
  </data>
  <data name="error_invalidservice" xml:space="preserve">
    <value>'$1' non e' un nome valido per il servizio</value>
  </data>
  <data name="error_portnum" xml:space="preserve">
    <value>La porta numero $1 deve essere &gt;0 e &lt;65536</value>
  </data>
  <data name="error_invalidprg" xml:space="preserve">
    <value>'$1' non e' un programma valido</value>
  </data>
  <data name="error_invalidarg" xml:space="preserve">
    <value>'$1' non e' una lista di argomenti valida</value>
  </data>
  <data name="error_invalidwrapper" xml:space="preserve">
    <value>'$1' non e' un servizio TCP-wrappers valido</value>
  </data>
  <data name="error_invalidpermin" xml:space="preserve">
    <value>'$1' non e' un valido valore massimo per minuto</value>
  </data>
  <data name="error_invalidchildnum" xml:space="preserve">
    <value>'$1' non e' un numero valido di processi figlio</value>
  </data>
  <data name="error_childnum" xml:space="preserve">
    <value>Se viene impostato un valore massimo per minuto allora deve essere impostato anche il numero di processi figlio</value>
  </data>
  <data name="error_serviceexist" xml:space="preserve">
    <value>Un servizio che usa la porta $1 e il protocollo $2 esiste gia'</value>
  </data>
  <data name="error_nameexist" xml:space="preserve">
    <value>Un servizio chiamato $1 e che usa il protocollo $2 esiste già'</value>
  </data>
  <data name="error_inetservice" xml:space="preserve">
    <value>Un servizio internet chiamato $1 e che usa il protocollo $2 esiste gia'</value>
  </data>
  <data name="editrpc_title1" xml:space="preserve">
    <value>Crea un programma RPC</value>
  </data>
  <data name="editrpc_title2" xml:space="preserve">
    <value>Modifica un programma RPC</value>
  </data>
  <data name="editrpc_detail" xml:space="preserve">
    <value>Dettagli sul programma RPC</value>
  </data>
  <data name="editrpc_prgname" xml:space="preserve">
    <value>Nome programma</value>
  </data>
  <data name="editrpc_prgnum" xml:space="preserve">
    <value>Numero programma</value>
  </data>
  <data name="editrpc_aliase" xml:space="preserve">
    <value>Aliases</value>
  </data>
  <data name="editrpc_server" xml:space="preserve">
    <value>Programma server</value>
  </data>
  <data name="editrpc_noassigned" xml:space="preserve">
    <value>Nessun programma assegnato</value>
  </data>
  <data name="editrpc_disable" xml:space="preserve">
    <value>Programma disabilitato..</value>
  </data>
  <data name="editrpc_enable" xml:space="preserve">
    <value>Programma abilitato..</value>
  </data>
  <data name="editrpc_socket" xml:space="preserve">
    <value>Tipo di Socket</value>
  </data>
  <data name="editrpc_version" xml:space="preserve">
    <value>Versione RPC</value>
  </data>
  <data name="editrpc_protocol" xml:space="preserve">
    <value>Protocolli</value>
  </data>
  <data name="editrpc_internal" xml:space="preserve">
    <value>Interno</value>
  </data>
  <data name="editrpc_command" xml:space="preserve">
    <value>Comando</value>
  </data>
  <data name="editrpc_waitmode" xml:space="preserve">
    <value>Modo di attesa</value>
  </data>
  <data name="editrpc_wait" xml:space="preserve">
    <value>Aspetta finche' non ha finito</value>
  </data>
  <data name="editrpc_nowait" xml:space="preserve">
    <value>Non aspettare</value>
  </data>
  <data name="editrpc_execasuser" xml:space="preserve">
    <value>Esegui come utente</value>
  </data>
  <data name="editrpc_max" xml:space="preserve">
    <value>Massimo per minuto</value>
  </data>
  <data name="editrpc_default" xml:space="preserve">
    <value>Default</value>
  </data>
  <data name="editrpc_execasgrp" xml:space="preserve">
    <value>Esegui come gruppo</value>
  </data>
  <data name="editserv_title1" xml:space="preserve">
    <value>Crea servizio internet</value>
  </data>
  <data name="editserv_title2" xml:space="preserve">
    <value>Modifica servizio internet</value>
  </data>
  <data name="editserv_detail" xml:space="preserve">
    <value>Dettagli servizio internet</value>
  </data>
  <data name="editserv_name" xml:space="preserve">
    <value>Nome servizio</value>
  </data>
  <data name="editserv_port" xml:space="preserve">
    <value>Numero porta</value>
  </data>
  <data name="editserv_program" xml:space="preserve">
    <value>Programma</value>
  </data>
  <data name="editserv_args" xml:space="preserve">
    <value>Argomenti</value>
  </data>
  <data name="editserv_maxchild" xml:space="preserve">
    <value>Numero massimo processi figlio</value>
  </data>
  <data name="editserv_execlogin" xml:space="preserve">
    <value>Esegui come Login Class</value>
  </data>
  <data name="editserv_wrapper" xml:space="preserve">
    <value>TCP-Wrapper</value>
  </data>
  <data name="editserv_inetd" xml:space="preserve">
    <value>Interno a &lt;tt&gt;inetd&lt;/tt&gt;</value>
  </data>
  <data name="log_apply" xml:space="preserve">
    <value>Applica le modifiche</value>
  </data>
  <data name="log_create_serv" xml:space="preserve">
    <value>Creato il servizio $1</value>
  </data>
  <data name="log_modify_serv" xml:space="preserve">
    <value>Modificato il servizio $1</value>
  </data>
  <data name="log_delete_serv" xml:space="preserve">
    <value>Cancellato servizio $1</value>
  </data>
  <data name="log_create_prog" xml:space="preserve">
    <value>Creato il servizio e il programma $1</value>
  </data>
  <data name="log_modify_prog" xml:space="preserve">
    <value>Modificato servizio e il programma $1</value>
  </data>
  <data name="log_delete_prog" xml:space="preserve">
    <value>Cancellato il servizio e il programma $1</value>
  </data>
  <data name="log_create_serv_l" xml:space="preserve">
    <value>Creato il servizio $1 sulla porta $2</value>
  </data>
  <data name="log_modify_serv_l" xml:space="preserve">
    <value>Modificato il servizio $1 sulla porta $2</value>
  </data>
  <data name="log_delete_serv_l" xml:space="preserve">
    <value>Cancellato il servizio $1 sulla porta $2</value>
  </data>
  <data name="log_create_prog_l" xml:space="preserve">
    <value>Creato il servizio $1 sulla porta $2 per il programma $3</value>
  </data>
  <data name="log_modify_prog_l" xml:space="preserve">
    <value>Modificato il servizio $1 sulla porta $2 per il programma $3</value>
  </data>
  <data name="log_delete_prog_l" xml:space="preserve">
    <value>Cancellato il servizio $1 sulla porta $2 per il programma $3</value>
  </data>
  <data name="log_create_rpc" xml:space="preserve">
    <value>Creato RPC $1</value>
  </data>
  <data name="log_modify_rpc" xml:space="preserve">
    <value>Modificato RPC $1</value>
  </data>
  <data name="log_delete_rpc" xml:space="preserve">
    <value>Cancellato RPC $1</value>
  </data>
  <data name="log_create_rprog" xml:space="preserve">
    <value>Creato RPC e programma $1</value>
  </data>
  <data name="log_modify_rprog" xml:space="preserve">
    <value>Modificato RPC e programma $1</value>
  </data>
  <data name="log_delete_rprog" xml:space="preserve">
    <value>Cancellato RPC e programma $1</value>
  </data>
  <data name="log_create_rpc_l" xml:space="preserve">
    <value>Creato RPC $1 numero $2</value>
  </data>
  <data name="log_modify_rpc_l" xml:space="preserve">
    <value>Modificato RPC $1 numero $2</value>
  </data>
  <data name="log_delete_rpc_l" xml:space="preserve">
    <value>Cancellato RPC $1 numero $2</value>
  </data>
  <data name="log_create_rprog_l" xml:space="preserve">
    <value>Creato RPC $1 numero $2 per il programma $3</value>
  </data>
  <data name="log_modify_rprog_l" xml:space="preserve">
    <value>Modificato RPC $1 numero $2 per il programma $3</value>
  </data>
  <data name="log_delete_rprog_l" xml:space="preserve">
    <value>Cancellato RPC $1 numero $2 per il programma $3</value>
  </data>
</root>