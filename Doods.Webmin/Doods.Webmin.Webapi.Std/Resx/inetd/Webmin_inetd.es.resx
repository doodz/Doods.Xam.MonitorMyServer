<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="index_title" xml:space="preserve">
    <value>Servicios de Internet</value>
  </data>
  <data name="index_list" xml:space="preserve">
    <value>lista de sercicios</value>
  </data>
  <data name="index_save" xml:space="preserve">
    <value>Salvar</value>
  </data>
  <data name="index_delete" xml:space="preserve">
    <value>Borrar</value>
  </data>
  <data name="index_create" xml:space="preserve">
    <value>Crear</value>
  </data>
  <data name="index_service" xml:space="preserve">
    <value>Servicios de Internet</value>
  </data>
  <data name="index_newservice" xml:space="preserve">
    <value>Crear un nuevo servicio de internet</value>
  </data>
  <data name="index_rpc" xml:space="preserve">
    <value>Programas RPC</value>
  </data>
  <data name="index_newrpc" xml:space="preserve">
    <value>Crear un nuevo programa RPC</value>
  </data>
  <data name="index_apply" xml:space="preserve">
    <value>Aplicar Cambios</value>
  </data>
  <data name="index_applymsg" xml:space="preserve">
    <value>Haz click en este botón para aplicar la configuración en curso mediante en envío de una señal SIGHUP al proceso &lt;tt&gt;inetd&lt;/tt&gt; en ejecución</value>
  </data>
  <data name="error_restart" xml:space="preserve">
    <value>No pude rearrancar Inetd</value>
  </data>
  <data name="error_saverpc" xml:space="preserve">
    <value>No pude salvar programa RPC</value>
  </data>
  <data name="error_invalidprgname" xml:space="preserve">
    <value>'$1' no es un nombre de programa válido</value>
  </data>
  <data name="error_invalidprgnum" xml:space="preserve">
    <value>'$1' no es un número de programa válido</value>
  </data>
  <data name="error_invalidver" xml:space="preserve">
    <value>'$1' no es una versión RPC válida</value>
  </data>
  <data name="error_noprotocol" xml:space="preserve">
    <value>Debes de seleccionar al menos un protocolo</value>
  </data>
  <data name="error_notexist" xml:space="preserve">
    <value>'$1' no existe</value>
  </data>
  <data name="error_notexecutable" xml:space="preserve">
    <value>'$1' no es ejecutable</value>
  </data>
  <data name="error_invalidcmd" xml:space="preserve">
    <value>'$1' no es un comando válido</value>
  </data>
  <data name="error_nouser" xml:space="preserve">
    <value>Debes de seleccionar un usuario</value>
  </data>
  <data name="error_user" xml:space="preserve">
    <value>El usuario como el que ejecutar falta o es inválido</value>
  </data>
  <data name="error_group" xml:space="preserve">
    <value>El grupo como el que ejecutar falta o es inválido</value>
  </data>
  <data name="error_prgexist" xml:space="preserve">
    <value>Ya existe un programa RPC llamado $1</value>
  </data>
  <data name="error_prginuse" xml:space="preserve">
    <value>El número $1 de programa RPC ya está en uso</value>
  </data>
  <data name="error_saveservice" xml:space="preserve">
    <value>No pude salvar servicio de internet</value>
  </data>
  <data name="error_invalidport" xml:space="preserve">
    <value>'$1' no es un número válido de puerto</value>
  </data>
  <data name="error_invalidservice" xml:space="preserve">
    <value>'$1' no es un nombre válido de servicio</value>
  </data>
  <data name="error_portnum" xml:space="preserve">
    <value>El número de puerto $1 debe de ser &gt;0 y &lt;65536</value>
  </data>
  <data name="error_invalidprg" xml:space="preserve">
    <value>'$1' no es un programa válido</value>
  </data>
  <data name="error_invalidarg" xml:space="preserve">
    <value>'$1' no es una lista válida de argumentos</value>
  </data>
  <data name="error_invalidwrapper" xml:space="preserve">
    <value>'$1' no es un servicio válido de arropadores-TCP</value>
  </data>
  <data name="error_invalidpermin" xml:space="preserve">
    <value>'$1' no es un máximo por minuto válido</value>
  </data>
  <data name="error_invalidchildnum" xml:space="preserve">
    <value>'$1' no es un número válido de procesos hijo</value>
  </data>
  <data name="error_childnum" xml:space="preserve">
    <value>Si se digita un máximo por minuto, se debe de hacer lo mismo con el número de procesos hijo</value>
  </data>
  <data name="error_serviceexist" xml:space="preserve">
    <value>Ya existe un servicio que usa el puerto $1 y protocolo $2</value>
  </data>
  <data name="error_nameexist" xml:space="preserve">
    <value>Ya existe un servicio llamado $1 y protocolo $2</value>
  </data>
  <data name="error_inetservice" xml:space="preserve">
    <value>Ya existe un servicio de internet llamado $1 con protocolo $2</value>
  </data>
  <data name="editrpc_title1" xml:space="preserve">
    <value>Crear Programa RPC</value>
  </data>
  <data name="editrpc_title2" xml:space="preserve">
    <value>Editar Programa RPC</value>
  </data>
  <data name="editrpc_detail" xml:space="preserve">
    <value>Detalles de Programa RPC</value>
  </data>
  <data name="editrpc_prgname" xml:space="preserve">
    <value>Nombre de Programa</value>
  </data>
  <data name="editrpc_prgnum" xml:space="preserve">
    <value>Número de Programa</value>
  </data>
  <data name="editrpc_aliase" xml:space="preserve">
    <value>Aliases</value>
  </data>
  <data name="editrpc_server" xml:space="preserve">
    <value>Programa de Servidor</value>
  </data>
  <data name="editrpc_noassigned" xml:space="preserve">
    <value>No se ha asignado programa</value>
  </data>
  <data name="editrpc_disable" xml:space="preserve">
    <value>Programa desactivado...</value>
  </data>
  <data name="editrpc_enable" xml:space="preserve">
    <value>Programa activado...</value>
  </data>
  <data name="editrpc_socket" xml:space="preserve">
    <value>Tipo de Socket</value>
  </data>
  <data name="editrpc_version" xml:space="preserve">
    <value>Versiones RPC</value>
  </data>
  <data name="editrpc_protocol" xml:space="preserve">
    <value>Protocolos</value>
  </data>
  <data name="editrpc_internal" xml:space="preserve">
    <value>Interno</value>
  </data>
  <data name="editrpc_command" xml:space="preserve">
    <value>Comando</value>
  </data>
  <data name="editrpc_waitmode" xml:space="preserve">
    <value>Modo de Espera</value>
  </data>
  <data name="editrpc_wait" xml:space="preserve">
    <value>Esperar hasta que se complete</value>
  </data>
  <data name="editrpc_nowait" xml:space="preserve">
    <value>No esperar</value>
  </data>
  <data name="editrpc_execasuser" xml:space="preserve">
    <value>Ejecutar Como Usuario</value>
  </data>
  <data name="editrpc_max" xml:space="preserve">
    <value>Máx. por Minuto</value>
  </data>
  <data name="editrpc_default" xml:space="preserve">
    <value>Por defecto</value>
  </data>
  <data name="editrpc_execasgrp" xml:space="preserve">
    <value>Ejecutar como Grupo</value>
  </data>
  <data name="editserv_title1" xml:space="preserve">
    <value>Crar Servicio de Internet</value>
  </data>
  <data name="editserv_title2" xml:space="preserve">
    <value>Editar Servicio de Internet</value>
  </data>
  <data name="editserv_detail" xml:space="preserve">
    <value>Detalles de Servicio de Internet</value>
  </data>
  <data name="editserv_name" xml:space="preserve">
    <value>Nombre de Servicio</value>
  </data>
  <data name="editserv_port" xml:space="preserve">
    <value>Número de Puerto</value>
  </data>
  <data name="editserv_program" xml:space="preserve">
    <value>Programa</value>
  </data>
  <data name="editserv_args" xml:space="preserve">
    <value>Argumentoss</value>
  </data>
  <data name="editserv_maxchild" xml:space="preserve">
    <value>Máx. Procesos Hijo</value>
  </data>
  <data name="editserv_execlogin" xml:space="preserve">
    <value>Ejecutar Como Clase de Login</value>
  </data>
  <data name="editserv_wrapper" xml:space="preserve">
    <value>Arropador-TCP</value>
  </data>
  <data name="editserv_inetd" xml:space="preserve">
    <value>Interno a &lt;tt&gt;inetd&lt;/tt&gt;</value>
  </data>
  <data name="log_apply" xml:space="preserve">
    <value>Cambios aplicados</value>
  </data>
  <data name="log_create_serv" xml:space="preserve">
    <value>Creado servicio $1</value>
  </data>
  <data name="log_modify_serv" xml:space="preserve">
    <value>Modificado servicio $1</value>
  </data>
  <data name="log_delete_serv" xml:space="preserve">
    <value>Borrado servicio $1</value>
  </data>
  <data name="log_create_prog" xml:space="preserve">
    <value>Creado servicio y programa $1</value>
  </data>
  <data name="log_modify_prog" xml:space="preserve">
    <value>Modificado servicio y programa $1</value>
  </data>
  <data name="log_delete_prog" xml:space="preserve">
    <value>Borrado servicio y programa $1</value>
  </data>
  <data name="log_create_serv_l" xml:space="preserve">
    <value>Creado servicio $1 en puerto $2</value>
  </data>
  <data name="log_modify_serv_l" xml:space="preserve">
    <value>Modificado servicio $1 en puerto $2</value>
  </data>
  <data name="log_delete_serv_l" xml:space="preserve">
    <value>Borrado servicio $1 en puerto $2</value>
  </data>
  <data name="log_create_prog_l" xml:space="preserve">
    <value>Creado servicio $1 en puerto $2 para programa $3</value>
  </data>
  <data name="log_modify_prog_l" xml:space="preserve">
    <value>Modificado servicio $1 en puerto $2 para programa $3</value>
  </data>
  <data name="log_delete_prog_l" xml:space="preserve">
    <value>Borrado servicio $1 en puerto $2 para programa $3</value>
  </data>
  <data name="log_create_rpc" xml:space="preserve">
    <value>Creado RPC $1</value>
  </data>
  <data name="log_modify_rpc" xml:space="preserve">
    <value>Modificado RPC $1</value>
  </data>
  <data name="log_delete_rpc" xml:space="preserve">
    <value>Borrado RPC $1</value>
  </data>
  <data name="log_create_rprog" xml:space="preserve">
    <value>Creado RPC y programa $1</value>
  </data>
  <data name="log_modify_rprog" xml:space="preserve">
    <value>Modificado RPC y programa $1</value>
  </data>
  <data name="log_delete_rprog" xml:space="preserve">
    <value>Borrado RPC y programa $1</value>
  </data>
  <data name="log_create_rpc_l" xml:space="preserve">
    <value>Creado RPC $1 número $2</value>
  </data>
  <data name="log_modify_rpc_l" xml:space="preserve">
    <value>Modificado RPC $1 número $2</value>
  </data>
  <data name="log_delete_rpc_l" xml:space="preserve">
    <value>Borrado RPC $1 número $2</value>
  </data>
  <data name="log_create_rprog_l" xml:space="preserve">
    <value>Creado RPC $1 número $2 para programa $3</value>
  </data>
  <data name="log_modify_rprog_l" xml:space="preserve">
    <value>Modificad RPC $1 número $2 para programa $3</value>
  </data>
  <data name="log_delete_rprog_l" xml:space="preserve">
    <value>Borrado RPC $1 número $2 para programa $3</value>
  </data>
</root>