<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="index_title" xml:space="preserve">
    <value>因特网服务</value>
  </data>
  <data name="index_list" xml:space="preserve">
    <value>服务列表</value>
  </data>
  <data name="index_save" xml:space="preserve">
    <value>保存</value>
  </data>
  <data name="index_delete" xml:space="preserve">
    <value>删除</value>
  </data>
  <data name="index_create" xml:space="preserve">
    <value>创建</value>
  </data>
  <data name="index_service" xml:space="preserve">
    <value>因特网服务</value>
  </data>
  <data name="index_newservice" xml:space="preserve">
    <value>新建一个因特网服务</value>
  </data>
  <data name="index_rpc" xml:space="preserve">
    <value>RPC程序</value>
  </data>
  <data name="index_newrpc" xml:space="preserve">
    <value>新建一个RPC服务</value>
  </data>
  <data name="index_apply" xml:space="preserve">
    <value>应用更改</value>
  </data>
  <data name="index_applymsg" xml:space="preserve">
    <value>点击此按钮，发送 SIGHUP 信号给正在运行的&lt;tt&gt;inetd&lt;/tt&gt;进程，以应用当前的配置</value>
  </data>
  <data name="error_restart" xml:space="preserve">
    <value>重启Inetd失败</value>
  </data>
  <data name="error_saverpc" xml:space="preserve">
    <value>保存RPC程序失败</value>
  </data>
  <data name="error_invalidprgname" xml:space="preserve">
    <value>'$1'不是一个有效的程序名</value>
  </data>
  <data name="error_invalidprgnum" xml:space="preserve">
    <value>'$1'不是一个有效的程序编号</value>
  </data>
  <data name="error_invalidver" xml:space="preserve">
    <value>'$1' 不是一个有效的RPC版本</value>
  </data>
  <data name="error_noprotocol" xml:space="preserve">
    <value>你至少要选择一种协议</value>
  </data>
  <data name="error_notexist" xml:space="preserve">
    <value>'$1'不存在</value>
  </data>
  <data name="error_notexecutable" xml:space="preserve">
    <value>'$1'不可执行</value>
  </data>
  <data name="error_invalidcmd" xml:space="preserve">
    <value>'$1'不是一个有效命令</value>
  </data>
  <data name="error_nouser" xml:space="preserve">
    <value>你必须选择一个用户</value>
  </data>
  <data name="error_prgexist" xml:space="preserve">
    <value>已经存在名为'$1'的RPC程序</value>
  </data>
  <data name="error_prginuse" xml:space="preserve">
    <value>RPC程序编号 $1 正被使用</value>
  </data>
  <data name="error_saveservice" xml:space="preserve">
    <value>保存因特网服务失败</value>
  </data>
  <data name="error_invalidport" xml:space="preserve">
    <value>'$1' 不是一个有效的端口号</value>
  </data>
  <data name="error_invalidservice" xml:space="preserve">
    <value>'$1' 不是一个有效的服务名</value>
  </data>
  <data name="error_portnum" xml:space="preserve">
    <value>端口号$1必须大于 0 且小于 65536</value>
  </data>
  <data name="error_invalidprg" xml:space="preserve">
    <value>'$1' 不是一个有效的程序</value>
  </data>
  <data name="error_invalidarg" xml:space="preserve">
    <value>'$1' 不是有效的参数列</value>
  </data>
  <data name="error_invalidwrapper" xml:space="preserve">
    <value>'$1' 不是有效的TCP-wrappers服务</value>
  </data>
  <data name="error_invalidpermin" xml:space="preserve">
    <value>'$1' 不是有效的每分钟最大值</value>
  </data>
  <data name="error_invalidchildnum" xml:space="preserve">
    <value>'$1' 不是有效的子进程数目</value>
  </data>
  <data name="error_childnum" xml:space="preserve">
    <value>假如给定了每分钟最大值, 就必须给出子进程数目</value>
  </data>
  <data name="error_serviceexist" xml:space="preserve">
    <value>已存在一个使用端口 $1 和协议 $2 的服务</value>
  </data>
  <data name="error_nameexist" xml:space="preserve">
    <value>已存在一个名称为 $1 和协议为 $2 的服务</value>
  </data>
  <data name="error_inetservice" xml:space="preserve">
    <value>已存在一个名称为 $1 和协议为 $2 的因特网服务</value>
  </data>
  <data name="editrpc_title1" xml:space="preserve">
    <value>创建RPC程序</value>
  </data>
  <data name="editrpc_title2" xml:space="preserve">
    <value>编辑RPC程序</value>
  </data>
  <data name="editrpc_detail" xml:space="preserve">
    <value>RPC程序细节</value>
  </data>
  <data name="editrpc_prgname" xml:space="preserve">
    <value>程序名</value>
  </data>
  <data name="editrpc_prgnum" xml:space="preserve">
    <value>程序编号</value>
  </data>
  <data name="editrpc_aliase" xml:space="preserve">
    <value>别名</value>
  </data>
  <data name="editrpc_server" xml:space="preserve">
    <value>服务器程序</value>
  </data>
  <data name="editrpc_noassigned" xml:space="preserve">
    <value>未指派程序</value>
  </data>
  <data name="editrpc_disable" xml:space="preserve">
    <value>程序被禁用..</value>
  </data>
  <data name="editrpc_enable" xml:space="preserve">
    <value>程序被启用..</value>
  </data>
  <data name="editrpc_socket" xml:space="preserve">
    <value>套节类型</value>
  </data>
  <data name="editrpc_version" xml:space="preserve">
    <value>RPC版本</value>
  </data>
  <data name="editrpc_protocol" xml:space="preserve">
    <value>协议</value>
  </data>
  <data name="editrpc_internal" xml:space="preserve">
    <value>内部</value>
  </data>
  <data name="editrpc_command" xml:space="preserve">
    <value>命令</value>
  </data>
  <data name="editrpc_waitmode" xml:space="preserve">
    <value>等待模式</value>
  </data>
  <data name="editrpc_wait" xml:space="preserve">
    <value>等待直到完成</value>
  </data>
  <data name="editrpc_nowait" xml:space="preserve">
    <value>不等待</value>
  </data>
  <data name="editrpc_execasuser" xml:space="preserve">
    <value>作为用户运行</value>
  </data>
  <data name="editrpc_max" xml:space="preserve">
    <value>每分钟最大值</value>
  </data>
  <data name="editrpc_default" xml:space="preserve">
    <value>缺省</value>
  </data>
  <data name="editrpc_execasgrp" xml:space="preserve">
    <value>作为组运行</value>
  </data>
  <data name="editserv_title1" xml:space="preserve">
    <value>创建因特网服务</value>
  </data>
  <data name="editserv_title2" xml:space="preserve">
    <value>编辑因特网服务</value>
  </data>
  <data name="editserv_detail" xml:space="preserve">
    <value>因特网服务细节</value>
  </data>
  <data name="editserv_name" xml:space="preserve">
    <value>服务名</value>
  </data>
  <data name="editserv_port" xml:space="preserve">
    <value>端口号</value>
  </data>
  <data name="editserv_program" xml:space="preserve">
    <value>程序</value>
  </data>
  <data name="editserv_args" xml:space="preserve">
    <value>参数</value>
  </data>
  <data name="editserv_maxchild" xml:space="preserve">
    <value>最多子进程数</value>
  </data>
  <data name="editserv_execlogin" xml:space="preserve">
    <value>以登录级别执行</value>
  </data>
  <data name="editserv_wrapper" xml:space="preserve">
    <value>TCP-Wrapper</value>
  </data>
  <data name="editserv_inetd" xml:space="preserve">
    <value>在 &lt;tt&gt;inetd&lt;/tt&gt; 内部</value>
  </data>
  <data name="log_apply" xml:space="preserve">
    <value>已应用更改</value>
  </data>
  <data name="log_create_serv" xml:space="preserve">
    <value>已创建服务 $1</value>
  </data>
  <data name="log_modify_serv" xml:space="preserve">
    <value>已修改服务 $1</value>
  </data>
  <data name="log_delete_serv" xml:space="preserve">
    <value>已删除服务 $1</value>
  </data>
  <data name="log_create_prog" xml:space="preserve">
    <value>已创建服务和程序 $1</value>
  </data>
  <data name="log_modify_prog" xml:space="preserve">
    <value>已修改服务和程序 $1</value>
  </data>
  <data name="log_delete_prog" xml:space="preserve">
    <value>已删除服务和程序 $1</value>
  </data>
  <data name="log_create_serv_l" xml:space="preserve">
    <value>已在端口 $2 创建服务 $1</value>
  </data>
  <data name="log_modify_serv_l" xml:space="preserve">
    <value>已在端口 $2 修改服务 $1</value>
  </data>
  <data name="log_delete_serv_l" xml:space="preserve">
    <value>已在端口 $2 删除服务 $1</value>
  </data>
  <data name="log_create_prog_l" xml:space="preserve">
    <value>已在端口 $2 创建程序 $3 服务 $1</value>
  </data>
  <data name="log_modify_prog_l" xml:space="preserve">
    <value>已在端口 $2 更新程序 $3 服务 $1</value>
  </data>
  <data name="log_delete_prog_l" xml:space="preserve">
    <value>已在端口 $2 删除程序 $3 服务 $1</value>
  </data>
  <data name="log_create_rpc" xml:space="preserve">
    <value>已创建 RPC $1</value>
  </data>
  <data name="log_modify_rpc" xml:space="preserve">
    <value>已修改 RPC $1</value>
  </data>
  <data name="log_delete_rpc" xml:space="preserve">
    <value>已删除 RPC $1</value>
  </data>
  <data name="log_create_rprog" xml:space="preserve">
    <value>已创建 RPC 和程序 $1</value>
  </data>
  <data name="log_modify_rprog" xml:space="preserve">
    <value>已修改 RPC 和程序 $1</value>
  </data>
  <data name="log_delete_rprog" xml:space="preserve">
    <value>已删除 RPC 和程序 $1</value>
  </data>
  <data name="log_create_rpc_l" xml:space="preserve">
    <value>已创建 RPC $1 号码 $2</value>
  </data>
  <data name="log_modify_rpc_l" xml:space="preserve">
    <value>已修改 RPC $1 号码 $2</value>
  </data>
  <data name="log_delete_rpc_l" xml:space="preserve">
    <value>已删除 RPC $1 号码 $2</value>
  </data>
  <data name="log_create_rprog_l" xml:space="preserve">
    <value>已创建程序 $3的 RPC $1 号码 $2</value>
  </data>
  <data name="log_modify_rprog_l" xml:space="preserve">
    <value>已修改程序 $3的 RPC $1 号码 $2</value>
  </data>
  <data name="log_delete_rprog_l" xml:space="preserve">
    <value>已删除程序 $3的 RPC $1 号码 $2</value>
  </data>
</root>