<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="index_title" xml:space="preserve">
    <value>Network Services and Protocols</value>
  </data>
  <data name="index_list" xml:space="preserve">
    <value>service list</value>
  </data>
  <data name="index_save" xml:space="preserve">
    <value>Save</value>
  </data>
  <data name="index_delete" xml:space="preserve">
    <value>Delete</value>
  </data>
  <data name="index_create" xml:space="preserve">
    <value>Create</value>
  </data>
  <data name="index_edit" xml:space="preserve">
    <value>Edit service:</value>
  </data>
  <data name="index_service" xml:space="preserve">
    <value>Internet Services</value>
  </data>
  <data name="index_newservice" xml:space="preserve">
    <value>Create a new internet service.</value>
  </data>
  <data name="index_rpc" xml:space="preserve">
    <value>RPC Programs</value>
  </data>
  <data name="index_newrpc" xml:space="preserve">
    <value>Create a new RPC program.</value>
  </data>
  <data name="index_apply" xml:space="preserve">
    <value>Apply Changes</value>
  </data>
  <data name="index_applymsg" xml:space="preserve">
    <value>Click this button to apply the current configuration by sending a SIGHUP signal to the running &lt;tt&gt;inetd&lt;/tt&gt; process</value>
  </data>
  <data name="index_search" xml:space="preserve">
    <value>Display services matching:</value>
  </data>
  <data name="index_sok" xml:space="preserve">
    <value>Search</value>
  </data>
  <data name="index_toomany" xml:space="preserve">
    <value>There are too many internet services to display on this page.</value>
  </data>
  <data name="index_none" xml:space="preserve">
    <value>No internet services matched your search.</value>
  </data>
  <data name="error_restart" xml:space="preserve">
    <value>Failed to restart Inetd</value>
  </data>
  <data name="error_saverpc" xml:space="preserve">
    <value>Failed to save RPC program</value>
  </data>
  <data name="error_invalidprgname" xml:space="preserve">
    <value>'$1' is not a valid program name</value>
  </data>
  <data name="error_invalidprgnum" xml:space="preserve">
    <value>'$1' is not a valid program number</value>
  </data>
  <data name="error_invalidver" xml:space="preserve">
    <value>'$1' is not a valid RPC version</value>
  </data>
  <data name="error_noprotocol" xml:space="preserve">
    <value>You must choose at least one protocol</value>
  </data>
  <data name="error_notexist" xml:space="preserve">
    <value>'$1' does not exist</value>
  </data>
  <data name="error_notexecutable" xml:space="preserve">
    <value>'$1' is not executable</value>
  </data>
  <data name="error_invalidcmd" xml:space="preserve">
    <value>'$1' is not a valid command</value>
  </data>
  <data name="error_nouser" xml:space="preserve">
    <value>You must select a user</value>
  </data>
  <data name="error_user" xml:space="preserve">
    <value>Missing or invalid user to execute as</value>
  </data>
  <data name="error_group" xml:space="preserve">
    <value>Missing or invalid group to execute as</value>
  </data>
  <data name="error_prgexist" xml:space="preserve">
    <value>An RPC program called $1 already exists</value>
  </data>
  <data name="error_prginuse" xml:space="preserve">
    <value>The RPC program number $1 is already in use</value>
  </data>
  <data name="error_saveservice" xml:space="preserve">
    <value>Failed to save internet service</value>
  </data>
  <data name="error_invalidport" xml:space="preserve">
    <value>'$1' is not a valid port number</value>
  </data>
  <data name="error_invalidservice" xml:space="preserve">
    <value>'$1' is not a valid service name</value>
  </data>
  <data name="error_portnum" xml:space="preserve">
    <value>Port number $1 must be &gt;0 and &lt;65536</value>
  </data>
  <data name="error_invalidprg" xml:space="preserve">
    <value>'$1' is not a valid program</value>
  </data>
  <data name="error_invalidarg" xml:space="preserve">
    <value>'$1' is not a valid arg list</value>
  </data>
  <data name="error_invalidwrapper" xml:space="preserve">
    <value>'$1' is not a valid TCP-wrappers service</value>
  </data>
  <data name="error_invalidpermin" xml:space="preserve">
    <value>'$1' is not a valid maximum per minute</value>
  </data>
  <data name="error_invalidchildnum" xml:space="preserve">
    <value>'$1' is not a valid number of child processes</value>
  </data>
  <data name="error_childnum" xml:space="preserve">
    <value>If a maximum per minute is given, so must a number of child processes</value>
  </data>
  <data name="error_serviceexist" xml:space="preserve">
    <value>A service using port $1 and protocol $2 already exists</value>
  </data>
  <data name="error_nameexist" xml:space="preserve">
    <value>A service with name $1 and protocol $2 already exists</value>
  </data>
  <data name="error_inetservice" xml:space="preserve">
    <value>An internet service with name $1 and protocol $2 already exists</value>
  </data>
  <data name="error_smfservice" xml:space="preserve">
    <value>Failed to update smf service with cmd  '$1', errorcode $2 </value>
  </data>
  <data name="error_smf_cmdfield" xml:space="preserve">
    <value>For smf, filename of program '$1' must match first argument of command field, i.e. be '$2'</value>
  </data>
  <data name="editrpc_title1" xml:space="preserve">
    <value>Create RPC Program</value>
  </data>
  <data name="editrpc_title2" xml:space="preserve">
    <value>Edit RPC Program</value>
  </data>
  <data name="editrpc_detail" xml:space="preserve">
    <value>RPC Program Details</value>
  </data>
  <data name="editrpc_prgname" xml:space="preserve">
    <value>Program Name</value>
  </data>
  <data name="editrpc_prgnum" xml:space="preserve">
    <value>Program Number</value>
  </data>
  <data name="editrpc_aliase" xml:space="preserve">
    <value>Aliases</value>
  </data>
  <data name="editrpc_server" xml:space="preserve">
    <value>Server Program</value>
  </data>
  <data name="editrpc_act" xml:space="preserve">
    <value>Program state</value>
  </data>
  <data name="editrpc_noassigned" xml:space="preserve">
    <value>No program assigned</value>
  </data>
  <data name="editrpc_disable" xml:space="preserve">
    <value>Program disabled..</value>
  </data>
  <data name="editrpc_enable" xml:space="preserve">
    <value>Program enabled..</value>
  </data>
  <data name="editrpc_socket" xml:space="preserve">
    <value>Socket Type</value>
  </data>
  <data name="editrpc_stream" xml:space="preserve">
    <value>Stream</value>
  </data>
  <data name="editrpc_dgram" xml:space="preserve">
    <value>Datagram</value>
  </data>
  <data name="editrpc_tli" xml:space="preserve">
    <value>TLI</value>
  </data>
  <data name="editrpc_version" xml:space="preserve">
    <value>RPC Versions</value>
  </data>
  <data name="editrpc_protocol" xml:space="preserve">
    <value>Protocol</value>
  </data>
  <data name="editrpc_internal" xml:space="preserve">
    <value>Internal</value>
  </data>
  <data name="editrpc_command" xml:space="preserve">
    <value>Command</value>
  </data>
  <data name="editrpc_waitmode" xml:space="preserve">
    <value>Wait Mode</value>
  </data>
  <data name="editrpc_wait" xml:space="preserve">
    <value>Wait until complete</value>
  </data>
  <data name="editrpc_nowait" xml:space="preserve">
    <value>Don't wait</value>
  </data>
  <data name="editrpc_execasuser" xml:space="preserve">
    <value>Execute As User</value>
  </data>
  <data name="editrpc_max" xml:space="preserve">
    <value>Max per Minute</value>
  </data>
  <data name="editrpc_default" xml:space="preserve">
    <value>Default</value>
  </data>
  <data name="editrpc_execasgrp" xml:space="preserve">
    <value>Execute as Group</value>
  </data>
  <data name="editserv_title1" xml:space="preserve">
    <value>Create Internet Service</value>
  </data>
  <data name="editserv_title2" xml:space="preserve">
    <value>Edit Internet Service</value>
  </data>
  <data name="editserv_detail" xml:space="preserve">
    <value>Internet Service Details</value>
  </data>
  <data name="editserv_name" xml:space="preserve">
    <value>Service Name</value>
  </data>
  <data name="editserv_port" xml:space="preserve">
    <value>Port Number</value>
  </data>
  <data name="editserv_program" xml:space="preserve">
    <value>Program</value>
  </data>
  <data name="editserv_args" xml:space="preserve">
    <value>Args</value>
  </data>
  <data name="editserv_maxchild" xml:space="preserve">
    <value>Max Child Processes</value>
  </data>
  <data name="editserv_execlogin" xml:space="preserve">
    <value>Execute As Login Class</value>
  </data>
  <data name="editserv_wrapper" xml:space="preserve">
    <value>TCP-Wrapper</value>
  </data>
  <data name="editserv_inetd" xml:space="preserve">
    <value>Internal to &lt;tt&gt;inetd&lt;/tt&gt;</value>
  </data>
  <data name="editserv_qm" xml:space="preserve">
    <value>Command may not exist?</value>
  </data>
  <data name="editserv_ename" xml:space="preserve">
    <value>No service with that name and protocol exists</value>
  </data>
  <data name="log_apply" xml:space="preserve">
    <value>Applied changes</value>
  </data>
  <data name="log_create_serv" xml:space="preserve">
    <value>Created service $1</value>
  </data>
  <data name="log_modify_serv" xml:space="preserve">
    <value>Modified service $1</value>
  </data>
  <data name="log_delete_serv" xml:space="preserve">
    <value>Deleted service $1</value>
  </data>
  <data name="log_create_prog" xml:space="preserve">
    <value>Created service and program $1</value>
  </data>
  <data name="log_modify_prog" xml:space="preserve">
    <value>Modified service and program $1</value>
  </data>
  <data name="log_delete_prog" xml:space="preserve">
    <value>Deleted service and program $1</value>
  </data>
  <data name="log_create_serv_l" xml:space="preserve">
    <value>Created service $1 on port $2</value>
  </data>
  <data name="log_modify_serv_l" xml:space="preserve">
    <value>Modified service $1 on port $2</value>
  </data>
  <data name="log_delete_serv_l" xml:space="preserve">
    <value>Deleted service $1 on port $2</value>
  </data>
  <data name="log_create_prog_l" xml:space="preserve">
    <value>Created service $1 on port $2 for program $3</value>
  </data>
  <data name="log_modify_prog_l" xml:space="preserve">
    <value>Modified service $1 on port $2 for program $3</value>
  </data>
  <data name="log_delete_prog_l" xml:space="preserve">
    <value>Deleted service $1 on port $2 for program $3</value>
  </data>
  <data name="log_create_rpc" xml:space="preserve">
    <value>Created RPC $1</value>
  </data>
  <data name="log_modify_rpc" xml:space="preserve">
    <value>Modified RPC $1</value>
  </data>
  <data name="log_delete_rpc" xml:space="preserve">
    <value>Deleted RPC $1</value>
  </data>
  <data name="log_create_rprog" xml:space="preserve">
    <value>Created RPC and program $1</value>
  </data>
  <data name="log_modify_rprog" xml:space="preserve">
    <value>Modified RPC and program $1</value>
  </data>
  <data name="log_delete_rprog" xml:space="preserve">
    <value>Deleted RPC and program $1</value>
  </data>
  <data name="log_create_rpc_l" xml:space="preserve">
    <value>Created RPC $1 number $2</value>
  </data>
  <data name="log_modify_rpc_l" xml:space="preserve">
    <value>Modified RPC $1 number $2</value>
  </data>
  <data name="log_delete_rpc_l" xml:space="preserve">
    <value>Deleted RPC $1 number $2</value>
  </data>
  <data name="log_create_rprog_l" xml:space="preserve">
    <value>Created RPC $1 number $2 for program $3</value>
  </data>
  <data name="log_modify_rprog_l" xml:space="preserve">
    <value>Modified RPC $1 number $2 for program $3</value>
  </data>
  <data name="log_delete_rprog_l" xml:space="preserve">
    <value>Deleted RPC $1 number $2 for program $3</value>
  </data>
  <data name="__norefs" xml:space="preserve">
    <value>1</value>
  </data>
</root>