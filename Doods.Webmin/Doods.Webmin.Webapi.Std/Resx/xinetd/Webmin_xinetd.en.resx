<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="index_title" xml:space="preserve">
    <value>Network Services</value>
  </data>
  <data name="index_none" xml:space="preserve">
    <value>No network services have been defined yet.</value>
  </data>
  <data name="index_name" xml:space="preserve">
    <value>Service name</value>
  </data>
  <data name="index_type" xml:space="preserve">
    <value>Type</value>
  </data>
  <data name="index_port" xml:space="preserve">
    <value>Port / number</value>
  </data>
  <data name="index_rpc" xml:space="preserve">
    <value>RPC</value>
  </data>
  <data name="index_inet" xml:space="preserve">
    <value>Internet</value>
  </data>
  <data name="index_proto" xml:space="preserve">
    <value>Protocol</value>
  </data>
  <data name="index_user" xml:space="preserve">
    <value>User</value>
  </data>
  <data name="index_server" xml:space="preserve">
    <value>Server program</value>
  </data>
  <data name="index_redirect" xml:space="preserve">
    <value>Forward to $1</value>
  </data>
  <data name="index_enabled" xml:space="preserve">
    <value>Enabled?</value>
  </data>
  <data name="index_internal" xml:space="preserve">
    <value>Internal to Xinetd</value>
  </data>
  <data name="index_add_inet" xml:space="preserve">
    <value>Create a new internet service</value>
  </data>
  <data name="index_add_rpc" xml:space="preserve">
    <value>Create a new RPC service</value>
  </data>
  <data name="index_return" xml:space="preserve">
    <value>service list</value>
  </data>
  <data name="index_defaults" xml:space="preserve">
    <value>Edit Defaults</value>
  </data>
  <data name="index_defaultsmsg" xml:space="preserve">
    <value>Click this button to edit default options that apply to all internet and RPC services</value>
  </data>
  <data name="index_apply" xml:space="preserve">
    <value>Apply Changes</value>
  </data>
  <data name="index_applymsg" xml:space="preserve">
    <value>Click this button to apply the current configuration by sending a SIGUSR2 signal to the running &lt;tt&gt;xinetd&lt;/tt&gt; process</value>
  </data>
  <data name="index_start" xml:space="preserve">
    <value>Start Xinetd</value>
  </data>
  <data name="index_startmsg" xml:space="preserve">
    <value>Click this button to start the Xinetd server with the current configuration</value>
  </data>
  <data name="index_noport" xml:space="preserve">
    <value>Unknown</value>
  </data>
  <data name="index_enable" xml:space="preserve">
    <value>Enable Selected</value>
  </data>
  <data name="index_disable" xml:space="preserve">
    <value>Disable Selected</value>
  </data>
  <data name="serv_create" xml:space="preserve">
    <value>Create Internet Service</value>
  </data>
  <data name="serv_edit" xml:space="preserve">
    <value>Edit Internet Service</value>
  </data>
  <data name="serv_header1" xml:space="preserve">
    <value>Service network options</value>
  </data>
  <data name="serv_header2" xml:space="preserve">
    <value>Service program options</value>
  </data>
  <data name="serv_header3" xml:space="preserve">
    <value>Service access control</value>
  </data>
  <data name="serv_id" xml:space="preserve">
    <value>Service name</value>
  </data>
  <data name="serv_port" xml:space="preserve">
    <value>Port number</value>
  </data>
  <data name="serv_port_def" xml:space="preserve">
    <value>Standard</value>
  </data>
  <data name="serv_sock" xml:space="preserve">
    <value>Socket type</value>
  </data>
  <data name="serv_proto" xml:space="preserve">
    <value>Protocol</value>
  </data>
  <data name="serv_enabled" xml:space="preserve">
    <value>Service enabled?</value>
  </data>
  <data name="serv_bind" xml:space="preserve">
    <value>Bind to address</value>
  </data>
  <data name="serv_bind_def" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="serv_user" xml:space="preserve">
    <value>Run as user</value>
  </data>
  <data name="serv_group" xml:space="preserve">
    <value>Run as group</value>
  </data>
  <data name="serv_group_def" xml:space="preserve">
    <value>From user</value>
  </data>
  <data name="serv_prog" xml:space="preserve">
    <value>Service handled by</value>
  </data>
  <data name="serv_internal" xml:space="preserve">
    <value>Internal to Xinetd</value>
  </data>
  <data name="serv_server" xml:space="preserve">
    <value>Server program</value>
  </data>
  <data name="serv_redirect" xml:space="preserve">
    <value>Forward to host</value>
  </data>
  <data name="serv_rport" xml:space="preserve">
    <value>port</value>
  </data>
  <data name="serv_wait" xml:space="preserve">
    <value>Wait until complete?</value>
  </data>
  <data name="serv_inst" xml:space="preserve">
    <value>Max concurrent servers</value>
  </data>
  <data name="serv_inst_def" xml:space="preserve">
    <value>Unlimited</value>
  </data>
  <data name="serv_nice" xml:space="preserve">
    <value>Nice level for server</value>
  </data>
  <data name="serv_cps0" xml:space="preserve">
    <value>Maximum connections per second</value>
  </data>
  <data name="serv_cps_def" xml:space="preserve">
    <value>Unlimited</value>
  </data>
  <data name="serv_cps1" xml:space="preserve">
    <value>Delay if maximum is reached</value>
  </data>
  <data name="serv_sec" xml:space="preserve">
    <value>seconds</value>
  </data>
  <data name="serv_from" xml:space="preserve">
    <value>Allow access from</value>
  </data>
  <data name="serv_from_def" xml:space="preserve">
    <value>All hosts</value>
  </data>
  <data name="serv_from_sel" xml:space="preserve">
    <value>Only listed hosts..</value>
  </data>
  <data name="serv_access" xml:space="preserve">
    <value>Deny access from</value>
  </data>
  <data name="serv_access_def" xml:space="preserve">
    <value>No hosts</value>
  </data>
  <data name="serv_access_sel" xml:space="preserve">
    <value>Only listed hosts..</value>
  </data>
  <data name="serv_times" xml:space="preserve">
    <value>Allow access at times</value>
  </data>
  <data name="serv_times_def" xml:space="preserve">
    <value>Any time</value>
  </data>
  <data name="serv_err" xml:space="preserve">
    <value>Failed to save service</value>
  </data>
  <data name="serv_eid" xml:space="preserve">
    <value>Missing or invalid service name</value>
  </data>
  <data name="serv_ebind" xml:space="preserve">
    <value>Missing or invalid address to bind to</value>
  </data>
  <data name="serv_eport" xml:space="preserve">
    <value>Missing or invalid port number</value>
  </data>
  <data name="serv_einst" xml:space="preserve">
    <value>Missing or invalid number of concurrent servers</value>
  </data>
  <data name="serv_euser" xml:space="preserve">
    <value>You must enter a user</value>
  </data>
  <data name="serv_egroup" xml:space="preserve">
    <value>You must enter a group</value>
  </data>
  <data name="serv_estd" xml:space="preserve">
    <value>There is no standard port number for service $1</value>
  </data>
  <data name="serv_eproto" xml:space="preserve">
    <value>You must select a protocol for this service</value>
  </data>
  <data name="serv_eserver" xml:space="preserve">
    <value>Missing or invalid server program</value>
  </data>
  <data name="serv_erhost" xml:space="preserve">
    <value>Missing or invalid forwarding host</value>
  </data>
  <data name="serv_erport" xml:space="preserve">
    <value>Missing or invalid forwarding port</value>
  </data>
  <data name="serv_enice" xml:space="preserve">
    <value>Missing or invalid nice level</value>
  </data>
  <data name="serv_ecps0" xml:space="preserve">
    <value>Missing or invalid number of connections per second</value>
  </data>
  <data name="serv_ecps1" xml:space="preserve">
    <value>Missing or invalid delay</value>
  </data>
  <data name="serv_etimes" xml:space="preserve">
    <value>Access times must be in the format HH:MM-HH:MM</value>
  </data>
  <data name="sock_stream" xml:space="preserve">
    <value>Stream</value>
  </data>
  <data name="sock_dgram" xml:space="preserve">
    <value>Datagram</value>
  </data>
  <data name="sock_raw" xml:space="preserve">
    <value>Raw</value>
  </data>
  <data name="sock_seqpacket" xml:space="preserve">
    <value>Sequential datagram</value>
  </data>
  <data name="proto_" xml:space="preserve">
    <value>Default</value>
  </data>
  <data name="proto_ip" xml:space="preserve">
    <value>IP (Internet Protocol)</value>
  </data>
  <data name="proto_tcp" xml:space="preserve">
    <value>TCP (Transmission Control Protocol)</value>
  </data>
  <data name="proto_udp" xml:space="preserve">
    <value>UDP (User Datagram Protocol)</value>
  </data>
  <data name="restart_err" xml:space="preserve">
    <value>Failed to apply changes</value>
  </data>
  <data name="restart_ekill" xml:space="preserve">
    <value>Failed to send USR2 signal to PID $1 : $2</value>
  </data>
  <data name="restart_epid" xml:space="preserve">
    <value>No longer running</value>
  </data>
  <data name="start_err" xml:space="preserve">
    <value>Failed to start xinetd</value>
  </data>
  <data name="start_estart" xml:space="preserve">
    <value>$1 failed : $2</value>
  </data>
  <data name="defs_title" xml:space="preserve">
    <value>Default Options</value>
  </data>
  <data name="defs_header" xml:space="preserve">
    <value>Default options for services</value>
  </data>
  <data name="defs_log" xml:space="preserve">
    <value>Xinetd logging mode</value>
  </data>
  <data name="defs_log_def" xml:space="preserve">
    <value>Disable logging</value>
  </data>
  <data name="defs_facility" xml:space="preserve">
    <value>Log to syslog facility</value>
  </data>
  <data name="defs_level" xml:space="preserve">
    <value>at level</value>
  </data>
  <data name="defs_file" xml:space="preserve">
    <value>Log to file</value>
  </data>
  <data name="defs_soft" xml:space="preserve">
    <value>Soft file limit</value>
  </data>
  <data name="defs_hard" xml:space="preserve">
    <value>Hard file limit</value>
  </data>
  <data name="defs_success" xml:space="preserve">
    <value>On successful connection log</value>
  </data>
  <data name="defs_success_pid" xml:space="preserve">
    <value>Server process ID</value>
  </data>
  <data name="defs_success_host" xml:space="preserve">
    <value>Remote host</value>
  </data>
  <data name="defs_success_userid" xml:space="preserve">
    <value>Remote ident user</value>
  </data>
  <data name="defs_success_exit" xml:space="preserve">
    <value>Server exit status</value>
  </data>
  <data name="defs_success_duration" xml:space="preserve">
    <value>Session duration</value>
  </data>
  <data name="defs_failure" xml:space="preserve">
    <value>On failed connection log</value>
  </data>
  <data name="defs_failure_host" xml:space="preserve">
    <value>Remote host</value>
  </data>
  <data name="defs_failure_userid" xml:space="preserve">
    <value>Remote ident user</value>
  </data>
  <data name="defs_failure_attempt" xml:space="preserve">
    <value>Connection attempt</value>
  </data>
  <data name="defs_failure_record" xml:space="preserve">
    <value>Remote information</value>
  </data>
  <data name="defs_err" xml:space="preserve">
    <value>Failed to save default options</value>
  </data>
  <data name="defs_efile" xml:space="preserve">
    <value>Missing or invalid log filename</value>
  </data>
  <data name="defs_esoft" xml:space="preserve">
    <value>Missing or invalid soft limit</value>
  </data>
  <data name="defs_ehard" xml:space="preserve">
    <value>Missing or invalid hard limit</value>
  </data>
  <data name="log_create_serv" xml:space="preserve">
    <value>Created $2 service $1</value>
  </data>
  <data name="log_modify_serv" xml:space="preserve">
    <value>Modified $2 service $1</value>
  </data>
  <data name="log_delete_serv" xml:space="preserve">
    <value>Deleted $2 service $1</value>
  </data>
  <data name="log_start" xml:space="preserve">
    <value>Started Xinetd server</value>
  </data>
  <data name="log_apply" xml:space="preserve">
    <value>Applied changes</value>
  </data>
  <data name="log_defaults" xml:space="preserve">
    <value>Changed default options</value>
  </data>
  <data name="log_enable" xml:space="preserve">
    <value>Enabled $1 services</value>
  </data>
  <data name="log_disable" xml:space="preserve">
    <value>Disabled $1 services</value>
  </data>
  <data name="log_enable_l" xml:space="preserve">
    <value>Enabled services $1</value>
  </data>
  <data name="log_disable_l" xml:space="preserve">
    <value>Disabled services $1</value>
  </data>
  <data name="config_dirdef" xml:space="preserve">
    <value>Xinetd configuration file</value>
  </data>
  <data name="config_dirto" xml:space="preserve">
    <value>New file in directory</value>
  </data>
  <data name="__norefs" xml:space="preserve">
    <value>1</value>
  </data>
</root>