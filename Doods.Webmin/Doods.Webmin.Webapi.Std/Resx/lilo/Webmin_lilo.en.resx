<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="index_title" xml:space="preserve">
    <value>Linux Bootup Configuration</value>
  </data>
  <data name="index_addk" xml:space="preserve">
    <value>Create a new boot kernel</value>
  </data>
  <data name="index_addp" xml:space="preserve">
    <value>Create a new boot partition</value>
  </data>
  <data name="index_global" xml:space="preserve">
    <value>Edit Global Options</value>
  </data>
  <data name="index_globalmsg" xml:space="preserve">
    <value>Edit global bootup options that apply to all kernels and partitions.</value>
  </data>
  <data name="index_apply" xml:space="preserve">
    <value>Apply Configuration</value>
  </data>
  <data name="index_applymsg1" xml:space="preserve">
    <value>Apply the current configuration to the boot sector on $1.</value>
  </data>
  <data name="index_applymsg2" xml:space="preserve">
    <value>Apply the current configuration to the boot sector on the current root device.</value>
  </data>
  <data name="index_applymsg3" xml:space="preserve">
    <value>Make sure your configuration is correct before rebooting!</value>
  </data>
  <data name="index_return" xml:space="preserve">
    <value>kernels and partitions</value>
  </data>
  <data name="index_earch" xml:space="preserve">
    <value>LILO is only supported on x86 architecture systems</value>
  </data>
  <data name="index_econf" xml:space="preserve">
    <value>The LILO configuration file $1 does not exist. Maybe another boot loader is being used on your system.</value>
  </data>
  <data name="global_title" xml:space="preserve">
    <value>Global Options</value>
  </data>
  <data name="global_desc" xml:space="preserve">
    <value>Global Boot Options</value>
  </data>
  <data name="global_boot" xml:space="preserve">
    <value>Write boot loader to</value>
  </data>
  <data name="global_root" xml:space="preserve">
    <value>Root device</value>
  </data>
  <data name="global_default" xml:space="preserve">
    <value>Default kernel/partition</value>
  </data>
  <data name="global_first" xml:space="preserve">
    <value>First in list</value>
  </data>
  <data name="global_prompt" xml:space="preserve">
    <value>Display LILO prompt?</value>
  </data>
  <data name="global_timeout" xml:space="preserve">
    <value>Time to wait at LILO prompt</value>
  </data>
  <data name="global_forever" xml:space="preserve">
    <value>Forever</value>
  </data>
  <data name="global_lock" xml:space="preserve">
    <value>Remember user kernel options?</value>
  </data>
  <data name="global_delay" xml:space="preserve">
    <value>Time to wait before booting</value>
  </data>
  <data name="global_imm" xml:space="preserve">
    <value>Immediate</value>
  </data>
  <data name="global_compact" xml:space="preserve">
    <value>Merge read requests?</value>
  </data>
  <data name="global_optional" xml:space="preserve">
    <value>Skip kernels that do not exist?</value>
  </data>
  <data name="global_password" xml:space="preserve">
    <value>Default boot password</value>
  </data>
  <data name="global_none" xml:space="preserve">
    <value>None</value>
  </data>
  <data name="global_restricted" xml:space="preserve">
    <value>Password needed for</value>
  </data>
  <data name="global_extra" xml:space="preserve">
    <value>Booting kernels with extra options</value>
  </data>
  <data name="global_any" xml:space="preserve">
    <value>Any booting</value>
  </data>
  <data name="global_secs" xml:space="preserve">
    <value>seconds</value>
  </data>
  <data name="global_lba" xml:space="preserve">
    <value>Allow booting from beyond 1024 cylinders?</value>
  </data>
  <data name="global_err" xml:space="preserve">
    <value>Failed to save global options</value>
  </data>
  <data name="apply_title" xml:space="preserve">
    <value>Apply Configuration</value>
  </data>
  <data name="apply_exec" xml:space="preserve">
    <value>Applying LILO configuration with command $1 ..</value>
  </data>
  <data name="image_title1" xml:space="preserve">
    <value>Create Boot Kernel</value>
  </data>
  <data name="image_title2" xml:space="preserve">
    <value>Edit Boot Kernel</value>
  </data>
  <data name="image_options" xml:space="preserve">
    <value>Boot Kernel Options</value>
  </data>
  <data name="image_name" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="image_kernel" xml:space="preserve">
    <value>Kernel to boot</value>
  </data>
  <data name="image_opts" xml:space="preserve">
    <value>Kernel options</value>
  </data>
  <data name="image_default" xml:space="preserve">
    <value>Default</value>
  </data>
  <data name="image_add" xml:space="preserve">
    <value>Add options..</value>
  </data>
  <data name="image_replace" xml:space="preserve">
    <value>Replace options..</value>
  </data>
  <data name="image_root" xml:space="preserve">
    <value>Root device</value>
  </data>
  <data name="image_fromkern" xml:space="preserve">
    <value>From kernel</value>
  </data>
  <data name="image_rcurr" xml:space="preserve">
    <value>Current root</value>
  </data>
  <data name="image_rdev" xml:space="preserve">
    <value>Device ..</value>
  </data>
  <data name="image_initrd" xml:space="preserve">
    <value>Initial ramdisk file</value>
  </data>
  <data name="image_mode" xml:space="preserve">
    <value>Root mount mode</value>
  </data>
  <data name="image_ro" xml:space="preserve">
    <value>Read-only</value>
  </data>
  <data name="image_rw" xml:space="preserve">
    <value>Read-write</value>
  </data>
  <data name="image_vga" xml:space="preserve">
    <value>VGA text mode</value>
  </data>
  <data name="image_ask" xml:space="preserve">
    <value>Ask user</value>
  </data>
  <data name="image_other" xml:space="preserve">
    <value>Other</value>
  </data>
  <data name="image_lock" xml:space="preserve">
    <value>Remember user kernel options?</value>
  </data>
  <data name="image_optional" xml:space="preserve">
    <value>Skip kernels that do not exist?</value>
  </data>
  <data name="image_password" xml:space="preserve">
    <value>Boot password</value>
  </data>
  <data name="image_restricted" xml:space="preserve">
    <value>Password needed for</value>
  </data>
  <data name="image_extra" xml:space="preserve">
    <value>Booting kernels with extra options</value>
  </data>
  <data name="image_any" xml:space="preserve">
    <value>Any booting</value>
  </data>
  <data name="image_none" xml:space="preserve">
    <value>None</value>
  </data>
  <data name="image_ename" xml:space="preserve">
    <value>Missing name for this boot kernel</value>
  </data>
  <data name="image_ekernel" xml:space="preserve">
    <value>Kernel image '$1' does not exist</value>
  </data>
  <data name="image_einitrd" xml:space="preserve">
    <value>Initial ramdisk file '$1' does not exist</value>
  </data>
  <data name="other_title1" xml:space="preserve">
    <value>Create Boot Partition</value>
  </data>
  <data name="other_title2" xml:space="preserve">
    <value>Edit Boot Partition</value>
  </data>
  <data name="other_details" xml:space="preserve">
    <value>Partition Details</value>
  </data>
  <data name="other_name" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="other_part" xml:space="preserve">
    <value>Partition to boot</value>
  </data>
  <data name="other_pass" xml:space="preserve">
    <value>Pass partition table to OS?</value>
  </data>
  <data name="other_yes" xml:space="preserve">
    <value>Yes, from</value>
  </data>
  <data name="other_password" xml:space="preserve">
    <value>Boot password</value>
  </data>
  <data name="other_none" xml:space="preserve">
    <value>None</value>
  </data>
  <data name="other_ename" xml:space="preserve">
    <value>Missing name for this boot partition</value>
  </data>
  <data name="log_create_image" xml:space="preserve">
    <value>Created boot kernel $1</value>
  </data>
  <data name="log_modify_image" xml:space="preserve">
    <value>Modified boot kernel $1</value>
  </data>
  <data name="log_delete_image" xml:space="preserve">
    <value>Deleted boot kernel $1</value>
  </data>
  <data name="log_create_image_l" xml:space="preserve">
    <value>Created boot kernel $1 for $2</value>
  </data>
  <data name="log_modify_image_l" xml:space="preserve">
    <value>Modified boot kernel $1 for $2</value>
  </data>
  <data name="log_delete_image_l" xml:space="preserve">
    <value>Deleted boot kernel $1 for $2</value>
  </data>
  <data name="log_create_other" xml:space="preserve">
    <value>Created boot partition $1</value>
  </data>
  <data name="log_modify_other" xml:space="preserve">
    <value>Modified boot partition $1</value>
  </data>
  <data name="log_delete_other" xml:space="preserve">
    <value>Deleted boot partition $1</value>
  </data>
  <data name="log_create_other_l" xml:space="preserve">
    <value>Created boot partition $1 on $2</value>
  </data>
  <data name="log_modify_other_l" xml:space="preserve">
    <value>Modified boot partition $1 on $2</value>
  </data>
  <data name="log_delete_other_l" xml:space="preserve">
    <value>Deleted boot partition $1 on $2</value>
  </data>
  <data name="log_apply" xml:space="preserve">
    <value>Applied configuration</value>
  </data>
  <data name="log_global" xml:space="preserve">
    <value>Changed global options</value>
  </data>
  <data name="__norefs" xml:space="preserve">
    <value>1</value>
  </data>
</root>