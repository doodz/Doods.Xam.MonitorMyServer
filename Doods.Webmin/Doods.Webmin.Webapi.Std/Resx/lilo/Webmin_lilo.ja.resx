<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="index_title" xml:space="preserve">
    <value>Linux ブートアップ設定</value>
  </data>
  <data name="index_addk" xml:space="preserve">
    <value>新規のブート カーネルを作成</value>
  </data>
  <data name="index_addp" xml:space="preserve">
    <value>新規のブート パーティションを作成</value>
  </data>
  <data name="index_global" xml:space="preserve">
    <value>グローバル オプションを編集</value>
  </data>
  <data name="index_globalmsg" xml:space="preserve">
    <value>すべてのカーネルとパーティションに適用するグローバル ブートアップ オプションを編集します。</value>
  </data>
  <data name="index_apply" xml:space="preserve">
    <value>設定を適用</value>
  </data>
  <data name="index_applymsg1" xml:space="preserve">
    <value>$1 のブート セクタに現在の設定を適用します。</value>
  </data>
  <data name="index_applymsg2" xml:space="preserve">
    <value>現在の root デバイスのブート セクタに現在の設定を適用します。</value>
  </data>
  <data name="index_applymsg3" xml:space="preserve">
    <value>リブートする前に設定が正しいことを確認してください。</value>
  </data>
  <data name="index_return" xml:space="preserve">
    <value>カーネルとパーティション</value>
  </data>
  <data name="index_earch" xml:space="preserve">
    <value>LILO は x86 アーキテクチャ システムでのみサポートされます</value>
  </data>
  <data name="global_title" xml:space="preserve">
    <value>グローバル オプション</value>
  </data>
  <data name="global_desc" xml:space="preserve">
    <value>グローバル ブート オプション</value>
  </data>
  <data name="global_boot" xml:space="preserve">
    <value>ブート ローダを書込み</value>
  </data>
  <data name="global_root" xml:space="preserve">
    <value>rootデバイス</value>
  </data>
  <data name="global_default" xml:space="preserve">
    <value>デフォルト カーネル/パーティション</value>
  </data>
  <data name="global_first" xml:space="preserve">
    <value>リストの最初</value>
  </data>
  <data name="global_prompt" xml:space="preserve">
    <value>LILO プロンプトを表示しますか？</value>
  </data>
  <data name="global_timeout" xml:space="preserve">
    <value>LILO プロンプトを待機する時間</value>
  </data>
  <data name="global_forever" xml:space="preserve">
    <value>永久</value>
  </data>
  <data name="global_lock" xml:space="preserve">
    <value>ユーザ カーネル オプションを記憶しますか？</value>
  </data>
  <data name="global_delay" xml:space="preserve">
    <value>ブート待機時間</value>
  </data>
  <data name="global_imm" xml:space="preserve">
    <value>今すぐ</value>
  </data>
  <data name="global_compact" xml:space="preserve">
    <value>読み込んだ要請をマージしますか？</value>
  </data>
  <data name="global_optional" xml:space="preserve">
    <value>存在しないカーネルをスキップしますか？</value>
  </data>
  <data name="global_password" xml:space="preserve">
    <value>デフォルト ブート パスワード</value>
  </data>
  <data name="global_none" xml:space="preserve">
    <value>なし</value>
  </data>
  <data name="global_restricted" xml:space="preserve">
    <value>パスワードが必要</value>
  </data>
  <data name="global_extra" xml:space="preserve">
    <value>追加オプションでカーネルをブート</value>
  </data>
  <data name="global_any" xml:space="preserve">
    <value>不特定でブート</value>
  </data>
  <data name="global_secs" xml:space="preserve">
    <value>秒</value>
  </data>
  <data name="global_lba" xml:space="preserve">
    <value>1024 シリンダを超える場合ブートを許可しますか？</value>
  </data>
  <data name="global_err" xml:space="preserve">
    <value>グローバル オプションを保存できませんでした</value>
  </data>
  <data name="apply_title" xml:space="preserve">
    <value>設定を適用</value>
  </data>
  <data name="apply_exec" xml:space="preserve">
    <value>LILO 設定をコマンド $1 で適用中..</value>
  </data>
  <data name="image_title1" xml:space="preserve">
    <value>ブート カーネルの作成</value>
  </data>
  <data name="image_title2" xml:space="preserve">
    <value>ブート カーネルの編集</value>
  </data>
  <data name="image_options" xml:space="preserve">
    <value>ブート カーネル オプション</value>
  </data>
  <data name="image_name" xml:space="preserve">
    <value>カーネル名</value>
  </data>
  <data name="image_kernel" xml:space="preserve">
    <value>ブートするカーネル</value>
  </data>
  <data name="image_opts" xml:space="preserve">
    <value>カーネルのオプション</value>
  </data>
  <data name="image_default" xml:space="preserve">
    <value>デフォルト</value>
  </data>
  <data name="image_add" xml:space="preserve">
    <value>オプションの追加..</value>
  </data>
  <data name="image_replace" xml:space="preserve">
    <value>オプションの置換..</value>
  </data>
  <data name="image_root" xml:space="preserve">
    <value>root デバイス</value>
  </data>
  <data name="image_fromkern" xml:space="preserve">
    <value>カーネルから</value>
  </data>
  <data name="image_rcurr" xml:space="preserve">
    <value>現在の root</value>
  </data>
  <data name="image_rdev" xml:space="preserve">
    <value>デバイス..</value>
  </data>
  <data name="image_initrd" xml:space="preserve">
    <value>初期 ramdisk ファイル</value>
  </data>
  <data name="image_mode" xml:space="preserve">
    <value>root マウント モード</value>
  </data>
  <data name="image_ro" xml:space="preserve">
    <value>読取り専用</value>
  </data>
  <data name="image_rw" xml:space="preserve">
    <value>読取り-書込み</value>
  </data>
  <data name="image_vga" xml:space="preserve">
    <value>VGA テキスト モード</value>
  </data>
  <data name="image_ask" xml:space="preserve">
    <value>設定変更の場合は入力が必要</value>
  </data>
  <data name="image_other" xml:space="preserve">
    <value>その他</value>
  </data>
  <data name="image_lock" xml:space="preserve">
    <value>ユーザ カーネル オプションを記憶しますか？</value>
  </data>
  <data name="image_optional" xml:space="preserve">
    <value>存在しないカーネルをスキップしますか？</value>
  </data>
  <data name="image_password" xml:space="preserve">
    <value>ブート パスワード</value>
  </data>
  <data name="image_restricted" xml:space="preserve">
    <value>パスワードが必要</value>
  </data>
  <data name="image_extra" xml:space="preserve">
    <value>追加オプションでカーネルをブート</value>
  </data>
  <data name="image_any" xml:space="preserve">
    <value>不特定でブート</value>
  </data>
  <data name="image_none" xml:space="preserve">
    <value>なし</value>
  </data>
  <data name="image_ename" xml:space="preserve">
    <value>このブート カーネルの名前がありません</value>
  </data>
  <data name="image_ekernel" xml:space="preserve">
    <value>カーネル イメージ '$1' は存在しません</value>
  </data>
  <data name="image_einitrd" xml:space="preserve">
    <value>初期 ramdisk ファイル '$1' は存在しません</value>
  </data>
  <data name="other_title1" xml:space="preserve">
    <value>ブート パーティションの作成</value>
  </data>
  <data name="other_title2" xml:space="preserve">
    <value>ブート パーティションの編集</value>
  </data>
  <data name="other_details" xml:space="preserve">
    <value>パーティションの詳細</value>
  </data>
  <data name="other_name" xml:space="preserve">
    <value>パーティション名</value>
  </data>
  <data name="other_part" xml:space="preserve">
    <value>ブートするパーティション</value>
  </data>
  <data name="other_pass" xml:space="preserve">
    <value>パーティション テーブルを OS に渡しますか？</value>
  </data>
  <data name="other_yes" xml:space="preserve">
    <value>はい、次から実行</value>
  </data>
  <data name="other_password" xml:space="preserve">
    <value>ブート パスワード</value>
  </data>
  <data name="other_none" xml:space="preserve">
    <value>なし</value>
  </data>
  <data name="other_ename" xml:space="preserve">
    <value>このブート パーティションの名前がありません</value>
  </data>
  <data name="log_create_image" xml:space="preserve">
    <value>ブート カーネル $1 を作成しました</value>
  </data>
  <data name="log_modify_image" xml:space="preserve">
    <value>ブート カーネル $1 を変更しました</value>
  </data>
  <data name="log_delete_image" xml:space="preserve">
    <value>ブート カーネル $1 を削除しました</value>
  </data>
  <data name="log_create_image_l" xml:space="preserve">
    <value>$2 用のブート カーネル $1 を作成しました</value>
  </data>
  <data name="log_modify_image_l" xml:space="preserve">
    <value>$2 用のブート カーネル $1 を変更しました</value>
  </data>
  <data name="log_delete_image_l" xml:space="preserve">
    <value>$2 用のブート カーネル $1 を削除しました</value>
  </data>
  <data name="log_create_other" xml:space="preserve">
    <value>ブート パーティション $1 を作成しました</value>
  </data>
  <data name="log_modify_other" xml:space="preserve">
    <value>ブート パーティション $1 を変更しました</value>
  </data>
  <data name="log_delete_other" xml:space="preserve">
    <value>ブート パーティション $1 を削除しました</value>
  </data>
  <data name="log_create_other_l" xml:space="preserve">
    <value>$2 上にブート パーティション $1 を作成しました</value>
  </data>
  <data name="log_modify_other_l" xml:space="preserve">
    <value>$2 上のブート パーティション $1を変更しました</value>
  </data>
  <data name="log_delete_other_l" xml:space="preserve">
    <value>$2 上にブート パーティション $1 を削除しました</value>
  </data>
  <data name="log_apply" xml:space="preserve">
    <value>設定を適用しました</value>
  </data>
  <data name="log_global" xml:space="preserve">
    <value>グローバル オプションを変更しました</value>
  </data>
</root>