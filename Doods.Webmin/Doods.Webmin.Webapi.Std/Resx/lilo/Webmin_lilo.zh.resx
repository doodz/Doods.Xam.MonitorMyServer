<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="index_title" xml:space="preserve">
    <value>Linux 启动配置</value>
  </data>
  <data name="index_addk" xml:space="preserve">
    <value>创建一个新的启动内核</value>
  </data>
  <data name="index_addp" xml:space="preserve">
    <value>创建一个新的启动分区</value>
  </data>
  <data name="index_global" xml:space="preserve">
    <value>编辑全局选项</value>
  </data>
  <data name="index_globalmsg" xml:space="preserve">
    <value>编辑应用到所有内核和分区的全局启动选项。</value>
  </data>
  <data name="index_apply" xml:space="preserve">
    <value>应用配置</value>
  </data>
  <data name="index_applymsg1" xml:space="preserve">
    <value>在$1的引导扇区应用当前配置。</value>
  </data>
  <data name="index_applymsg2" xml:space="preserve">
    <value>在当前根设备的引导扇区应用当前配置</value>
  </data>
  <data name="index_applymsg3" xml:space="preserve">
    <value>在重新启动机器前, 请确认您的配置是否正确!</value>
  </data>
  <data name="index_return" xml:space="preserve">
    <value>内核和分区</value>
  </data>
  <data name="index_earch" xml:space="preserve">
    <value>只有X86体系结构的系统支持LILO</value>
  </data>
  <data name="global_title" xml:space="preserve">
    <value>全局参选项</value>
  </data>
  <data name="global_desc" xml:space="preserve">
    <value>全局启动选项</value>
  </data>
  <data name="global_boot" xml:space="preserve">
    <value>将启动装载器写到</value>
  </data>
  <data name="global_root" xml:space="preserve">
    <value>根设备</value>
  </data>
  <data name="global_default" xml:space="preserve">
    <value>缺省的内核或分区</value>
  </data>
  <data name="global_first" xml:space="preserve">
    <value>列表中的第一项</value>
  </data>
  <data name="global_prompt" xml:space="preserve">
    <value>显示LILO提示符吗？</value>
  </data>
  <data name="global_timeout" xml:space="preserve">
    <value>LILO提示符的等候时间</value>
  </data>
  <data name="global_forever" xml:space="preserve">
    <value>永久</value>
  </data>
  <data name="global_lock" xml:space="preserve">
    <value>是否记住用户内核选项？</value>
  </data>
  <data name="global_delay" xml:space="preserve">
    <value>引导前的等候时间</value>
  </data>
  <data name="global_imm" xml:space="preserve">
    <value>立即</value>
  </data>
  <data name="global_compact" xml:space="preserve">
    <value>合并读请求？</value>
  </data>
  <data name="global_optional" xml:space="preserve">
    <value>跳过不存在的内核？</value>
  </data>
  <data name="global_password" xml:space="preserve">
    <value>缺省的引导口令</value>
  </data>
  <data name="global_none" xml:space="preserve">
    <value>无</value>
  </data>
  <data name="global_restricted" xml:space="preserve">
    <value>需要口令于</value>
  </data>
  <data name="global_extra" xml:space="preserve">
    <value>用额外的选项启动内核</value>
  </data>
  <data name="global_any" xml:space="preserve">
    <value>任何引导</value>
  </data>
  <data name="global_secs" xml:space="preserve">
    <value>秒</value>
  </data>
  <data name="global_err" xml:space="preserve">
    <value>保存全局选项失败</value>
  </data>
  <data name="apply_title" xml:space="preserve">
    <value>应用配置</value>
  </data>
  <data name="apply_exec" xml:space="preserve">
    <value>使用$1命令应用LILO配置..</value>
  </data>
  <data name="image_title1" xml:space="preserve">
    <value>创建引导内核</value>
  </data>
  <data name="image_title2" xml:space="preserve">
    <value>编辑引导内核</value>
  </data>
  <data name="image_options" xml:space="preserve">
    <value>引导内核选项</value>
  </data>
  <data name="image_name" xml:space="preserve">
    <value>名称</value>
  </data>
  <data name="image_kernel" xml:space="preserve">
    <value>要引导的内核</value>
  </data>
  <data name="image_opts" xml:space="preserve">
    <value>内核选项</value>
  </data>
  <data name="image_default" xml:space="preserve">
    <value>缺省</value>
  </data>
  <data name="image_add" xml:space="preserve">
    <value>添加选项..</value>
  </data>
  <data name="image_replace" xml:space="preserve">
    <value>替换选项..</value>
  </data>
  <data name="image_root" xml:space="preserve">
    <value>根设备</value>
  </data>
  <data name="image_fromkern" xml:space="preserve">
    <value>来自内核</value>
  </data>
  <data name="image_rcurr" xml:space="preserve">
    <value>当前根</value>
  </data>
  <data name="image_rdev" xml:space="preserve">
    <value>设备..</value>
  </data>
  <data name="image_initrd" xml:space="preserve">
    <value>初始 ramdisk 文件</value>
  </data>
  <data name="image_mode" xml:space="preserve">
    <value>根挂装模式</value>
  </data>
  <data name="image_ro" xml:space="preserve">
    <value>只读</value>
  </data>
  <data name="image_rw" xml:space="preserve">
    <value>读写</value>
  </data>
  <data name="image_vga" xml:space="preserve">
    <value>VGA 文本模式</value>
  </data>
  <data name="image_ask" xml:space="preserve">
    <value>询问用户</value>
  </data>
  <data name="image_other" xml:space="preserve">
    <value>其它</value>
  </data>
  <data name="image_lock" xml:space="preserve">
    <value>是否记住用户内核选项？</value>
  </data>
  <data name="image_optional" xml:space="preserve">
    <value>跳过不存在的内核？</value>
  </data>
  <data name="image_password" xml:space="preserve">
    <value>引导口令</value>
  </data>
  <data name="image_restricted" xml:space="preserve">
    <value>需要口令于</value>
  </data>
  <data name="image_extra" xml:space="preserve">
    <value>用额外选项引导内核</value>
  </data>
  <data name="image_any" xml:space="preserve">
    <value>任何引导</value>
  </data>
  <data name="image_none" xml:space="preserve">
    <value>无</value>
  </data>
  <data name="image_ename" xml:space="preserve">
    <value>此引导内核名丢失</value>
  </data>
  <data name="image_ekernel" xml:space="preserve">
    <value>内核映像'$1'不存在</value>
  </data>
  <data name="image_einitrd" xml:space="preserve">
    <value>初始 ramdisk 文件 '$1' 不存在</value>
  </data>
  <data name="other_title1" xml:space="preserve">
    <value>创建启动分区</value>
  </data>
  <data name="other_title2" xml:space="preserve">
    <value>编辑启动分区</value>
  </data>
  <data name="other_details" xml:space="preserve">
    <value>分区详情</value>
  </data>
  <data name="other_name" xml:space="preserve">
    <value>名称</value>
  </data>
  <data name="other_part" xml:space="preserve">
    <value>启动分区</value>
  </data>
  <data name="other_pass" xml:space="preserve">
    <value>将分区表传送给操作系统？</value>
  </data>
  <data name="other_yes" xml:space="preserve">
    <value>是，来自</value>
  </data>
  <data name="other_password" xml:space="preserve">
    <value>启动口令</value>
  </data>
  <data name="other_none" xml:space="preserve">
    <value>无</value>
  </data>
  <data name="other_ename" xml:space="preserve">
    <value>此引导分区名称丢失</value>
  </data>
  <data name="log_create_image" xml:space="preserve">
    <value>创建引导内核$1</value>
  </data>
  <data name="log_modify_image" xml:space="preserve">
    <value>修改引导内核$1</value>
  </data>
  <data name="log_delete_image" xml:space="preserve">
    <value>删除引导内核$1</value>
  </data>
  <data name="log_create_image_l" xml:space="preserve">
    <value>为$2创建引导内核$1</value>
  </data>
  <data name="log_modify_image_l" xml:space="preserve">
    <value>为$2修改引导内核$1</value>
  </data>
  <data name="log_delete_image_l" xml:space="preserve">
    <value>为$2删除引导内核$1</value>
  </data>
  <data name="log_create_other" xml:space="preserve">
    <value>创建引导分区$1</value>
  </data>
  <data name="log_modify_other" xml:space="preserve">
    <value>修改引导分区$1</value>
  </data>
  <data name="log_delete_other" xml:space="preserve">
    <value>删除引导分区$1</value>
  </data>
  <data name="log_create_other_l" xml:space="preserve">
    <value>在$2上创建引导分区$1</value>
  </data>
  <data name="log_modify_other_l" xml:space="preserve">
    <value>在$2上修改引导分区$1</value>
  </data>
  <data name="log_delete_other_l" xml:space="preserve">
    <value>在$2上删除引导分区$1</value>
  </data>
  <data name="log_apply" xml:space="preserve">
    <value>配置已应用</value>
  </data>
  <data name="log_global" xml:space="preserve">
    <value>已改变全局选项</value>
  </data>
</root>