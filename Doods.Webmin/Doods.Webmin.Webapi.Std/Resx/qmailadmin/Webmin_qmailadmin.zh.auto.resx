<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="aliases_delete" xml:space="preserve">
    <value>删除所选别名</value>
  </data>
  <data name="adelete_err" xml:space="preserve">
    <value>删除别名失败</value>
  </data>
  <data name="adelete_enone" xml:space="preserve">
    <value>未选择</value>
  </data>
  <data name="routes_delete" xml:space="preserve">
    <value>删除选定的域路由</value>
  </data>
  <data name="rdelete_err" xml:space="preserve">
    <value>删除域路由失败</value>
  </data>
  <data name="virts_delete" xml:space="preserve">
    <value>删除选定的虚拟映射</value>
  </data>
  <data name="vdelete_err" xml:space="preserve">
    <value>删除虚拟映射失败</value>
  </data>
  <data name="log_delete_aliases" xml:space="preserve">
    <value>已删除 $1别名</value>
  </data>
  <data name="log_delete_virts" xml:space="preserve">
    <value>已删除 $1虚拟映射</value>
  </data>
  <data name="log_delete_routes" xml:space="preserve">
    <value>已删除 $1条路线</value>
  </data>
  <data name="log_delete_assigns" xml:space="preserve">
    <value>已删除 $1个邮件用户</value>
  </data>
  <data name="rfile_no_autoreply" xml:space="preserve">
    <value>不要将自动回复发送给</value>
  </data>
  <data name="rfile_from" xml:space="preserve">
    <value>发件人：答复地址</value>
  </data>
  <data name="rfile_auto" xml:space="preserve">
    <value>自动（根据收件人的地址）</value>
  </data>
  <data name="rfile_efrom" xml:space="preserve">
    <value>缺少发件人：地址</value>
  </data>
  <data name="rfile_fromdesc" xml:space="preserve">
    <value>尽可能始终指定发件人：地址，因为自动方法可能不可靠。</value>
  </data>
  <data name="queue_refresh" xml:space="preserve">
    <value>刷新邮件队列</value>
  </data>
  <data name="queue_refreshdesc" xml:space="preserve">
    <value>重新加载此页面以显示邮件队列的当前状态。</value>
  </data>
  <data name="assigns_delete" xml:space="preserve">
    <value>删除选定的邮件用户</value>
  </data>
  <data name="sdelete_err" xml:space="preserve">
    <value>删除邮件用户失败</value>
  </data>
  <data name="delete_ebogus" xml:space="preserve">
    <value>无效的队列文件名</value>
  </data>
  <data name="delq_titles" xml:space="preserve">
    <value>删除讯息</value>
  </data>
  <data name="delq_rusure" xml:space="preserve">
    <value>您确定要删除 $1个选定的排队消息吗？</value>
  </data>
  <data name="delq_confirm" xml:space="preserve">
    <value>删除讯息</value>
  </data>
</root>