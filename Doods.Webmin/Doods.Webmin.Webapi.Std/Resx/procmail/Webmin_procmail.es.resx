<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="index_title" xml:space="preserve">
    <value>Filtro de Correo Procmail</value>
  </data>
  <data name="index_action" xml:space="preserve">
    <value>Acción a tomar</value>
  </data>
  <data name="index_conds" xml:space="preserve">
    <value>Condiciones</value>
  </data>
  <data name="index_move" xml:space="preserve">
    <value>Mover</value>
  </data>
  <data name="index_act5" xml:space="preserve">
    <value>Ejecutar bloque condicional</value>
  </data>
  <data name="index_act4" xml:space="preserve">
    <value>Alimentar a programa $1</value>
  </data>
  <data name="index_act3" xml:space="preserve">
    <value>Remitir a $1</value>
  </data>
  <data name="index_act2" xml:space="preserve">
    <value>Escribir en maildir $1</value>
  </data>
  <data name="index_act1" xml:space="preserve">
    <value>Escribir en carpeta MH $1</value>
  </data>
  <data name="index_act0" xml:space="preserve">
    <value>Añadir a archivo $1</value>
  </data>
  <data name="index_noconds" xml:space="preserve">
    <value>Siempre ejecutar acción</value>
  </data>
  <data name="index_re" xml:space="preserve">
    <value>Coincidir con regexp $1</value>
  </data>
  <data name="index_nre" xml:space="preserve">
    <value>No coincidir con regexp $1</value>
  </data>
  <data name="index_shell" xml:space="preserve">
    <value>Evaluar comando $1</value>
  </data>
  <data name="index_exit" xml:space="preserve">
    <value>Estado de salida del comando $1</value>
  </data>
  <data name="index_lt" xml:space="preserve">
    <value>La medida es &lt; $1</value>
  </data>
  <data name="index_gt" xml:space="preserve">
    <value>La medida es &gt; $1</value>
  </data>
  <data name="index_add" xml:space="preserve">
    <value>Añadir una nueva acción de filtro</value>
  </data>
  <data name="index_eadd" xml:space="preserve">
    <value>Añadir un nuevo valor de variable</value>
  </data>
  <data name="index_badd" xml:space="preserve">
    <value>Añadir un nuevo bloque condicional</value>
  </data>
  <data name="index_none" xml:space="preserve">
    <value>No se han configurado acciones de Procmail aún.</value>
  </data>
  <data name="index_return" xml:space="preserve">
    <value>lista de acciones</value>
  </data>
  <data name="index_env" xml:space="preserve">
    <value>Poner variable $1 a $2</value>
  </data>
  <data name="edit_title2" xml:space="preserve">
    <value>Editar Acción</value>
  </data>
  <data name="edit_title1" xml:space="preserve">
    <value>Crear Acción</value>
  </data>
  <data name="edit_header1" xml:space="preserve">
    <value>Detalles de acción de entrega</value>
  </data>
  <data name="edit_header2" xml:space="preserve">
    <value>Condiciones de acción</value>
  </data>
  <data name="edit_action" xml:space="preserve">
    <value>Modo de entrega</value>
  </data>
  <data name="edit_block" xml:space="preserve">
    <value>Código de procmail a ejecutar</value>
  </data>
  <data name="edit_amode_0" xml:space="preserve">
    <value>Añadir a archivo</value>
  </data>
  <data name="edit_amode_1" xml:space="preserve">
    <value>Escribir en carpeta MH</value>
  </data>
  <data name="edit_amode_2" xml:space="preserve">
    <value>Escribir en maildir</value>
  </data>
  <data name="edit_amode_3" xml:space="preserve">
    <value>Remitir a dirección</value>
  </data>
  <data name="edit_amode_4" xml:space="preserve">
    <value>Alimentar programa</value>
  </data>
  <data name="edit_flag_H" xml:space="preserve">
    <value>Aplicar condiciones a cabeceras</value>
  </data>
  <data name="edit_flag_B" xml:space="preserve">
    <value>Aplicar condiciones a cuerpo</value>
  </data>
  <data name="edit_flag_D" xml:space="preserve">
    <value>Coincidencia sensible a mayúsculas</value>
  </data>
  <data name="edit_flag_h" xml:space="preserve">
    <value>Alimentar cabeceras a destino</value>
  </data>
  <data name="edit_flag_b" xml:space="preserve">
    <value>Alimentar cuerpo a destino</value>
  </data>
  <data name="edit_flag_c" xml:space="preserve">
    <value>Continuar proceso incluso si las condiciones coinciden</value>
  </data>
  <data name="edit_flag_w" xml:space="preserve">
    <value>Esperar por programa de acción hasta que acabe y revisar resultado</value>
  </data>
  <data name="edit_flag_W" xml:space="preserve">
    <value>Esperar por programa de acción hasta que acabe pero ignorar el resultado</value>
  </data>
  <data name="edit_flag_i" xml:space="preserve">
    <value>Ignorar errores de escritura en entrega</value>
  </data>
  <data name="edit_flag_r" xml:space="preserve">
    <value>Escribir correo en modo sin búfer</value>
  </data>
  <data name="edit_lockfile" xml:space="preserve">
    <value>Archivo de bloqueo de entrega</value>
  </data>
  <data name="edit_cmode_re" xml:space="preserve">
    <value>Que coincida con expresión regular</value>
  </data>
  <data name="edit_cmode_nre" xml:space="preserve">
    <value>Que no coincida con expresión regular</value>
  </data>
  <data name="edit_cmode_shell" xml:space="preserve">
    <value>Evaluar salida de comando</value>
  </data>
  <data name="edit_cmode_exit" xml:space="preserve">
    <value>Revisar estado de salida de comando</value>
  </data>
  <data name="edit_cmode_lt" xml:space="preserve">
    <value>El correo es menor de</value>
  </data>
  <data name="edit_cmode_gt" xml:space="preserve">
    <value>El correo es mayor que</value>
  </data>
  <data name="edit_conddesc" xml:space="preserve">
    <value>Para llevar a cabo la accción de arriba, todas las condiciones de abajo deben de coincidir. Si no hay condiciones, la acción siempre se ejecutará.</value>
  </data>
  <data name="save_err" xml:space="preserve">
    <value>No pude salvar acción</value>
  </data>
  <data name="save_eaction_0" xml:space="preserve">
    <value>Falta el archivo donde añadir</value>
  </data>
  <data name="save_eaction_1" xml:space="preserve">
    <value>Falta la capeta MH donde escribir</value>
  </data>
  <data name="save_eaction_2" xml:space="preserve">
    <value>Falta el maildir donde escribir</value>
  </data>
  <data name="save_eaction_3" xml:space="preserve">
    <value>Falta la dirección a donde remitir</value>
  </data>
  <data name="save_eaction_4" xml:space="preserve">
    <value>Falta el programa a alimentar</value>
  </data>
  <data name="save_elockfile" xml:space="preserve">
    <value>Falta el nombre del archivo de bloqueo</value>
  </data>
  <data name="save_esize" xml:space="preserve">
    <value>La medida de correo para condición $1 falta o es inválida</value>
  </data>
  <data name="save_ere" xml:space="preserve">
    <value>Falta expresión regular para condición $1</value>
  </data>
  <data name="save_eshell" xml:space="preserve">
    <value>Falta comando para condición $1</value>
  </data>
  <data name="env_title1" xml:space="preserve">
    <value>Crear Variable</value>
  </data>
  <data name="env_title2" xml:space="preserve">
    <value>Editar Variable</value>
  </data>
  <data name="env_header" xml:space="preserve">
    <value>Variable de entorno de Procmail</value>
  </data>
  <data name="env_name" xml:space="preserve">
    <value>Nombre de Variable</value>
  </data>
  <data name="env_value" xml:space="preserve">
    <value>Valor</value>
  </data>
  <data name="env_err" xml:space="preserve">
    <value>No pude salvar variable</value>
  </data>
  <data name="env_ename" xml:space="preserve">
    <value>Nombre de variable falta o es inválido</value>
  </data>
  <data name="config_eline" xml:space="preserve">
    <value>Línea desconocida $1 en $2: $3</value>
  </data>
</root>