<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="index_title" xml:space="preserve">
    <value>Procmail Mail Filter</value>
  </data>
  <data name="index_procmail" xml:space="preserve">
    <value>Procmail mail filter</value>
  </data>
  <data name="index_desc_other" xml:space="preserve">
    <value>The procmail actions below from $1 will apply to &lt;b&gt;all&lt;/b&gt; email delivered to users on your system. However, they will only be used if Procmail is installed and your mail server is configured to use it.</value>
  </data>
  <data name="index_mserr" xml:space="preserve">
    <value>Warning - any rules defined below will not be used : $1</value>
  </data>
  <data name="index_action" xml:space="preserve">
    <value>Action to take</value>
  </data>
  <data name="index_conds" xml:space="preserve">
    <value>Conditions</value>
  </data>
  <data name="index_move" xml:space="preserve">
    <value>Move</value>
  </data>
  <data name="index_ba" xml:space="preserve">
    <value>Add</value>
  </data>
  <data name="index_act6" xml:space="preserve">
    <value>Set variable $1</value>
  </data>
  <data name="index_act5" xml:space="preserve">
    <value>Execute conditional block</value>
  </data>
  <data name="index_act4" xml:space="preserve">
    <value>Feed to program $1</value>
  </data>
  <data name="index_act3" xml:space="preserve">
    <value>Forward to $1</value>
  </data>
  <data name="index_act2" xml:space="preserve">
    <value>Write to maildir $1</value>
  </data>
  <data name="index_act1" xml:space="preserve">
    <value>Write to MH folder $1</value>
  </data>
  <data name="index_act0" xml:space="preserve">
    <value>Append to file $1</value>
  </data>
  <data name="index_noconds" xml:space="preserve">
    <value>Always execute action</value>
  </data>
  <data name="index_re" xml:space="preserve">
    <value>Match regexp $1</value>
  </data>
  <data name="index_nre" xml:space="preserve">
    <value>Don't match regexp $1</value>
  </data>
  <data name="index_shell" xml:space="preserve">
    <value>Evaluate command $1</value>
  </data>
  <data name="index_exit" xml:space="preserve">
    <value>Exit status of command $1</value>
  </data>
  <data name="index_lt" xml:space="preserve">
    <value>Size is &lt; $1</value>
  </data>
  <data name="index_gt" xml:space="preserve">
    <value>Size is &gt; $1</value>
  </data>
  <data name="index_add" xml:space="preserve">
    <value>Add a new filter action.</value>
  </data>
  <data name="index_eadd" xml:space="preserve">
    <value>Add a new variable setting.</value>
  </data>
  <data name="index_badd" xml:space="preserve">
    <value>Add a new conditional block.</value>
  </data>
  <data name="index_iadd" xml:space="preserve">
    <value>Add a new include file.</value>
  </data>
  <data name="index_none" xml:space="preserve">
    <value>No Procmail actions have been configured yet.</value>
  </data>
  <data name="index_return" xml:space="preserve">
    <value>actions list</value>
  </data>
  <data name="index_env" xml:space="preserve">
    <value>Set variable $1 to $2</value>
  </data>
  <data name="index_include" xml:space="preserve">
    <value>Process include file $1</value>
  </data>
  <data name="index_man" xml:space="preserve">
    <value>Manually Edit Configuration</value>
  </data>
  <data name="index_mandesc" xml:space="preserve">
    <value>Directly edit the primary Procmail configuration file, to create your own rules, variables and blocks.</value>
  </data>
  <data name="index_delete" xml:space="preserve">
    <value>Delete Selected Actions</value>
  </data>
  <data name="edit_title2" xml:space="preserve">
    <value>Edit Action</value>
  </data>
  <data name="edit_title1" xml:space="preserve">
    <value>Create Action</value>
  </data>
  <data name="edit_header1" xml:space="preserve">
    <value>Delivery action details</value>
  </data>
  <data name="edit_header2" xml:space="preserve">
    <value>Action conditions</value>
  </data>
  <data name="edit_action" xml:space="preserve">
    <value>Delivery mode</value>
  </data>
  <data name="edit_block" xml:space="preserve">
    <value>Procmail code to execute</value>
  </data>
  <data name="edit_amode_0" xml:space="preserve">
    <value>Append to file</value>
  </data>
  <data name="edit_amode_1" xml:space="preserve">
    <value>Write to MH folder</value>
  </data>
  <data name="edit_amode_2" xml:space="preserve">
    <value>Write to maildir</value>
  </data>
  <data name="edit_amode_3" xml:space="preserve">
    <value>Forward to address</value>
  </data>
  <data name="edit_amode_4" xml:space="preserve">
    <value>Feed to program</value>
  </data>
  <data name="edit_amode_6" xml:space="preserve">
    <value>Set variable</value>
  </data>
  <data name="edit_flag_H" xml:space="preserve">
    <value>Apply conditions to headers</value>
  </data>
  <data name="edit_flag_B" xml:space="preserve">
    <value>Apply conditions to body</value>
  </data>
  <data name="edit_flag_D" xml:space="preserve">
    <value>Case-sensitive matching</value>
  </data>
  <data name="edit_flag_h" xml:space="preserve">
    <value>Feed headers to destination</value>
  </data>
  <data name="edit_flag_b" xml:space="preserve">
    <value>Feed body to destination</value>
  </data>
  <data name="edit_flag_c" xml:space="preserve">
    <value>Continue processing even if conditions match</value>
  </data>
  <data name="edit_flag_w" xml:space="preserve">
    <value>Wait for action program to finish, and check result</value>
  </data>
  <data name="edit_flag_W" xml:space="preserve">
    <value>Wait for action program to finish, but ignore result</value>
  </data>
  <data name="edit_flag_i" xml:space="preserve">
    <value>Ignore write errors on delivery</value>
  </data>
  <data name="edit_flag_r" xml:space="preserve">
    <value>Write out mail in raw mode</value>
  </data>
  <data name="edit_flag_f" xml:space="preserve">
    <value>Action program is a filter</value>
  </data>
  <data name="edit_lockfile" xml:space="preserve">
    <value>Delivery lock file</value>
  </data>
  <data name="edit_cmode_re" xml:space="preserve">
    <value>Matches regular expression</value>
  </data>
  <data name="edit_cmode_nre" xml:space="preserve">
    <value>Doesn't match regular expression</value>
  </data>
  <data name="edit_cmode_shell" xml:space="preserve">
    <value>Evaluate output of command</value>
  </data>
  <data name="edit_cmode_exit" xml:space="preserve">
    <value>Check exit status of command</value>
  </data>
  <data name="edit_cmode_lt" xml:space="preserve">
    <value>Mail is smaller than</value>
  </data>
  <data name="edit_cmode_gt" xml:space="preserve">
    <value>Mail is bigger than</value>
  </data>
  <data name="edit_conddesc" xml:space="preserve">
    <value>For the above action to be carried out, all the conditions below must match. If there are no conditions, the action will always be executed.</value>
  </data>
  <data name="edit_none" xml:space="preserve">
    <value>None</value>
  </data>
  <data name="edit_lock" xml:space="preserve">
    <value>Specific file</value>
  </data>
  <data name="edit_ctype" xml:space="preserve">
    <value>Condition type</value>
  </data>
  <data name="edit_cvalue" xml:space="preserve">
    <value>Regular expression or command</value>
  </data>
  <data name="save_err" xml:space="preserve">
    <value>Failed to save action</value>
  </data>
  <data name="save_eaction_0" xml:space="preserve">
    <value>Missing file to append to</value>
  </data>
  <data name="save_eaction_1" xml:space="preserve">
    <value>Missing MH folder to write to</value>
  </data>
  <data name="save_eaction_2" xml:space="preserve">
    <value>Missing maildir to write to</value>
  </data>
  <data name="save_eaction_3" xml:space="preserve">
    <value>Missing address to forward to</value>
  </data>
  <data name="save_eaction_4" xml:space="preserve">
    <value>Missing program to feed to</value>
  </data>
  <data name="save_eaction_6" xml:space="preserve">
    <value>Missing variable to set</value>
  </data>
  <data name="save_elockfile" xml:space="preserve">
    <value>Missing lock file name</value>
  </data>
  <data name="save_esize" xml:space="preserve">
    <value>Missing or invalid mail size for condition $1</value>
  </data>
  <data name="save_ere" xml:space="preserve">
    <value>Missing regular expression for condition $1</value>
  </data>
  <data name="save_eshell" xml:space="preserve">
    <value>Missing command for condition $1</value>
  </data>
  <data name="env_title1" xml:space="preserve">
    <value>Create Variable</value>
  </data>
  <data name="env_title2" xml:space="preserve">
    <value>Edit Variable</value>
  </data>
  <data name="env_header" xml:space="preserve">
    <value>Procmail environment variable</value>
  </data>
  <data name="env_name" xml:space="preserve">
    <value>Variable name</value>
  </data>
  <data name="env_value" xml:space="preserve">
    <value>Value</value>
  </data>
  <data name="env_err" xml:space="preserve">
    <value>Failed to save variable</value>
  </data>
  <data name="env_ename" xml:space="preserve">
    <value>Missing or invalid variable name</value>
  </data>
  <data name="inc_title1" xml:space="preserve">
    <value>Add Include File</value>
  </data>
  <data name="inc_title2" xml:space="preserve">
    <value>Edit Include File</value>
  </data>
  <data name="inc_header" xml:space="preserve">
    <value>Included procmail rules file</value>
  </data>
  <data name="inc_inc" xml:space="preserve">
    <value>Included file</value>
  </data>
  <data name="inc_einc" xml:space="preserve">
    <value>No include file entered</value>
  </data>
  <data name="config_eline" xml:space="preserve">
    <value>Unknown line $1 in $2 : $3</value>
  </data>
  <data name="manual_title" xml:space="preserve">
    <value>Edit Configuration</value>
  </data>
  <data name="manual_desc" xml:space="preserve">
    <value>This page can be used to manually edit the Procmail configuration file $1. Be careful, as no syntax checking will be done.</value>
  </data>
  <data name="manual_edata" xml:space="preserve">
    <value>No data was supplied by your browser!</value>
  </data>
  <data name="log_create_rec" xml:space="preserve">
    <value>Created recipe to $1</value>
  </data>
  <data name="log_delete_rec" xml:space="preserve">
    <value>Deleted recipe to $1</value>
  </data>
  <data name="log_modify_rec" xml:space="preserve">
    <value>Modified recipe to $1</value>
  </data>
  <data name="log_delete_recs" xml:space="preserve">
    <value>Deleted $1 recipes</value>
  </data>
  <data name="log_act5" xml:space="preserve">
    <value>execute conditional block</value>
  </data>
  <data name="log_act4" xml:space="preserve">
    <value>feed to progam $1</value>
  </data>
  <data name="log_act3" xml:space="preserve">
    <value>forward to $1</value>
  </data>
  <data name="log_act2" xml:space="preserve">
    <value>write to maildir $1</value>
  </data>
  <data name="log_act1" xml:space="preserve">
    <value>write to MH folder $1</value>
  </data>
  <data name="log_act0" xml:space="preserve">
    <value>append to file $1</value>
  </data>
  <data name="log_create_env" xml:space="preserve">
    <value>Created environment variable $1</value>
  </data>
  <data name="log_modify_env" xml:space="preserve">
    <value>Modified environment variable $1</value>
  </data>
  <data name="log_delete_env" xml:space="preserve">
    <value>Deleted environment variable $1</value>
  </data>
  <data name="log_create_inc" xml:space="preserve">
    <value>Created include file $1</value>
  </data>
  <data name="log_modify_inc" xml:space="preserve">
    <value>Modified include file $1</value>
  </data>
  <data name="log_delete_inc" xml:space="preserve">
    <value>Deleted include file $1</value>
  </data>
  <data name="log_manual" xml:space="preserve">
    <value>Manually edited configuration</value>
  </data>
  <data name="log_up" xml:space="preserve">
    <value>Moved an entry up</value>
  </data>
  <data name="log_down" xml:space="preserve">
    <value>Moved an entry down</value>
  </data>
  <data name="delete_err" xml:space="preserve">
    <value>Failed to delete actions</value>
  </data>
  <data name="delete_enone" xml:space="preserve">
    <value>None selected</value>
  </data>
  <data name="check_epostfix" xml:space="preserve">
    <value>Procmail is not enabled in your Postfix configuration. The configuration file &lt;tt&gt;$2&lt;/tt&gt; must have the &lt;tt&gt;$1&lt;/tt&gt; option set to &lt;tt&gt;$3&lt;/tt&gt;.</value>
  </data>
</root>