<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="index_title" xml:space="preserve">
    <value>Filtro Mail Procmail</value>
  </data>
  <data name="index_procmail" xml:space="preserve">
    <value>Procmail</value>
  </data>
  <data name="index_conds" xml:space="preserve">
    <value>condizioni</value>
  </data>
  <data name="index_move" xml:space="preserve">
    <value>sposta</value>
  </data>
  <data name="index_ba" xml:space="preserve">
    <value>aggiungi </value>
  </data>
  <data name="index_act6" xml:space="preserve">
    <value>imposta variabile $1</value>
  </data>
  <data name="index_act5" xml:space="preserve">
    <value>esegui blocco condizionale</value>
  </data>
  <data name="index_act4" xml:space="preserve">
    <value>dai in pasto al programma $1</value>
  </data>
  <data name="index_act3" xml:space="preserve">
    <value>inoltra a  $1</value>
  </data>
  <data name="index_act2" xml:space="preserve">
    <value>scrivi sulla maildir $1</value>
  </data>
  <data name="index_act1" xml:space="preserve">
    <value>scrivi su cartella  MH $1</value>
  </data>
  <data name="index_act0" xml:space="preserve">
    <value>accoda al file $1</value>
  </data>
  <data name="index_noconds" xml:space="preserve">
    <value>sempre esegui azione</value>
  </data>
  <data name="index_re" xml:space="preserve">
    <value>corrisponde a  regexp $1</value>
  </data>
  <data name="index_nre" xml:space="preserve">
    <value>non corrisponde a regexp $1</value>
  </data>
  <data name="index_shell" xml:space="preserve">
    <value>Evaluate comando $1</value>
  </data>
  <data name="index_exit" xml:space="preserve">
    <value>status Exit  del comando $1</value>
  </data>
  <data name="index_lt" xml:space="preserve">
    <value>dimensione è  &lt; di $1</value>
  </data>
  <data name="index_gt" xml:space="preserve">
    <value>dimensione è  &gt; di  $1</value>
  </data>
  <data name="index_add" xml:space="preserve">
    <value>crea un nuovo filtro azione.</value>
  </data>
  <data name="index_eadd" xml:space="preserve">
    <value>imposta una nuova variabile</value>
  </data>
  <data name="index_badd" xml:space="preserve">
    <value>crea un nuovo blocco condizionale</value>
  </data>
  <data name="index_iadd" xml:space="preserve">
    <value>scegli un nuovo file da includere</value>
  </data>
  <data name="index_none" xml:space="preserve">
    <value>nessuna azione  Procmail risulta configurata</value>
  </data>
  <data name="index_return" xml:space="preserve">
    <value>lista azioni</value>
  </data>
  <data name="index_env" xml:space="preserve">
    <value>imposta variabile $1 a $2</value>
  </data>
  <data name="index_include" xml:space="preserve">
    <value>processa  file incluso $1</value>
  </data>
  <data name="edit_title2" xml:space="preserve">
    <value>modifica azione</value>
  </data>
  <data name="edit_title1" xml:space="preserve">
    <value>Create azione</value>
  </data>
  <data name="edit_header1" xml:space="preserve">
    <value>dettagli azione di consegna</value>
  </data>
  <data name="edit_header2" xml:space="preserve">
    <value>condizioni dell'azione</value>
  </data>
  <data name="edit_block" xml:space="preserve">
    <value>codice Procmail da eseguire</value>
  </data>
  <data name="edit_amode_0" xml:space="preserve">
    <value>accoda a</value>
  </data>
  <data name="edit_amode_1" xml:space="preserve">
    <value>scrivi su MH cartella</value>
  </data>
  <data name="edit_amode_2" xml:space="preserve">
    <value>scrivi su maildir</value>
  </data>
  <data name="edit_amode_3" xml:space="preserve">
    <value>inoltra a indirizzo</value>
  </data>
  <data name="edit_amode_4" xml:space="preserve">
    <value>dai in pasto al programma</value>
  </data>
  <data name="edit_amode_6" xml:space="preserve">
    <value>imposta variabile</value>
  </data>
  <data name="edit_flag_H" xml:space="preserve">
    <value>applica condizioni alle intestazioni</value>
  </data>
  <data name="edit_flag_B" xml:space="preserve">
    <value>applica condizioni al corpo</value>
  </data>
  <data name="edit_flag_D" xml:space="preserve">
    <value>corrispondenza case-sensitive</value>
  </data>
  <data name="edit_flag_h" xml:space="preserve">
    <value>dai in pasto intestazione al destinatario</value>
  </data>
  <data name="edit_flag_b" xml:space="preserve">
    <value>dai in pasto corpo al destinatario</value>
  </data>
  <data name="edit_flag_c" xml:space="preserve">
    <value>continua il processo anche se le condizioni corrispondono</value>
  </data>
  <data name="edit_flag_w" xml:space="preserve">
    <value>aspetta la fine del  programma  azione, e controlla il risultato</value>
  </data>
  <data name="edit_flag_W" xml:space="preserve">
    <value>aspetta la fine del  programma  azione, senza controllare il risultato</value>
  </data>
  <data name="edit_flag_i" xml:space="preserve">
    <value>ignora la scrittura degli errori sulla consegna</value>
  </data>
  <data name="edit_flag_r" xml:space="preserve">
    <value>scrivi i messaggi nel modo 'raw'</value>
  </data>
  <data name="edit_flag_f" xml:space="preserve">
    <value>il programma azione è un filtro</value>
  </data>
  <data name="edit_lockfile" xml:space="preserve">
    <value>lock del file di consegna</value>
  </data>
  <data name="edit_cmode_re" xml:space="preserve">
    <value>corrisponde a regular expression</value>
  </data>
  <data name="edit_cmode_nre" xml:space="preserve">
    <value>non corrisponde a regular expression</value>
  </data>
  <data name="edit_cmode_shell" xml:space="preserve">
    <value>Evaluate l'output del comando</value>
  </data>
  <data name="edit_cmode_exit" xml:space="preserve">
    <value>controlla lo status  exit  del comando</value>
  </data>
  <data name="edit_cmode_lt" xml:space="preserve">
    <value>il messaggio è minore di </value>
  </data>
  <data name="edit_cmode_gt" xml:space="preserve">
    <value>il messaggio è maggiore di</value>
  </data>
  <data name="edit_conddesc" xml:space="preserve">
    <value>affinchè l'azione sotto venga eseguita, tutte le condizioni sotto devono avere riscontro. Se non sono presenti condizioni, l'azione viene eseguita sempre.</value>
  </data>
  <data name="edit_none" xml:space="preserve">
    <value>Nessuno</value>
  </data>
  <data name="edit_lock" xml:space="preserve">
    <value>file specifico</value>
  </data>
  <data name="save_err" xml:space="preserve">
    <value>errore nel salvataggio dell'azione</value>
  </data>
  <data name="save_eaction_0" xml:space="preserve">
    <value>file di accodamento mancante</value>
  </data>
  <data name="save_eaction_1" xml:space="preserve">
    <value>cartella MH su cui scrivere mancante</value>
  </data>
  <data name="save_eaction_2" xml:space="preserve">
    <value>maildir  su cui scrivere mancante</value>
  </data>
  <data name="save_eaction_3" xml:space="preserve">
    <value>indirizzo a cui inoltrare mancante</value>
  </data>
  <data name="save_eaction_4" xml:space="preserve">
    <value>programma da eseguire mancante</value>
  </data>
  <data name="save_eaction_6" xml:space="preserve">
    <value>variabile da impostare mancate</value>
  </data>
  <data name="save_elockfile" xml:space="preserve">
    <value>nome del lock file mancate</value>
  </data>
  <data name="save_esize" xml:space="preserve">
    <value>dimensione del messaggio non valido o mancante per la condizione $1</value>
  </data>
  <data name="save_ere" xml:space="preserve">
    <value>regular expression per la condizione  $1 mancante</value>
  </data>
  <data name="save_eshell" xml:space="preserve">
    <value>comando mancante per la condizione  $1</value>
  </data>
  <data name="env_title1" xml:space="preserve">
    <value>Crea variabile</value>
  </data>
  <data name="env_title2" xml:space="preserve">
    <value>modifica variabile</value>
  </data>
  <data name="env_header" xml:space="preserve">
    <value>Procmail variabile di ambiente</value>
  </data>
  <data name="env_name" xml:space="preserve">
    <value>nome della variabile</value>
  </data>
  <data name="env_value" xml:space="preserve">
    <value>valore</value>
  </data>
  <data name="env_err" xml:space="preserve">
    <value>errore nel salvare la variabile </value>
  </data>
  <data name="env_ename" xml:space="preserve">
    <value>nome variabile errato o mancante</value>
  </data>
  <data name="inc_title1" xml:space="preserve">
    <value>aggiungi file incluso</value>
  </data>
  <data name="inc_title2" xml:space="preserve">
    <value>modifica file incluso</value>
  </data>
  <data name="inc_header" xml:space="preserve">
    <value>file incluso con regole procmail</value>
  </data>
  <data name="inc_inc" xml:space="preserve">
    <value>file inclusi</value>
  </data>
  <data name="inc_einc" xml:space="preserve">
    <value>file da includere non inserito</value>
  </data>
  <data name="config_eline" xml:space="preserve">
    <value>linea sconosciuta $1 in $2 : $3</value>
  </data>
  <data name="manual_title" xml:space="preserve">
    <value>modifica configurazione</value>
  </data>
  <data name="manual_desc" xml:space="preserve">
    <value>questa pagine può essere usata per modificare  manualmente il file di configurazione  Procmail $1. ATTENZIONE: non viene controllata la sintassi dei comandi inseriti.</value>
  </data>
  <data name="manual_edata" xml:space="preserve">
    <value>nessun dato fornito dal tuo browser!</value>
  </data>
  <data name="log_create_rec" xml:space="preserve">
    <value>creato recipe to $1</value>
  </data>
  <data name="log_delete_rec" xml:space="preserve">
    <value>eliminato recipe to $1</value>
  </data>
  <data name="log_modify_rec" xml:space="preserve">
    <value>modificato recipe to $1</value>
  </data>
  <data name="log_act5" xml:space="preserve">
    <value>esegui blocco condizionale</value>
  </data>
  <data name="log_act4" xml:space="preserve">
    <value>dai in pasto al programma $1</value>
  </data>
  <data name="log_act3" xml:space="preserve">
    <value>inoltra a $1</value>
  </data>
  <data name="log_act2" xml:space="preserve">
    <value>scrivi su maildir $1</value>
  </data>
  <data name="log_act1" xml:space="preserve">
    <value>scrivi su MH cartella $1</value>
  </data>
  <data name="log_act0" xml:space="preserve">
    <value>accoda al file $1</value>
  </data>
  <data name="log_create_env" xml:space="preserve">
    <value>creata variabile di ambiente $1</value>
  </data>
  <data name="log_modify_env" xml:space="preserve">
    <value>modificata variabile di ambiente $1</value>
  </data>
  <data name="log_delete_env" xml:space="preserve">
    <value>eliminata variabile di ambiente $1</value>
  </data>
  <data name="log_create_inc" xml:space="preserve">
    <value>creato file incluso $1</value>
  </data>
  <data name="log_modify_inc" xml:space="preserve">
    <value>modificato file incluso $1</value>
  </data>
  <data name="log_delete_inc" xml:space="preserve">
    <value>eliminato file incluso $1</value>
  </data>
  <data name="log_manual" xml:space="preserve">
    <value>configurazione modificata manualmente</value>
  </data>
  <data name="log_up" xml:space="preserve">
    <value>una voce spostata su</value>
  </data>
  <data name="log_down" xml:space="preserve">
    <value>una voce spostata giù</value>
  </data>
</root>