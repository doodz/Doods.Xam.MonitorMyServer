<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="log_servers" xml:space="preserve">
    <value>已變更其他DNS伺服器</value>
  </data>
  <data name="log_logging" xml:space="preserve">
    <value>已變更日誌和錯誤</value>
  </data>
  <data name="log_acls" xml:space="preserve">
    <value>已變更登入控制列表</value>
  </data>
  <data name="log_files" xml:space="preserve">
    <value>已變更檔案和目錄</value>
  </data>
  <data name="log_forwarding" xml:space="preserve">
    <value>已變更轉發和傳輸</value>
  </data>
  <data name="log_net" xml:space="preserve">
    <value>已變更位址和拓撲結構</value>
  </data>
  <data name="log_misc" xml:space="preserve">
    <value>已變更雜類參數</value>
  </data>
  <data name="log_zonedef" xml:space="preserve">
    <value>已變更區域預設值</value>
  </data>
  <data name="log_apply" xml:space="preserve">
    <value>已套用的變更</value>
  </data>
  <data name="log_start" xml:space="preserve">
    <value>已啟動DNS伺服器	</value>
  </data>
  <data name="log_master" xml:space="preserve">
    <value>已建立主區域 $1</value>
  </data>
  <data name="log_slave" xml:space="preserve">
    <value>已建立從屬區域 $1</value>
  </data>
  <data name="log_stub" xml:space="preserve">
    <value>已建立子區域 $1</value>
  </data>
  <data name="log_forward" xml:space="preserve">
    <value>已建立轉發區域 $1</value>
  </data>
  <data name="log_delete_master" xml:space="preserve">
    <value>已刪除主區域 $1</value>
  </data>
  <data name="log_delete_slave" xml:space="preserve">
    <value>已刪除從屬區域 $1</value>
  </data>
  <data name="log_delete_stub" xml:space="preserve">
    <value>已刪除子區域 $1</value>
  </data>
  <data name="log_delete_forward" xml:space="preserve">
    <value>已刪除轉發區域 $1</value>
  </data>
  <data name="log_text" xml:space="preserve">
    <value>已手動編輯 $1 的記錄</value>
  </data>
  <data name="log_soa" xml:space="preserve">
    <value>已變更 $1 的區域參數</value>
  </data>
  <data name="log_opts" xml:space="preserve">
    <value>已變更 $1 的區域選項</value>
  </data>
  <data name="log_delete_record" xml:space="preserve">
    <value>已刪除 $3 區域中的 $1 記錄 $2</value>
  </data>
  <data name="log_create_record" xml:space="preserve">
    <value>已建立 $3 區域中的 $1 記錄 $2</value>
  </data>
  <data name="log_modify_record" xml:space="preserve">
    <value>已修改 $3 區域中的 $1 記錄 $2</value>
  </data>
  <data name="log_boot" xml:space="preserve">
    <value>已建立主要配置檔</value>
  </data>
</root>