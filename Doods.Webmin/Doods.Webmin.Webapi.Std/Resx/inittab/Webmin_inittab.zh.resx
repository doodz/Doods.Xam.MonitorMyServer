<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="inittab_new" xml:space="preserve">
    <value>创建一个新的初始化进程</value>
  </data>
  <data name="inittab_id" xml:space="preserve">
    <value>名字</value>
  </data>
  <data name="inittab_runlevels" xml:space="preserve">
    <value>执行等级</value>
  </data>
  <data name="inittab_action" xml:space="preserve">
    <value>动作</value>
  </data>
  <data name="inittab_process" xml:space="preserve">
    <value>进程</value>
  </data>
  <data name="inittab_none" xml:space="preserve">
    <value>无</value>
  </data>
  <data name="inittab_respawn" xml:space="preserve">
    <value>重新产生</value>
  </data>
  <data name="inittab_wait" xml:space="preserve">
    <value>等待</value>
  </data>
  <data name="inittab_once" xml:space="preserve">
    <value>一次计时，在等级</value>
  </data>
  <data name="inittab_boot" xml:space="preserve">
    <value>引导时间</value>
  </data>
  <data name="inittab_bootwait" xml:space="preserve">
    <value>引导时间，等待到结束</value>
  </data>
  <data name="inittab_off" xml:space="preserve">
    <value>无行动</value>
  </data>
  <data name="inittab_ondemand" xml:space="preserve">
    <value>每当在A、B、C中</value>
  </data>
  <data name="inittab_initdefault" xml:space="preserve">
    <value>系统引导后</value>
  </data>
  <data name="inittab_sysinit" xml:space="preserve">
    <value>系统引导期间</value>
  </data>
  <data name="inittab_powerwait" xml:space="preserve">
    <value>关闭电源</value>
  </data>
  <data name="inittab_powerfail" xml:space="preserve">
    <value>无等待地关闭电源</value>
  </data>
  <data name="inittab_powerokwait" xml:space="preserve">
    <value>电源恢复</value>
  </data>
  <data name="inittab_powerfailnow" xml:space="preserve">
    <value>电源失败</value>
  </data>
  <data name="inittab_ctrlaltdel" xml:space="preserve">
    <value>Ctrl-Alt-Del</value>
  </data>
  <data name="inittab_kbdrequest" xml:space="preserve">
    <value>特殊键组合</value>
  </data>
  <data name="inittab_return" xml:space="preserve">
    <value>inittab 索引</value>
  </data>
  <data name="inittab_apply" xml:space="preserve">
    <value>应用Init配置</value>
  </data>
  <data name="inittab_applymsg" xml:space="preserve">
    <value>点击该按钮，通过运行命令&lt;tt&gt;telinit -q&lt;/tt&gt;以应用当前的SysV Init配置。注意：您的配置中的任何错误可能都会导致系统在执行该命令时当机。</value>
  </data>
  <data name="edit_inittab_err" xml:space="preserve">
    <value>您没有编辑进程的权限</value>
  </data>
  <data name="edit_inittab_title" xml:space="preserve">
    <value>编辑进程 $1</value>
  </data>
  <data name="edit_inittab_details" xml:space="preserve">
    <value>进程细节</value>
  </data>
  <data name="edit_inittab_del" xml:space="preserve">
    <value>删除</value>
  </data>
  <data name="edit_inittab_save" xml:space="preserve">
    <value>保存</value>
  </data>
  <data name="new_inittab_err" xml:space="preserve">
    <value>您没有创建新进程的权限</value>
  </data>
  <data name="new_inittab_title" xml:space="preserve">
    <value>新进程</value>
  </data>
  <data name="save_inittab_err" xml:space="preserve">
    <value>您没有保存进程的权限</value>
  </data>
  <data name="save_inittab_noid" xml:space="preserve">
    <value>错误，未输入进程名</value>
  </data>
  <data name="save_inittab_already" xml:space="preserve">
    <value>错误，该进程名已存在</value>
  </data>
  <data name="log_modify" xml:space="preserve">
    <value>已修改初始化进程 $1</value>
  </data>
  <data name="log_rename" xml:space="preserve">
    <value>进程 $1 已改名为 $2</value>
  </data>
  <data name="log_create" xml:space="preserve">
    <value>已创建初始化进程 $1</value>
  </data>
  <data name="log_delete" xml:space="preserve">
    <value>已删除初始化进程 $1</value>
  </data>
</root>