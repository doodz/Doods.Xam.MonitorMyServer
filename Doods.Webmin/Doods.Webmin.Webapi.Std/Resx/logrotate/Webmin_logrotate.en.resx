<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="index_title" xml:space="preserve">
    <value>Log File Rotation</value>
  </data>
  <data name="index_eversion" xml:space="preserve">
    <value>Failed to get the version of logrotate with the command $1 : $2</value>
  </data>
  <data name="index_version" xml:space="preserve">
    <value>Logrotate version $1</value>
  </data>
  <data name="index_add" xml:space="preserve">
    <value>Add a new log file to rotate.</value>
  </data>
  <data name="index_file" xml:space="preserve">
    <value>Log file</value>
  </data>
  <data name="index_period" xml:space="preserve">
    <value>Rotation period</value>
  </data>
  <data name="index_post" xml:space="preserve">
    <value>Post-rotation command</value>
  </data>
  <data name="index_none" xml:space="preserve">
    <value>No log files have been defined yet.</value>
  </data>
  <data name="index_global" xml:space="preserve">
    <value>Edit Global Options</value>
  </data>
  <data name="index_globaldesc" xml:space="preserve">
    <value>Click this button to edit setting that apply to all log files, and define the defaults for logs.</value>
  </data>
  <data name="index_sched" xml:space="preserve">
    <value>Edit Schedule</value>
  </data>
  <data name="index_scheddesc" xml:space="preserve">
    <value>Click this button to edit the schedule on which logrotate is run by Cron, or enable or disable it.</value>
  </data>
  <data name="index_nocmd" xml:space="preserve">
    <value>None</value>
  </data>
  <data name="index_notset" xml:space="preserve">
    <value>Not set</value>
  </data>
  <data name="index_return" xml:space="preserve">
    <value>log files list</value>
  </data>
  <data name="index_force" xml:space="preserve">
    <value>Force Log Rotation</value>
  </data>
  <data name="index_forcedesc" xml:space="preserve">
    <value>Force the immediate rotation of all log files, even if it is not yet time.</value>
  </data>
  <data name="index_logrotate" xml:space="preserve">
    <value>Logrotate</value>
  </data>
  <data name="index_delete" xml:space="preserve">
    <value>Delete Selected Log Rotations</value>
  </data>
  <data name="period_daily" xml:space="preserve">
    <value>Daily</value>
  </data>
  <data name="period_weekly" xml:space="preserve">
    <value>Weekly</value>
  </data>
  <data name="period_monthly" xml:space="preserve">
    <value>Monthly</value>
  </data>
  <data name="period_never" xml:space="preserve">
    <value>Never</value>
  </data>
  <data name="period_bytes" xml:space="preserve">
    <value>bytes</value>
  </data>
  <data name="edit_title1" xml:space="preserve">
    <value>Edit Log File</value>
  </data>
  <data name="edit_title2" xml:space="preserve">
    <value>Create Log File</value>
  </data>
  <data name="edit_header" xml:space="preserve">
    <value>Rotated log file details</value>
  </data>
  <data name="edit_file" xml:space="preserve">
    <value>Log file paths</value>
  </data>
  <data name="edit_sched" xml:space="preserve">
    <value>Rotation schedule</value>
  </data>
  <data name="edit_rotate" xml:space="preserve">
    <value>Number of old logs to keep</value>
  </data>
  <data name="edit_compress" xml:space="preserve">
    <value>Compress old log files?</value>
  </data>
  <data name="edit_delaycompress" xml:space="preserve">
    <value>Delay compression till next cycle?</value>
  </data>
  <data name="edit_copytruncate" xml:space="preserve">
    <value>Truncate log file in place?</value>
  </data>
  <data name="edit_ifempty" xml:space="preserve">
    <value>Rotate even if log file is empty?</value>
  </data>
  <data name="edit_missingok" xml:space="preserve">
    <value>Ignore log file if missing?</value>
  </data>
  <data name="edit_size" xml:space="preserve">
    <value>Maximum size before rotating</value>
  </data>
  <data name="edit_always" xml:space="preserve">
    <value>Ignored</value>
  </data>
  <data name="edit_minsize" xml:space="preserve">
    <value>Minimum size to rotate</value>
  </data>
  <data name="edit_nominsize" xml:space="preserve">
    <value>Always</value>
  </data>
  <data name="edit_ext" xml:space="preserve">
    <value>Extension for rotated filenames</value>
  </data>
  <data name="edit_dateext" xml:space="preserve">
    <value>Use date extension for rotated files</value>
  </data>
  <data name="edit_mail" xml:space="preserve">
    <value>Email log file before deleting?</value>
  </data>
  <data name="edit_mailto" xml:space="preserve">
    <value>Yes, to address</value>
  </data>
  <data name="edit_mailno" xml:space="preserve">
    <value>No, don't email</value>
  </data>
  <data name="edit_mailfl" xml:space="preserve">
    <value>Log file to email</value>
  </data>
  <data name="edit_mailfirst" xml:space="preserve">
    <value>Newest that was just rotated</value>
  </data>
  <data name="edit_maillast" xml:space="preserve">
    <value>Oldest that is about to be deleted</value>
  </data>
  <data name="edit_create" xml:space="preserve">
    <value>Re-create log file after rotation?</value>
  </data>
  <data name="edit_createas" xml:space="preserve">
    <value>Yes, with mode $1 and owned by user $2 and group $3</value>
  </data>
  <data name="edit_createno" xml:space="preserve">
    <value>No, don't re-create</value>
  </data>
  <data name="edit_createsame" xml:space="preserve">
    <value>Yes, with old permissions</value>
  </data>
  <data name="edit_olddir" xml:space="preserve">
    <value>Store old rotated logs in</value>
  </data>
  <data name="edit_olddirto" xml:space="preserve">
    <value>Directory</value>
  </data>
  <data name="edit_olddirsame" xml:space="preserve">
    <value>Same directory as log file</value>
  </data>
  <data name="edit_errors" xml:space="preserve">
    <value>Email error messages to</value>
  </data>
  <data name="edit_errorsno" xml:space="preserve">
    <value>Nobody</value>
  </data>
  <data name="edit_errorsto" xml:space="preserve">
    <value>Address or user</value>
  </data>
  <data name="edit_post" xml:space="preserve">
    <value>Commands to run after rotation</value>
  </data>
  <data name="edit_pre" xml:space="preserve">
    <value>Commands to run before rotation</value>
  </data>
  <data name="edit_default" xml:space="preserve">
    <value>Default ($1)</value>
  </data>
  <data name="edit_sharedscripts" xml:space="preserve">
    <value>Only run scripts once for all files?</value>
  </data>
  <data name="edit_now" xml:space="preserve">
    <value>Rotate Now</value>
  </data>
  <data name="global_title" xml:space="preserve">
    <value>Global Options</value>
  </data>
  <data name="global_header" xml:space="preserve">
    <value>Default options for all log files</value>
  </data>
  <data name="save_err" xml:space="preserve">
    <value>Failed to save log</value>
  </data>
  <data name="save_efile" xml:space="preserve">
    <value>Missing or invalid log filename</value>
  </data>
  <data name="save_esize" xml:space="preserve">
    <value>Missing or invalid maximum size</value>
  </data>
  <data name="save_eminsize" xml:space="preserve">
    <value>Missing or invalid minimum size</value>
  </data>
  <data name="save_erotate" xml:space="preserve">
    <value>Missing or invalid maximum number of old logs to keep</value>
  </data>
  <data name="save_ecreatemode" xml:space="preserve">
    <value>Missing or invalid 3 or 4 digit octal creation mode</value>
  </data>
  <data name="save_ecreateuser" xml:space="preserve">
    <value>Missing or invalid creation user</value>
  </data>
  <data name="save_ecreategroup" xml:space="preserve">
    <value>Missing or invalid creation group</value>
  </data>
  <data name="save_emust1" xml:space="preserve">
    <value>You must enter a creation mode when entering a creation user</value>
  </data>
  <data name="save_emust2" xml:space="preserve">
    <value>You must enter a creation user when entering a creation group</value>
  </data>
  <data name="save_eolddirto" xml:space="preserve">
    <value>Missing or invalid directory for old rotated logs</value>
  </data>
  <data name="save_eext" xml:space="preserve">
    <value>Missing extension for rotated log filenames</value>
  </data>
  <data name="save_emailto" xml:space="preserve">
    <value>Missing email address for rotated logs</value>
  </data>
  <data name="save_eerrors" xml:space="preserve">
    <value>Missing email address for error messages</value>
  </data>
  <data name="save_epre" xml:space="preserve">
    <value>Pre-rotation script cannot contain an &lt;tt&gt;endscript&lt;/tt&gt; or &lt;tt&gt;endrotate&lt;/tt&gt; line</value>
  </data>
  <data name="save_epost" xml:space="preserve">
    <value>Post-rotation script cannot contain an &lt;tt&gt;endscript&lt;/tt&gt; or &lt;tt&gt;endrotate&lt;/tt&gt; line</value>
  </data>
  <data name="save_enofiles" xml:space="preserve">
    <value>No files to rotate entered</value>
  </data>
  <data name="log_modify_sched" xml:space="preserve">
    <value>Changed log rotation Cron job</value>
  </data>
  <data name="log_create_sched" xml:space="preserve">
    <value>Created log rotation Cron job</value>
  </data>
  <data name="log_delete_sched" xml:space="preserve">
    <value>Deleted log rotation Cron job</value>
  </data>
  <data name="log_global" xml:space="preserve">
    <value>Modified global options</value>
  </data>
  <data name="log_create" xml:space="preserve">
    <value>Added rotation for log file $1</value>
  </data>
  <data name="log_modify" xml:space="preserve">
    <value>Modified rotation for log file $1</value>
  </data>
  <data name="log_delete" xml:space="preserve">
    <value>Deleted rotation for log file $1</value>
  </data>
  <data name="log_delete_logs" xml:space="preserve">
    <value>Deleted rotation for $1 log files</value>
  </data>
  <data name="sched_title" xml:space="preserve">
    <value>Log Rotation Schedule</value>
  </data>
  <data name="sched_desc" xml:space="preserve">
    <value>For log rotation configured using this module to be performed, the command $1 must be run on a regular schedule (usually daily) by Cron.</value>
  </data>
  <data name="sched_runparts" xml:space="preserve">
    <value>Currently, the log rotation command is being run from the script $1 $2, and cannot be adjusted.</value>
  </data>
  <data name="sched_sched" xml:space="preserve">
    <value>Log rotation cron job</value>
  </data>
  <data name="sched_disabled" xml:space="preserve">
    <value>Disabled</value>
  </data>
  <data name="sched_enabled" xml:space="preserve">
    <value>Enabled, at times below ..</value>
  </data>
  <data name="sched_save" xml:space="preserve">
    <value>Update Cron Job</value>
  </data>
  <data name="sched_err" xml:space="preserve">
    <value>Failed to save rotation schedule</value>
  </data>
  <data name="sched_when" xml:space="preserve">
    <value>Times to run</value>
  </data>
  <data name="force_title" xml:space="preserve">
    <value>Force Log Rotation</value>
  </data>
  <data name="force_doing" xml:space="preserve">
    <value>Forcing the immediate rotation of all log files ..</value>
  </data>
  <data name="force_doingone" xml:space="preserve">
    <value>Forcing the immediate rotation of one log file ..</value>
  </data>
  <data name="force_done" xml:space="preserve">
    <value>.. done.</value>
  </data>
  <data name="force_failed" xml:space="preserve">
    <value>.. failed! See the output above for the reason why.</value>
  </data>
  <data name="delete_err" xml:space="preserve">
    <value>Failed to delete logs</value>
  </data>
  <data name="delete_enone" xml:space="preserve">
    <value>None selected</value>
  </data>
  <data name="__norefs" xml:space="preserve">
    <value>1</value>
  </data>
</root>