<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="zones_ipv6" xml:space="preserve">
    <value>IPv6</value>
  </data>
  <data name="zones_ipsec6" xml:space="preserve">
    <value>IPsec 6</value>
  </data>
  <data name="zones_bport" xml:space="preserve">
    <value>bport</value>
  </data>
  <data name="zones_bport6" xml:space="preserve">
    <value>bport6</value>
  </data>
  <data name="proxyndp_title" xml:space="preserve">
    <value>Proxy NDP</value>
  </data>
  <data name="proxyndp_desc" xml:space="preserve">
    <value>Op deze pagina kunt u uw systeem configureren om NDP-verzoeken voor andere dan zijn eigen IP-adressen te beantwoorden, zodat het pakketten naar die adressen kan doorsturen naar hun echte bestemmingen.</value>
  </data>
  <data name="proxyndp_add" xml:space="preserve">
    <value>Voeg een nieuw proxy NDP-adres toe.</value>
  </data>
  <data name="proxyndp_none" xml:space="preserve">
    <value>Er zijn nog geen proxy-NDP-adressen gedefinieerd.</value>
  </data>
  <data name="proxyndp_0" xml:space="preserve">
    <value>Adres aan NDP</value>
  </data>
  <data name="proxyndp_1" xml:space="preserve">
    <value>Verbonden met interface</value>
  </data>
  <data name="proxyndp_2" xml:space="preserve">
    <value>Externe interface</value>
  </data>
  <data name="proxyndp_3" xml:space="preserve">
    <value>Aanhoudend?</value>
  </data>
  <data name="proxyndp_return" xml:space="preserve">
    <value>proxy NDP-adreslijst</value>
  </data>
  <data name="proxyndp_edit" xml:space="preserve">
    <value>Noxy-adres van proxy bewerken</value>
  </data>
  <data name="proxyndp_create" xml:space="preserve">
    <value>Maak een Proxy NDP-adres</value>
  </data>
  <data name="proxyndp_header" xml:space="preserve">
    <value>Proxy NDP-details</value>
  </data>
  <data name="proxyndp_err" xml:space="preserve">
    <value>Kan proxy-NDP niet opslaan</value>
  </data>
  <data name="proxyndp_have" xml:space="preserve">
    <value>Route naar host bestaat?</value>
  </data>
  <data name="proxyndp_eaddr" xml:space="preserve">
    <value>Ontbrekend of ongeldig adres voor NDP</value>
  </data>
  <data name="proxyndp_pers" xml:space="preserve">
    <value>Route verlaten, zelfs als de firewall is gestopt?</value>
  </data>
  <data name="tunnels_ipsec:ah" xml:space="preserve">
    <value>IPsec (met AH)</value>
  </data>
  <data name="tunnels_l2tp" xml:space="preserve">
    <value>Laag 2-tunneling (UDP 1701)</value>
  </data>
  <data name="tunnels_openvpnclient" xml:space="preserve">
    <value>OpenVPN-client op firewall</value>
  </data>
  <data name="tunnels_openvpnclient_1" xml:space="preserve">
    <value>OpenVPN-client op firewall, op poort ..</value>
  </data>
  <data name="tunnels_openvpnserver" xml:space="preserve">
    <value>OpenVPN-server op firewall</value>
  </data>
  <data name="tunnels_openvpnserver_1" xml:space="preserve">
    <value>OpenVPN-server op firewall, op poort ..</value>
  </data>
  <data name="providers_fallback" xml:space="preserve">
    <value>Provider toevoegen aan routeringstabel</value>
  </data>
  <data name="providers_notrack" xml:space="preserve">
    <value>Turn of track</value>
  </data>
  <data name="providers_tproxy" xml:space="preserve">
    <value>Ondersteuning van TProxy op lo-interface</value>
  </data>
  <data name="opts_proxyndp" xml:space="preserve">
    <value>Schakel proxy NDP in</value>
  </data>
  <data name="opts_ndp_filter" xml:space="preserve">
    <value>Reageer alleen op NDP-verzoeken voor interface-IP</value>
  </data>
  <data name="opts_forward" xml:space="preserve">
    <value>Doorsturen instellen</value>
  </data>
  <data name="opts_ignore" xml:space="preserve">
    <value>Negeer op/neer-gebeurtenissen</value>
  </data>
  <data name="opts_optional" xml:space="preserve">
    <value>Interface is optioneel</value>
  </data>
  <data name="opts_required" xml:space="preserve">
    <value>Interface is vereist</value>
  </data>
  <data name="opts_bridge" xml:space="preserve">
    <value>Interface is een brug</value>
  </data>
</root>