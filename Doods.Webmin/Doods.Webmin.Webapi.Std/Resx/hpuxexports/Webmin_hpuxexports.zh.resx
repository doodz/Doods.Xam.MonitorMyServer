<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="index_title" xml:space="preserve">
    <value>NFS输出</value>
  </data>
  <data name="index_dir" xml:space="preserve">
    <value>目录</value>
  </data>
  <data name="index_inactive" xml:space="preserve">
    <value>未激活的</value>
  </data>
  <data name="index_to" xml:space="preserve">
    <value>输出到..</value>
  </data>
  <data name="index_none" xml:space="preserve">
    <value>您尚未输出任何目录。</value>
  </data>
  <data name="index_add" xml:space="preserve">
    <value>增加一个新的输出</value>
  </data>
  <data name="index_apply" xml:space="preserve">
    <value>应用更改</value>
  </data>
  <data name="index_applymsg" xml:space="preserve">
    <value>点击这个按钮使当前的文件输出配置起作用。这将使上面列出的所有目录生效。</value>
  </data>
  <data name="index_return" xml:space="preserve">
    <value>输出列表</value>
  </data>
  <data name="index_eprog" xml:space="preserve">
    <value>在您的系统中没发现NFS服务器执行程序。没安装NFS包。</value>
  </data>
  <data name="index_sel_ro" xml:space="preserve">
    <value>选择主机只读访问</value>
  </data>
  <data name="index_all_ro" xml:space="preserve">
    <value>所有主机只读访问</value>
  </data>
  <data name="index_ro_rw" xml:space="preserve">
    <value>所有主机只读访问，选择主机写入访问</value>
  </data>
  <data name="index_sel_rw" xml:space="preserve">
    <value>选择主机写入访问</value>
  </data>
  <data name="index_all_rw" xml:space="preserve">
    <value>所有主机写入访问</value>
  </data>
  <data name="index_sel_root" xml:space="preserve">
    <value>选择主机root访问</value>
  </data>
  <data name="edit_title" xml:space="preserve">
    <value>编辑输出</value>
  </data>
  <data name="create_title" xml:space="preserve">
    <value>创建输出</value>
  </data>
  <data name="edit_details" xml:space="preserve">
    <value>输出的细节</value>
  </data>
  <data name="edit_security" xml:space="preserve">
    <value>输出安全</value>
  </data>
  <data name="edit_dir" xml:space="preserve">
    <value>输出的目录</value>
  </data>
  <data name="edit_active" xml:space="preserve">
    <value>启动？</value>
  </data>
  <data name="edit_to" xml:space="preserve">
    <value>输出到..</value>
  </data>
  <data name="edit_all" xml:space="preserve">
    <value>每个</value>
  </data>
  <data name="edit_host" xml:space="preserve">
    <value>主机</value>
  </data>
  <data name="edit_webnfs" xml:space="preserve">
    <value>WebNFS客户</value>
  </data>
  <data name="edit_netgroup" xml:space="preserve">
    <value>网络组</value>
  </data>
  <data name="edit_network" xml:space="preserve">
    <value>网络</value>
  </data>
  <data name="edit_netmask" xml:space="preserve">
    <value>网络掩码</value>
  </data>
  <data name="edit_relative" xml:space="preserve">
    <value>使符号连接为相对的吗？</value>
  </data>
  <data name="edit_insecure" xml:space="preserve">
    <value>客户必须在一个安全端口上？</value>
  </data>
  <data name="edit_mode" xml:space="preserve">
    <value>访问方式</value>
  </data>
  <data name="edit_ro" xml:space="preserve">
    <value>只读</value>
  </data>
  <data name="edit_rw" xml:space="preserve">
    <value>读/写</value>
  </data>
  <data name="edit_noaccess" xml:space="preserve">
    <value>拒绝访问目录？</value>
  </data>
  <data name="edit_squash" xml:space="preserve">
    <value>信任远端用户</value>
  </data>
  <data name="edit_everyone" xml:space="preserve">
    <value>每个人</value>
  </data>
  <data name="edit_except" xml:space="preserve">
    <value>除root外的每人</value>
  </data>
  <data name="edit_nobody" xml:space="preserve">
    <value>没有人</value>
  </data>
  <data name="edit_uids" xml:space="preserve">
    <value>不信任UID</value>
  </data>
  <data name="edit_none" xml:space="preserve">
    <value>没有</value>
  </data>
  <data name="edit_gids" xml:space="preserve">
    <value>不信任GID</value>
  </data>
  <data name="edit_anonuid" xml:space="preserve">
    <value>将不可信用户当作</value>
  </data>
  <data name="edit_default" xml:space="preserve">
    <value>缺省</value>
  </data>
  <data name="edit_anongid" xml:space="preserve">
    <value>将不可信组当作</value>
  </data>
  <data name="edit_sel_ro" xml:space="preserve">
    <value>列出主机只读访问</value>
  </data>
  <data name="edit_all_ro" xml:space="preserve">
    <value>所有主机只读访问</value>
  </data>
  <data name="edit_ro_rw" xml:space="preserve">
    <value>所有主机只读访未，列出的的主机写入访问</value>
  </data>
  <data name="edit_sel_rw" xml:space="preserve">
    <value>列出的主机写入访问</value>
  </data>
  <data name="edit_all_rw" xml:space="preserve">
    <value>所有的击写入访问</value>
  </data>
  <data name="edit_sel_hosts" xml:space="preserve">
    <value>列出的主机</value>
  </data>
  <data name="edit_all_hosts" xml:space="preserve">
    <value>所有主机</value>
  </data>
  <data name="edit_user_access" xml:space="preserve">
    <value>用户访问</value>
  </data>
  <data name="edit_root_access" xml:space="preserve">
    <value>Root访问</value>
  </data>
  <data name="edit_anon_access" xml:space="preserve">
    <value>匿名用户</value>
  </data>
  <data name="edit_anon_notset" xml:space="preserve">
    <value>未设置</value>
  </data>
  <data name="edit_anon_noaccess" xml:space="preserve">
    <value>无访问</value>
  </data>
  <data name="edit_async" xml:space="preserve">
    <value>异步写入</value>
  </data>
  <data name="save_err" xml:space="preserve">
    <value>保存输出失败</value>
  </data>
  <data name="save_edir" xml:space="preserve">
    <value>目录'$1' 不存在</value>
  </data>
  <data name="save_enetgroup" xml:space="preserve">
    <value>无效的网络组或未输入网络组</value>
  </data>
  <data name="save_enetwork" xml:space="preserve">
    <value>'$1'不是有效的网络</value>
  </data>
  <data name="save_enetmask" xml:space="preserve">
    <value>'$1'不是有效的网络掩码</value>
  </data>
  <data name="save_ehost" xml:space="preserve">
    <value>'$1'不是有效的主机名</value>
  </data>
  <data name="save_enohost" xml:space="preserve">
    <value>'$1' - 您未列出的主机</value>
  </data>
  <data name="save_euids" xml:space="preserve">
    <value>不信任的UID必须是一个逗号分隔的数字序列或范围序列</value>
  </data>
  <data name="save_egids" xml:space="preserve">
    <value>不信任的GID必须是一个逗号分隔的数字序列或范围序列</value>
  </data>
  <data name="log_modify" xml:space="preserve">
    <value>已修改NFS 输出 $1</value>
  </data>
  <data name="log_modify_l" xml:space="preserve">
    <value>已修改到$2的NFS 输出 $1</value>
  </data>
  <data name="log_delete" xml:space="preserve">
    <value>已删除的NFS 输出 $1</value>
  </data>
  <data name="log_delete_l" xml:space="preserve">
    <value>已删除的到$2的 NFS 输出 $1</value>
  </data>
  <data name="log_create" xml:space="preserve">
    <value>已创建的NFS 输出 $1</value>
  </data>
  <data name="log_create_l" xml:space="preserve">
    <value>已创建的到$2的NFS 输出 $1</value>
  </data>
  <data name="log_apply" xml:space="preserve">
    <value>应用的配置</value>
  </data>
</root>