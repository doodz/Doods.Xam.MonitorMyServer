<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="index_title" xml:space="preserve">
    <value>OpenSLP配置</value>
  </data>
  <data name="index_return" xml:space="preserve">
    <value>OpenSLP配置</value>
  </data>
  <data name="index_version" xml:space="preserve">
    <value>OpenSLP版本 $1</value>
  </data>
  <data name="slp_apply" xml:space="preserve">
    <value>应用更改</value>
  </data>
  <data name="slp_stop" xml:space="preserve">
    <value>停止OpenSLP</value>
  </data>
  <data name="snda_title" xml:space="preserve">
    <value>静态范围和DA</value>
  </data>
  <data name="snda_useScopes" xml:space="preserve">
    <value>范围的静态列表</value>
  </data>
  <data name="snda_DAAddresses" xml:space="preserve">
    <value>目录代理（DA）的静态列表</value>
  </data>
  <data name="netcfg_title" xml:space="preserve">
    <value>网络配置</value>
  </data>
  <data name="netcfg_isBroadcastOnly" xml:space="preserve">
    <value>强制使用广播代替多播</value>
  </data>
  <data name="netcfg_passiveDADetection" xml:space="preserve">
    <value>使用被动DA检测</value>
  </data>
  <data name="netcfg_activeDADetection" xml:space="preserve">
    <value>使用主动DA检测（仅限于DHCP或DA地址）</value>
  </data>
  <data name="netcfg_DAActiveDiscoveryInterval" xml:space="preserve">
    <value>以秒为单位的活动发现（0禁用活动发现）</value>
  </data>
  <data name="netcfg_multicastTTL" xml:space="preserve">
    <value>组播TTL（0-255）</value>
  </data>
  <data name="netcfg_DADiscoveryMaximumWait" xml:space="preserve">
    <value>DA发现请求的最大等待时间（以毫秒为单位）</value>
  </data>
  <data name="netcfg_DADiscoveryTimeouts" xml:space="preserve">
    <value>连续的DA发现等待时间（以毫秒为单位）</value>
  </data>
  <data name="netcfg_HintsFile" xml:space="preserve">
    <value>OpenSLP提示文件的路径</value>
  </data>
  <data name="netcfg_multicastMaximumWait" xml:space="preserve">
    <value>多播请求的最大等待时间（以毫秒为单位）</value>
  </data>
  <data name="netcfg_multicastTimeouts" xml:space="preserve">
    <value>连续的多播等待时间（以毫秒为单位）</value>
  </data>
  <data name="netcfg_unicastMaximumWait" xml:space="preserve">
    <value>单播请求之间的最长时间（以毫秒为单位）</value>
  </data>
  <data name="netcfg_randomWaitBound" xml:space="preserve">
    <value>所有随机等待参数的最大值（以毫秒为单位）</value>
  </data>
  <data name="netcfg_MTU" xml:space="preserve">
    <value>MTU数据包大小（以字节为单位）</value>
  </data>
  <data name="netcfg_interfaces" xml:space="preserve">
    <value>DA/SA应该侦听的接口的IP地址</value>
  </data>
  <data name="dacfg_title" xml:space="preserve">
    <value>DA配置</value>
  </data>
  <data name="dacfg_isDA" xml:space="preserve">
    <value>仅用作DA（更改此设置之前，请先阅读用户指南）</value>
  </data>
  <data name="log_title" xml:space="preserve">
    <value>跟踪和记录</value>
  </data>
  <data name="log_traceDATraffic" xml:space="preserve">
    <value>打印DA交通消息</value>
  </data>
  <data name="log_traceMsg" xml:space="preserve">
    <value>打印SLP详细消息</value>
  </data>
  <data name="log_traceDrop" xml:space="preserve">
    <value>打印SLP丢弃的消息信息</value>
  </data>
  <data name="log_traceReg" xml:space="preserve">
    <value>打印DA和SA注册和注销信息</value>
  </data>
  <data name="error_open" xml:space="preserve">
    <value>打开文件时出错</value>
  </data>
  <data name="error_flock_on" xml:space="preserve">
    <value>创建文件锁时出错</value>
  </data>
  <data name="error_flock_off" xml:space="preserve">
    <value>销毁文件锁时出错</value>
  </data>
  <data name="error_hup" xml:space="preserve">
    <value>使用PID重新启动OpenSLP时出错</value>
  </data>
  <data name="index_start" xml:space="preserve">
    <value>启动OpenSLP</value>
  </data>
  <data name="index_startmsg" xml:space="preserve">
    <value>单击此按钮以在系统上启动OpenSLP守护程序。</value>
  </data>
  <data name="index_stop" xml:space="preserve">
    <value>停止OpenSLP</value>
  </data>
  <data name="index_stopmsg" xml:space="preserve">
    <value>单击此按钮可在系统上停止OpenSLP守护程序。</value>
  </data>
  <data name="stop_err" xml:space="preserve">
    <value>无法停止OpenSLP</value>
  </data>
  <data name="start_err" xml:space="preserve">
    <value>无法启动OpenSLP</value>
  </data>
</root>