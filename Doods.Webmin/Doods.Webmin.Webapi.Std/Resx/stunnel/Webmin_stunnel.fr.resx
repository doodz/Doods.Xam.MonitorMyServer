<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="index_title" xml:space="preserve">
    <value>Tunnels SSL</value>
  </data>
  <data name="index_name" xml:space="preserve">
    <value>Nom du service</value>
  </data>
  <data name="index_port" xml:space="preserve">
    <value>Port TCP</value>
  </data>
  <data name="index_active" xml:space="preserve">
    <value>Activé?</value>
  </data>
  <data name="index_command" xml:space="preserve">
    <value>Commande STunnel</value>
  </data>
  <data name="index_add" xml:space="preserve">
    <value>Ajouter un nouveau tunnel SSL</value>
  </data>
  <data name="index_none" xml:space="preserve">
    <value>Aucun tunnel SSL n'est actuellement configuré pour être exécuté depuis &lt;tt&gt;inetd&lt;/tt&gt; ou &lt;tt&gt;xinetd&lt;/tt&gt;.</value>
  </data>
  <data name="index_apply" xml:space="preserve">
    <value>Appliquer les changements</value>
  </data>
  <data name="index_applymsg1" xml:space="preserve">
    <value>Cliquez sur ce bouton pour activer votre configuration courante des tunnels SSL  en envoyant un signal HUP aux processus &lt;tt&gt;inetd&lt;/tt&gt; et &lt;tt&gt;xinetd&lt;/tt&gt;</value>
  </data>
  <data name="index_applymsg2" xml:space="preserve">
    <value>Cliquez sur ce bouton pour activer votre configuration courante des tunnels SSL  en envoyant un signal HUP au processus &lt;tt&gt;inetd&lt;/tt&gt;</value>
  </data>
  <data name="index_applymsg3" xml:space="preserve">
    <value>Cliquez sur ce bouton pour activer votre configuration courante des tunnels SSL  en envoyant un signal HUP au processus &lt;tt&gt;xinetd&lt;/tt&gt;</value>
  </data>
  <data name="index_return" xml:space="preserve">
    <value>la liste des tunnels SSL</value>
  </data>
  <data name="index_action" xml:space="preserve">
    <value>Destination du tunnel</value>
  </data>
  <data name="index_cmd" xml:space="preserve">
    <value>Exécute la commande $1</value>
  </data>
  <data name="index_remote" xml:space="preserve">
    <value>Connecté à l'hôte $1</value>
  </data>
  <data name="index_rport" xml:space="preserve">
    <value>Connecté au port $1</value>
  </data>
  <data name="index_version" xml:space="preserve">
    <value>STunnel version $1</value>
  </data>
  <data name="index_eversion" xml:space="preserve">
    <value>La version $1 de STunnel est installée sur votre système, mais ce module requiert la version $2 ou supérieure.</value>
  </data>
  <data name="index_conf" xml:space="preserve">
    <value>Depuis le fichier de configuration $1</value>
  </data>
  <data name="index_noconf" xml:space="preserve">
    <value>Aucun fichier de configuration</value>
  </data>
  <data name="edit_title" xml:space="preserve">
    <value>Editer le tunnel SSL</value>
  </data>
  <data name="create_title" xml:space="preserve">
    <value>Créer un tunnel SSL</value>
  </data>
  <data name="edit_header1" xml:space="preserve">
    <value>Options du tunnel source</value>
  </data>
  <data name="edit_name" xml:space="preserve">
    <value>Nom du service</value>
  </data>
  <data name="edit_port" xml:space="preserve">
    <value>Port TCP</value>
  </data>
  <data name="edit_active" xml:space="preserve">
    <value>Activé?</value>
  </data>
  <data name="edit_header2" xml:space="preserve">
    <value>Options du tunnel destination</value>
  </data>
  <data name="edit_mode0" xml:space="preserve">
    <value>Exécuter le programme avec &lt;tt&gt;inetd&lt;/tt&gt;</value>
  </data>
  <data name="edit_mode1" xml:space="preserve">
    <value>Exécuter le programme dans un PTY</value>
  </data>
  <data name="edit_mode2" xml:space="preserve">
    <value>Connecter à l'hôte distant</value>
  </data>
  <data name="edit_cmd" xml:space="preserve">
    <value>Chemin du programme</value>
  </data>
  <data name="edit_args" xml:space="preserve">
    <value>avec les arguments</value>
  </data>
  <data name="edit_rhost" xml:space="preserve">
    <value>Hostname distant</value>
  </data>
  <data name="edit_rport" xml:space="preserve">
    <value>Port distant</value>
  </data>
  <data name="edit_header3" xml:space="preserve">
    <value>Autres options</value>
  </data>
  <data name="edit_pem" xml:space="preserve">
    <value>Certificat SSL et fichier de la clé</value>
  </data>
  <data name="edit_pem0" xml:space="preserve">
    <value>Défaut (compilé)</value>
  </data>
  <data name="edit_pem1" xml:space="preserve">
    <value>Utiliser le certificat Webmin</value>
  </data>
  <data name="edit_pem2" xml:space="preserve">
    <value>Utiliser le certificat dans le fichier</value>
  </data>
  <data name="edit_cmode" xml:space="preserve">
    <value>Mode du tunnel</value>
  </data>
  <data name="edit_cmode0" xml:space="preserve">
    <value>Accepte le SSL et se connecte normalement</value>
  </data>
  <data name="edit_cmode1" xml:space="preserve">
    <value>Accepte une connexion normale et se connecte avec SSL</value>
  </data>
  <data name="edit_tcpw" xml:space="preserve">
    <value>Nom du wrappers TCP</value>
  </data>
  <data name="edit_auto" xml:space="preserve">
    <value>Automatique</value>
  </data>
  <data name="edit_iface" xml:space="preserve">
    <value>Adresse source de sortie</value>
  </data>
  <data name="edit_type" xml:space="preserve">
    <value>Exécuté depuis</value>
  </data>
  <data name="save_err" xml:space="preserve">
    <value>Impossible de sauver le tunnel SSL</value>
  </data>
  <data name="save_enclash" xml:space="preserve">
    <value>Le service nommé $2 est déjà utilisé sur le port $1.</value>
  </data>
  <data name="save_einetd" xml:space="preserve">
    <value>Il y a déjà un service inetd appelé $1.</value>
  </data>
  <data name="save_ename" xml:space="preserve">
    <value>Nom du service manquant ou invalide</value>
  </data>
  <data name="save_eport" xml:space="preserve">
    <value>Numéro de port invalide ou manquant</value>
  </data>
  <data name="save_ecmd" xml:space="preserve">
    <value>Programme à exécuter manquant ou invalide</value>
  </data>
  <data name="save_erhost" xml:space="preserve">
    <value>Hostname distant invalide</value>
  </data>
  <data name="save_erport" xml:space="preserve">
    <value>Port distant invalide</value>
  </data>
  <data name="save_epclash" xml:space="preserve">
    <value>Le port $1 est déjà utilisé par le service $2</value>
  </data>
  <data name="save_epem" xml:space="preserve">
    <value>Le fichier de certificat SSL $1 n'existe pas</value>
  </data>
  <data name="save_etcpw" xml:space="preserve">
    <value>Wrappers-TCP manquant ou invalide</value>
  </data>
  <data name="save_eiface" xml:space="preserve">
    <value>Adresse source de sortie manquante ou invalide</value>
  </data>
  <data name="save_exinetd" xml:space="preserve">
    <value>Il y a déjà un service xinetd nommé $1</value>
  </data>
  <data name="save_export" xml:space="preserve">
    <value>Le port $1 est déjà utilisé par le service xinetd $2</value>
  </data>
  <data name="log_apply" xml:space="preserve">
    <value>Changements appliqués</value>
  </data>
  <data name="log_create" xml:space="preserve">
    <value>Tunnel SSL $1 créé</value>
  </data>
  <data name="log_delete" xml:space="preserve">
    <value>Tunnel SSL $1 supprimé</value>
  </data>
  <data name="log_modify" xml:space="preserve">
    <value>Tunnel SSL $1 modifié</value>
  </data>
</root>