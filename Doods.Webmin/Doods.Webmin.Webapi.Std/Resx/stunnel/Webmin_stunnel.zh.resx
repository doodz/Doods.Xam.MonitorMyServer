<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="index_title" xml:space="preserve">
    <value>SSL通道</value>
  </data>
  <data name="index_name" xml:space="preserve">
    <value>服务名称</value>
  </data>
  <data name="index_port" xml:space="preserve">
    <value>TCP端口</value>
  </data>
  <data name="index_active" xml:space="preserve">
    <value>启动？</value>
  </data>
  <data name="index_command" xml:space="preserve">
    <value>Stunnel 命令</value>
  </data>
  <data name="index_add" xml:space="preserve">
    <value>新增 SSL 通道。</value>
  </data>
  <data name="index_none" xml:space="preserve">
    <value>当前没有安装 SSL 通道以运行 &lt;tt&gt;inetd&lt;/tt&gt; 或者 &lt;tt&gt;xinetd&lt;/tt&gt;。</value>
  </data>
  <data name="index_apply" xml:space="preserve">
    <value>应用变更</value>
  </data>
  <data name="index_applymsg1" xml:space="preserve">
    <value>单击此按钮可以通过给正在运行的 &lt;tt&gt;inetd&lt;/tt&gt; 和 &lt;tt&gt;xinetd&lt;/tt&gt; 发送 HUP 信号来启动你当前的 SSL 通道配置。</value>
  </data>
  <data name="index_applymsg2" xml:space="preserve">
    <value>单击此按钮可以通过给正在运行的&lt;tt&gt;inetd&lt;/tt&gt;发送HUP信号来启动你当前的 SSL 通道配置。</value>
  </data>
  <data name="index_applymsg3" xml:space="preserve">
    <value>单击此按钮可以通过给正在运行的 &lt;tt&gt;xinetd&lt;/tt&gt; 发送HUP信号来启动你当前的 SSL 通道配置。</value>
  </data>
  <data name="index_return" xml:space="preserve">
    <value>SSL 通道列表</value>
  </data>
  <data name="index_action" xml:space="preserve">
    <value>通道目标文件</value>
  </data>
  <data name="index_cmd" xml:space="preserve">
    <value>运行命令 $1</value>
  </data>
  <data name="index_remote" xml:space="preserve">
    <value>连接到主机 $1</value>
  </data>
  <data name="index_rport" xml:space="preserve">
    <value>连接到端口 $1</value>
  </data>
  <data name="index_version" xml:space="preserve">
    <value>STunnel 版本 $1 </value>
  </data>
  <data name="edit_title" xml:space="preserve">
    <value>编辑 SSL 通道</value>
  </data>
  <data name="create_title" xml:space="preserve">
    <value>创建 SSL 通道</value>
  </data>
  <data name="edit_header1" xml:space="preserve">
    <value>通道源选项</value>
  </data>
  <data name="edit_name" xml:space="preserve">
    <value>服务名称</value>
  </data>
  <data name="edit_port" xml:space="preserve">
    <value>TCP 端口</value>
  </data>
  <data name="edit_active" xml:space="preserve">
    <value>启动？</value>
  </data>
  <data name="edit_header2" xml:space="preserve">
    <value>通道目标文件选项</value>
  </data>
  <data name="edit_mode0" xml:space="preserve">
    <value>运行 &lt;tt&gt;inetd&lt;/tt&gt; 程序 </value>
  </data>
  <data name="edit_mode1" xml:space="preserve">
    <value>在 PTY 中运行程序</value>
  </data>
  <data name="edit_mode2" xml:space="preserve">
    <value>连接到远程主机</value>
  </data>
  <data name="edit_cmd" xml:space="preserve">
    <value>程序的路径</value>
  </data>
  <data name="edit_args" xml:space="preserve">
    <value>带有自变量</value>
  </data>
  <data name="edit_rhost" xml:space="preserve">
    <value>远程主机名称</value>
  </data>
  <data name="edit_rport" xml:space="preserve">
    <value>远程端口</value>
  </data>
  <data name="edit_header3" xml:space="preserve">
    <value>其他选项</value>
  </data>
  <data name="edit_pem" xml:space="preserve">
    <value>SSL 证书和密钥文件</value>
  </data>
  <data name="edit_pem0" xml:space="preserve">
    <value>编译默认值</value>
  </data>
  <data name="edit_pem1" xml:space="preserve">
    <value>使用 Webmin 证书</value>
  </data>
  <data name="edit_pem2" xml:space="preserve">
    <value>使用文件中的证书</value>
  </data>
  <data name="edit_cmode" xml:space="preserve">
    <value>通道模式</value>
  </data>
  <data name="edit_cmode0" xml:space="preserve">
    <value>接受 SSL 而且正常连接</value>
  </data>
  <data name="edit_cmode1" xml:space="preserve">
    <value>接受正常并且以 SSL 连接</value>
  </data>
  <data name="edit_tcpw" xml:space="preserve">
    <value>TCP-wrappers 名称</value>
  </data>
  <data name="edit_auto" xml:space="preserve">
    <value>自动</value>
  </data>
  <data name="edit_iface" xml:space="preserve">
    <value>送出源地址</value>
  </data>
  <data name="edit_type" xml:space="preserve">
    <value>运行</value>
  </data>
  <data name="save_err" xml:space="preserve">
    <value>无法保存 SSL 通道</value>
  </data>
  <data name="save_enclash" xml:space="preserve">
    <value>服务名称 $2 已用于端口 $1。</value>
  </data>
  <data name="save_einetd" xml:space="preserve">
    <value>已经有一个名为 $1 的 inetd 服务了。</value>
  </data>
  <data name="save_ename" xml:space="preserve">
    <value>未输入或无效的服务名称</value>
  </data>
  <data name="save_eport" xml:space="preserve">
    <value>无效的远程端口</value>
  </data>
  <data name="save_ecmd" xml:space="preserve">
    <value>未输入或无效的程序</value>
  </data>
  <data name="save_erhost" xml:space="preserve">
    <value>无效的远程主机名</value>
  </data>
  <data name="save_epclash" xml:space="preserve">
    <value>端口 $1 已用于服务 $2。</value>
  </data>
  <data name="save_epem" xml:space="preserve">
    <value>SSL 证书文件 $1 不存在</value>
  </data>
  <data name="save_etcpw" xml:space="preserve">
    <value>未输入或无效的 TCP-wrappers 名称</value>
  </data>
  <data name="save_eiface" xml:space="preserve">
    <value>未输入或无效的送出源地址</value>
  </data>
  <data name="save_exinetd" xml:space="preserve">
    <value>已有一个名为 $1 的 xinetd 服务</value>
  </data>
  <data name="save_export" xml:space="preserve">
    <value>端口 $1 已用于 xinetd 服务 $2</value>
  </data>
  <data name="log_apply" xml:space="preserve">
    <value>应用变更</value>
  </data>
  <data name="log_create" xml:space="preserve">
    <value>已创建 SSL 通道 $1</value>
  </data>
  <data name="log_delete" xml:space="preserve">
    <value>已删除 SSL 通道 $1</value>
  </data>
  <data name="log_modify" xml:space="preserve">
    <value>已修改 SSL 通道 $1</value>
  </data>
</root>