<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="index_title" xml:space="preserve">
    <value>SSL Tunnels</value>
  </data>
  <data name="index_name" xml:space="preserve">
    <value>Dienst Name</value>
  </data>
  <data name="index_port" xml:space="preserve">
    <value>TCP Port</value>
  </data>
  <data name="index_active" xml:space="preserve">
    <value>Aktiv?</value>
  </data>
  <data name="index_command" xml:space="preserve">
    <value>STunnel Kommando</value>
  </data>
  <data name="index_add" xml:space="preserve">
    <value>Einen neuen SSL Tunnel hinzufügen.</value>
  </data>
  <data name="index_none" xml:space="preserve">
    <value>Zur Zeit sind keine SSL Tunnels konfiguriert, die von &lt;tt&gt;inetd&lt;/tt&gt; oder &lt;tt&gt;xinetd&lt;/tt&gt; ausgeführt werden.</value>
  </data>
  <data name="index_einetd" xml:space="preserve">
    <value>Weder &lt;tt&gt;inetd&lt;/tt&gt; oder &lt;tt&gt;xinetd&lt;/tt&gt; ist auf Ihrem System installiert. Eines ist notwendig, um auf Netzwerkverbindungen zu lauschen und an &lt;tt&gt;stunnel&lt;/tt&gt; weitergeben zu können.</value>
  </data>
  <data name="index_apply" xml:space="preserve">
    <value>Änderungen zuweisen</value>
  </data>
  <data name="index_applymsg1" xml:space="preserve">
    <value>Drücken Sie diesen Button, um die aktuellen SSL Tunnel durch Senden des HUP Signals an dir laufenden &lt;tt&gt;inetd&lt;/tt&gt; und &lt;tt&gt;xinetd&lt;/tt&gt; Prozesse zu aktivieren.</value>
  </data>
  <data name="index_applymsg2" xml:space="preserve">
    <value>Drücken Sie diesen Button, um die aktuellen SSL Tunnel durch Senden des HUP Signals an den laufenden &lt;tt&gt;inetd&lt;/tt&gt; Prozess zu aktivieren.</value>
  </data>
  <data name="index_applymsg3" xml:space="preserve">
    <value>Drücken Sie diesen Button, um die aktuellen SSL Tunnel durch Senden des HUP Signals an den laufenden &lt;tt&gt;xinetd&lt;/tt&gt; Prozess zu aktivieren.</value>
  </data>
  <data name="index_return" xml:space="preserve">
    <value>SSL Tunnel Liste</value>
  </data>
  <data name="index_action" xml:space="preserve">
    <value>Tunnel Ziel</value>
  </data>
  <data name="index_cmd" xml:space="preserve">
    <value>Kommando $1 ausführen</value>
  </data>
  <data name="index_remote" xml:space="preserve">
    <value>Verbinde zu Server $1</value>
  </data>
  <data name="index_rport" xml:space="preserve">
    <value>Verbinde zu Port $1</value>
  </data>
  <data name="index_version" xml:space="preserve">
    <value>STunnel Version $1</value>
  </data>
  <data name="index_eversion" xml:space="preserve">
    <value>Die Version von STunnel, die auf Ihrem System installiert ist $1, aber dieses Modul nicht unterstützt Version $2 und höher.</value>
  </data>
  <data name="index_conf" xml:space="preserve">
    <value>Von Konfigurationsdatei $1</value>
  </data>
  <data name="index_noconf" xml:space="preserve">
    <value>Keine Konfigurationsdatei!</value>
  </data>
  <data name="index_delete" xml:space="preserve">
    <value>Lösche ausgewählte Tunnel</value>
  </data>
  <data name="edit_title" xml:space="preserve">
    <value>SSL Tunnel bearbeiten</value>
  </data>
  <data name="create_title" xml:space="preserve">
    <value>SSL Tunnel erstellen</value>
  </data>
  <data name="edit_header1" xml:space="preserve">
    <value>Tunnel Quelle Optionen</value>
  </data>
  <data name="edit_name" xml:space="preserve">
    <value>Dienst Name</value>
  </data>
  <data name="edit_port" xml:space="preserve">
    <value>TCP Port</value>
  </data>
  <data name="edit_active" xml:space="preserve">
    <value>Aktiv?</value>
  </data>
  <data name="edit_header2" xml:space="preserve">
    <value>Tunnel Ziel Optionen</value>
  </data>
  <data name="edit_mode0" xml:space="preserve">
    <value>Programm im &lt;tt&gt;inetd&lt;/tt&gt; ausführen</value>
  </data>
  <data name="edit_mode1" xml:space="preserve">
    <value>Programm im PTY ausführen</value>
  </data>
  <data name="edit_mode2" xml:space="preserve">
    <value>Verbinde zu entferntem Server</value>
  </data>
  <data name="edit_cmd" xml:space="preserve">
    <value>Pfad zum Programm</value>
  </data>
  <data name="edit_args" xml:space="preserve">
    <value>mit Argumenten</value>
  </data>
  <data name="edit_rhost" xml:space="preserve">
    <value>Entfernter Servername</value>
  </data>
  <data name="edit_rport" xml:space="preserve">
    <value>Entfernter Port</value>
  </data>
  <data name="edit_header3" xml:space="preserve">
    <value>Andere Optionen</value>
  </data>
  <data name="edit_pem" xml:space="preserve">
    <value>SSL Zertifikat und Schlüssel Datei</value>
  </data>
  <data name="edit_pem0" xml:space="preserve">
    <value>Compiled-in Voreinstellungen</value>
  </data>
  <data name="edit_pem1" xml:space="preserve">
    <value>Benutze Webmin's cert</value>
  </data>
  <data name="edit_pem2" xml:space="preserve">
    <value>Benutze cert in Datei</value>
  </data>
  <data name="edit_cmode" xml:space="preserve">
    <value>Tunnel Modus</value>
  </data>
  <data name="edit_cmode0" xml:space="preserve">
    <value>Akzeptiere SSL und verbinde normal</value>
  </data>
  <data name="edit_cmode1" xml:space="preserve">
    <value>Akzeptiere normal und verbinde mit SSL</value>
  </data>
  <data name="edit_tcpw" xml:space="preserve">
    <value>TCP-wrappers Name</value>
  </data>
  <data name="edit_auto" xml:space="preserve">
    <value>Automatisch</value>
  </data>
  <data name="edit_iface" xml:space="preserve">
    <value>Ausgehende Quelladresse</value>
  </data>
  <data name="edit_type" xml:space="preserve">
    <value>Ausführen von</value>
  </data>
  <data name="save_err" xml:space="preserve">
    <value>Speichern des SSL Tunnels fehlgeschlagen</value>
  </data>
  <data name="save_enclash" xml:space="preserve">
    <value>Der Dienst Name $2 wird schon auf Port $1 benutzt.</value>
  </data>
  <data name="save_einetd" xml:space="preserve">
    <value>Es gibt schon einen inetd Service mit Namen $1.</value>
  </data>
  <data name="save_ename" xml:space="preserve">
    <value>Fehlender oder ungültiger Dienst Name</value>
  </data>
  <data name="save_eport" xml:space="preserve">
    <value>Fehlende oder ungültige Port Nummer</value>
  </data>
  <data name="save_ecmd" xml:space="preserve">
    <value>Fehlendes oder ungültiges Programm</value>
  </data>
  <data name="save_erhost" xml:space="preserve">
    <value>Ungüter entfernter Hostname</value>
  </data>
  <data name="save_erport" xml:space="preserve">
    <value>ungüter entfernter Port</value>
  </data>
  <data name="save_epclash" xml:space="preserve">
    <value>Der Port $1 wird bereits vom Dienst $2 benutzt.</value>
  </data>
  <data name="save_epem" xml:space="preserve">
    <value>SSL Zertifikat Datei $1 existiert nicht</value>
  </data>
  <data name="save_etcpw" xml:space="preserve">
    <value>Fehlender oder ungültiger TCP-Wrappers Name</value>
  </data>
  <data name="save_eiface" xml:space="preserve">
    <value>Fehlende oder ungültige Ausgangsquelladresse</value>
  </data>
  <data name="save_exinetd" xml:space="preserve">
    <value>Es existiert bereits ein xinetd Service mit Namen $1</value>
  </data>
  <data name="save_export" xml:space="preserve">
    <value>Der Port $1 wird bereits vom xinetd Dienst $2 benutzt</value>
  </data>
  <data name="log_apply" xml:space="preserve">
    <value>Änderungen angewendet</value>
  </data>
  <data name="log_create" xml:space="preserve">
    <value>SSL Tunnel $1 erstellt</value>
  </data>
  <data name="log_delete" xml:space="preserve">
    <value>SSL Tunnel $1 gelöscht</value>
  </data>
  <data name="log_modify" xml:space="preserve">
    <value>SSL Tunnel $1 modifiziert</value>
  </data>
  <data name="log_delete_stunnels" xml:space="preserve">
    <value>$1 SSL-Tunnel gelöscht</value>
  </data>
</root>