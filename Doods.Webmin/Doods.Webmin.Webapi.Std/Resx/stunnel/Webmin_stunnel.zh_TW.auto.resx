<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="index_title" xml:space="preserve">
    <value>SSL隧道</value>
  </data>
  <data name="index_name" xml:space="preserve">
    <value>服務名稱</value>
  </data>
  <data name="index_port" xml:space="preserve">
    <value>TCP端口</value>
  </data>
  <data name="index_active" xml:space="preserve">
    <value>活性？</value>
  </data>
  <data name="index_command" xml:space="preserve">
    <value>隧道命令</value>
  </data>
  <data name="index_add" xml:space="preserve">
    <value>添加新的SSL隧道。</value>
  </data>
  <data name="index_none" xml:space="preserve">
    <value>當前沒有將SSL隧道設置為從&lt;tt&gt;inetd&lt;/tt&gt;或&lt;tt&gt;xinetd&lt;/tt&gt;運行。</value>
  </data>
  <data name="index_einetd" xml:space="preserve">
    <value>系統上均未安裝&lt;tt&gt;inetd&lt;/tt&gt;或&lt;tt&gt;xinetd&lt;/tt&gt;。需要一個偵聽接受的網絡連接以傳遞到&lt;tt&gt;tunnel&lt;/tt&gt;。</value>
  </data>
  <data name="index_apply" xml:space="preserve">
    <value>應用更改</value>
  </data>
  <data name="index_applymsg1" xml:space="preserve">
    <value>單擊此按鈕，可以通過將HUP信號發送到正在運行的&lt;tt&gt;inetd&lt;/tt&gt;和&lt;tt&gt;xinetd&lt;/tt&gt;進程來激活當前的SSL隧道配置。</value>
  </data>
  <data name="index_applymsg2" xml:space="preserve">
    <value>單擊此按鈕，可以通過將HUP信號發送到正在運行的&lt;tt&gt;inetd&lt;/tt&gt;進程來激活當前的SSL隧道配置。</value>
  </data>
  <data name="index_applymsg3" xml:space="preserve">
    <value>單擊此按鈕，可以通過將HUP信號發送到正在運行的&lt;tt&gt;xinetd&lt;/tt&gt;進程來激活當前的SSL隧道配置。</value>
  </data>
  <data name="index_return" xml:space="preserve">
    <value>SSL隧道清單</value>
  </data>
  <data name="index_action" xml:space="preserve">
    <value>隧道目的地</value>
  </data>
  <data name="index_cmd" xml:space="preserve">
    <value>運行命令 $1</value>
  </data>
  <data name="index_remote" xml:space="preserve">
    <value>連接到主機 $1</value>
  </data>
  <data name="index_rport" xml:space="preserve">
    <value>連接到端口 $1</value>
  </data>
  <data name="index_version" xml:space="preserve">
    <value>隧道版本 $1</value>
  </data>
  <data name="index_eversion" xml:space="preserve">
    <value>您的系統上安裝的STunnel的版本為 $1，但是此模塊不支持 $2及更高版本。</value>
  </data>
  <data name="index_conf" xml:space="preserve">
    <value>從配置文件 $1</value>
  </data>
  <data name="index_noconf" xml:space="preserve">
    <value>沒有配置文件！</value>
  </data>
  <data name="index_delete" xml:space="preserve">
    <value>刪除選定的隧道</value>
  </data>
  <data name="edit_title" xml:space="preserve">
    <value>編輯SSL隧道</value>
  </data>
  <data name="create_title" xml:space="preserve">
    <value>創建SSL隧道</value>
  </data>
  <data name="edit_header1" xml:space="preserve">
    <value>隧道源選項</value>
  </data>
  <data name="edit_name" xml:space="preserve">
    <value>服務名稱</value>
  </data>
  <data name="edit_port" xml:space="preserve">
    <value>TCP端口</value>
  </data>
  <data name="edit_active" xml:space="preserve">
    <value>活性？</value>
  </data>
  <data name="edit_header2" xml:space="preserve">
    <value>隧道目的地選項</value>
  </data>
  <data name="edit_mode0" xml:space="preserve">
    <value>運行&lt;tt&gt;inetd&lt;/tt&gt;樣式程序</value>
  </data>
  <data name="edit_mode1" xml:space="preserve">
    <value>在PTY中運行程序</value>
  </data>
  <data name="edit_mode2" xml:space="preserve">
    <value>連接到遠程主機</value>
  </data>
  <data name="edit_cmd" xml:space="preserve">
    <value>程序路徑</value>
  </data>
  <data name="edit_args" xml:space="preserve">
    <value>帶參數</value>
  </data>
  <data name="edit_rhost" xml:space="preserve">
    <value>遠程主機名</value>
  </data>
  <data name="edit_rport" xml:space="preserve">
    <value>遠端埠</value>
  </data>
  <data name="edit_header3" xml:space="preserve">
    <value>其他選擇</value>
  </data>
  <data name="edit_pem" xml:space="preserve">
    <value>SSL證書和密鑰文件</value>
  </data>
  <data name="edit_pem0" xml:space="preserve">
    <value>內置默認</value>
  </data>
  <data name="edit_pem1" xml:space="preserve">
    <value>使用Webmin的證書</value>
  </data>
  <data name="edit_pem2" xml:space="preserve">
    <value>在文件中使用證書</value>
  </data>
  <data name="edit_cmode" xml:space="preserve">
    <value>隧道模式</value>
  </data>
  <data name="edit_cmode0" xml:space="preserve">
    <value>接受SSL並正常連接</value>
  </data>
  <data name="edit_cmode1" xml:space="preserve">
    <value>接受正常並使用SSL連接</value>
  </data>
  <data name="edit_tcpw" xml:space="preserve">
    <value>TCP封裝器名稱</value>
  </data>
  <data name="edit_auto" xml:space="preserve">
    <value>自動</value>
  </data>
  <data name="edit_iface" xml:space="preserve">
    <value>外發源地址</value>
  </data>
  <data name="edit_type" xml:space="preserve">
    <value>逃離</value>
  </data>
  <data name="save_err" xml:space="preserve">
    <value>無法保存SSL隧道</value>
  </data>
  <data name="save_enclash" xml:space="preserve">
    <value>服務名稱 $2已在端口 $1上使用。</value>
  </data>
  <data name="save_einetd" xml:space="preserve">
    <value>已經有一個名為 $1的inetd服務。</value>
  </data>
  <data name="save_ename" xml:space="preserve">
    <value>服務名稱缺失或無效</value>
  </data>
  <data name="save_eport" xml:space="preserve">
    <value>端口號缺失或無效</value>
  </data>
  <data name="save_ecmd" xml:space="preserve">
    <value>程序缺失或無效</value>
  </data>
  <data name="save_erhost" xml:space="preserve">
    <value>無效的遠程主機名</value>
  </data>
  <data name="save_erport" xml:space="preserve">
    <value>無效的遠程端口</value>
  </data>
  <data name="save_epclash" xml:space="preserve">
    <value>服務 $2已使用端口 $1。</value>
  </data>
  <data name="save_epem" xml:space="preserve">
    <value>SSL證書文件 $1不存在</value>
  </data>
  <data name="save_etcpw" xml:space="preserve">
    <value>缺少或無效的TCP-包裝器名稱</value>
  </data>
  <data name="save_eiface" xml:space="preserve">
    <value>缺少或無效的傳出源地址</value>
  </data>
  <data name="save_exinetd" xml:space="preserve">
    <value>已經有一個名為 $1的xinetd服務</value>
  </data>
  <data name="save_export" xml:space="preserve">
    <value>xinetd服務 $2已使用端口 $1</value>
  </data>
  <data name="log_apply" xml:space="preserve">
    <value>應用變更</value>
  </data>
  <data name="log_create" xml:space="preserve">
    <value>已創建SSL隧道 $1</value>
  </data>
  <data name="log_delete" xml:space="preserve">
    <value>已刪除SSL隧道 $1</value>
  </data>
  <data name="log_modify" xml:space="preserve">
    <value>修改的SSL隧道 $1</value>
  </data>
  <data name="log_delete_stunnels" xml:space="preserve">
    <value>已刪除 $1 SSL隧道</value>
  </data>
</root>