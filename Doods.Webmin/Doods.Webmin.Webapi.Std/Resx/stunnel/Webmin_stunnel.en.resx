<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="index_title" xml:space="preserve">
    <value>SSL Tunnels</value>
  </data>
  <data name="index_name" xml:space="preserve">
    <value>Service name</value>
  </data>
  <data name="index_port" xml:space="preserve">
    <value>TCP port</value>
  </data>
  <data name="index_active" xml:space="preserve">
    <value>Active?</value>
  </data>
  <data name="index_command" xml:space="preserve">
    <value>STunnel command</value>
  </data>
  <data name="index_add" xml:space="preserve">
    <value>Add new SSL tunnel.</value>
  </data>
  <data name="index_none" xml:space="preserve">
    <value>No SSL tunnels are currently setup to run from &lt;tt&gt;inetd&lt;/tt&gt; or &lt;tt&gt;xinetd&lt;/tt&gt;.</value>
  </data>
  <data name="index_einetd" xml:space="preserve">
    <value>Neither &lt;tt&gt;inetd&lt;/tt&gt; or &lt;tt&gt;xinetd&lt;/tt&gt; are installed on your system. One is needed to listen accept network connections to pass to &lt;tt&gt;stunnel&lt;/tt&gt;.</value>
  </data>
  <data name="index_apply" xml:space="preserve">
    <value>Apply Changes</value>
  </data>
  <data name="index_applymsg1" xml:space="preserve">
    <value>Click this button to make your current SSL tunnel configuration active by sending HUP signals to the running &lt;tt&gt;inetd&lt;/tt&gt; and &lt;tt&gt;xinetd&lt;/tt&gt; processes.</value>
  </data>
  <data name="index_applymsg2" xml:space="preserve">
    <value>Click this button to make your current SSL tunnel configuration active by sending HUP signals to the running &lt;tt&gt;inetd&lt;/tt&gt; process.</value>
  </data>
  <data name="index_applymsg3" xml:space="preserve">
    <value>Click this button to make your current SSL tunnel configuration active by sending HUP signals to the running &lt;tt&gt;xinetd&lt;/tt&gt; process.</value>
  </data>
  <data name="index_return" xml:space="preserve">
    <value>SSL tunnel listing</value>
  </data>
  <data name="index_action" xml:space="preserve">
    <value>Tunnel destination</value>
  </data>
  <data name="index_cmd" xml:space="preserve">
    <value>Run command $1</value>
  </data>
  <data name="index_remote" xml:space="preserve">
    <value>Connect to host $1</value>
  </data>
  <data name="index_rport" xml:space="preserve">
    <value>Connect to port $1</value>
  </data>
  <data name="index_version" xml:space="preserve">
    <value>STunnel version $1</value>
  </data>
  <data name="index_eversion" xml:space="preserve">
    <value>The version of STunnel installed on your system is $1, but this module does not support version $2 and above.</value>
  </data>
  <data name="index_conf" xml:space="preserve">
    <value>From config file $1</value>
  </data>
  <data name="index_noconf" xml:space="preserve">
    <value>No configuration file!</value>
  </data>
  <data name="index_delete" xml:space="preserve">
    <value>Delete Selected Tunnels</value>
  </data>
  <data name="edit_title" xml:space="preserve">
    <value>Edit SSL Tunnel</value>
  </data>
  <data name="create_title" xml:space="preserve">
    <value>Create SSL Tunnel</value>
  </data>
  <data name="edit_header1" xml:space="preserve">
    <value>Tunnel source options</value>
  </data>
  <data name="edit_name" xml:space="preserve">
    <value>Service name</value>
  </data>
  <data name="edit_port" xml:space="preserve">
    <value>TCP port</value>
  </data>
  <data name="edit_active" xml:space="preserve">
    <value>Active?</value>
  </data>
  <data name="edit_header2" xml:space="preserve">
    <value>Tunnel destination options</value>
  </data>
  <data name="edit_mode0" xml:space="preserve">
    <value>Run &lt;tt&gt;inetd&lt;/tt&gt; style program</value>
  </data>
  <data name="edit_mode1" xml:space="preserve">
    <value>Run program in PTY</value>
  </data>
  <data name="edit_mode2" xml:space="preserve">
    <value>Connect to remote host</value>
  </data>
  <data name="edit_cmd" xml:space="preserve">
    <value>Path to program</value>
  </data>
  <data name="edit_args" xml:space="preserve">
    <value>with arguments</value>
  </data>
  <data name="edit_rhost" xml:space="preserve">
    <value>Remote hostname</value>
  </data>
  <data name="edit_rport" xml:space="preserve">
    <value>Remote port</value>
  </data>
  <data name="edit_header3" xml:space="preserve">
    <value>Other options</value>
  </data>
  <data name="edit_pem" xml:space="preserve">
    <value>SSL certificate and key file</value>
  </data>
  <data name="edit_pem0" xml:space="preserve">
    <value>Compiled-in default</value>
  </data>
  <data name="edit_pem1" xml:space="preserve">
    <value>Use Webmin's cert</value>
  </data>
  <data name="edit_pem2" xml:space="preserve">
    <value>Use cert in file</value>
  </data>
  <data name="edit_cmode" xml:space="preserve">
    <value>Tunnel mode</value>
  </data>
  <data name="edit_cmode0" xml:space="preserve">
    <value>Accept SSL and connect normally</value>
  </data>
  <data name="edit_cmode1" xml:space="preserve">
    <value>Accept normal and connect with SSL</value>
  </data>
  <data name="edit_tcpw" xml:space="preserve">
    <value>TCP-wrappers name</value>
  </data>
  <data name="edit_auto" xml:space="preserve">
    <value>Automatic</value>
  </data>
  <data name="edit_iface" xml:space="preserve">
    <value>Outgoing source address</value>
  </data>
  <data name="edit_type" xml:space="preserve">
    <value>Run from</value>
  </data>
  <data name="save_err" xml:space="preserve">
    <value>Failed to save SSL tunnel</value>
  </data>
  <data name="save_enclash" xml:space="preserve">
    <value>The service name $2 is already used on port $1.</value>
  </data>
  <data name="save_einetd" xml:space="preserve">
    <value>There is already an inetd service called $1.</value>
  </data>
  <data name="save_ename" xml:space="preserve">
    <value>Missing or invalid service name</value>
  </data>
  <data name="save_eport" xml:space="preserve">
    <value>Missing or invalid port number</value>
  </data>
  <data name="save_ecmd" xml:space="preserve">
    <value>Missing or invalid program to run</value>
  </data>
  <data name="save_erhost" xml:space="preserve">
    <value>Invalid remote host name</value>
  </data>
  <data name="save_erport" xml:space="preserve">
    <value>Invalid remote port</value>
  </data>
  <data name="save_epclash" xml:space="preserve">
    <value>The port $1 is already used by the service $2.</value>
  </data>
  <data name="save_epem" xml:space="preserve">
    <value>SSL certificate file $1 does not exist</value>
  </data>
  <data name="save_etcpw" xml:space="preserve">
    <value>Missing or invalid TCP-wrappers name</value>
  </data>
  <data name="save_eiface" xml:space="preserve">
    <value>Missing or invalid outgoing source address</value>
  </data>
  <data name="save_exinetd" xml:space="preserve">
    <value>There is already an xinetd service called $1</value>
  </data>
  <data name="save_export" xml:space="preserve">
    <value>The port $1 is already used by xinetd service $2</value>
  </data>
  <data name="log_apply" xml:space="preserve">
    <value>Applied Changes</value>
  </data>
  <data name="log_create" xml:space="preserve">
    <value>Created SSL tunnel $1</value>
  </data>
  <data name="log_delete" xml:space="preserve">
    <value>Deleted SSL tunnel $1</value>
  </data>
  <data name="log_modify" xml:space="preserve">
    <value>Modified SSL tunnel $1</value>
  </data>
  <data name="log_delete_stunnels" xml:space="preserve">
    <value>Deleted $1 SSL tunnels</value>
  </data>
  <data name="__norefs" xml:space="preserve">
    <value>1</value>
  </data>
</root>