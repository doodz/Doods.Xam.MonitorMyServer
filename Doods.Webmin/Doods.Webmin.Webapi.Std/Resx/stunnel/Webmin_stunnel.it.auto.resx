<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="index_title" xml:space="preserve">
    <value>Tunnel SSL</value>
  </data>
  <data name="index_name" xml:space="preserve">
    <value>Nome di Servizio</value>
  </data>
  <data name="index_port" xml:space="preserve">
    <value>Porta TCP</value>
  </data>
  <data name="index_active" xml:space="preserve">
    <value>Attivo?</value>
  </data>
  <data name="index_command" xml:space="preserve">
    <value>Comando STunnel</value>
  </data>
  <data name="index_add" xml:space="preserve">
    <value>Aggiungi nuovo tunnel SSL.</value>
  </data>
  <data name="index_none" xml:space="preserve">
    <value>Nessun tunnel SSL è attualmente configurato per l'esecuzione da &lt;tt&gt;inetd&lt;/tt&gt; o &lt;tt&gt;xinetd&lt;/tt&gt;.</value>
  </data>
  <data name="index_einetd" xml:space="preserve">
    <value>Né &lt;tt&gt;inetd&lt;/tt&gt; o &lt;tt&gt;xinetd&lt;/tt&gt; sono installati sul tuo sistema. Uno è necessario per ascoltare accettare le connessioni di rete per passare a &lt;tt&gt;stunnel&lt;/tt&gt;.</value>
  </data>
  <data name="index_apply" xml:space="preserve">
    <value>Applica i cambiamenti</value>
  </data>
  <data name="index_applymsg1" xml:space="preserve">
    <value>Fare clic su questo pulsante per rendere attiva la configurazione del tunnel SSL corrente inviando segnali HUP ai processi in esecuzione &lt;tt&gt;inetd&lt;/tt&gt; e &lt;tt&gt;xinetd&lt;/tt&gt;.</value>
  </data>
  <data name="index_applymsg2" xml:space="preserve">
    <value>Fare clic su questo pulsante per rendere attiva la configurazione del tunnel SSL corrente inviando segnali HUP al processo &lt;tt&gt;inetd&lt;/tt&gt; in esecuzione.</value>
  </data>
  <data name="index_applymsg3" xml:space="preserve">
    <value>Fare clic su questo pulsante per rendere attiva la configurazione del tunnel SSL corrente inviando segnali HUP al processo in esecuzione &lt;tt&gt;xinetd&lt;/tt&gt;.</value>
  </data>
  <data name="index_return" xml:space="preserve">
    <value>Elenco tunnel SSL</value>
  </data>
  <data name="index_action" xml:space="preserve">
    <value>Destinazione del tunnel</value>
  </data>
  <data name="index_cmd" xml:space="preserve">
    <value>Esegui il comando $1 </value>
  </data>
  <data name="index_remote" xml:space="preserve">
    <value>Connetti all'host $1 </value>
  </data>
  <data name="index_rport" xml:space="preserve">
    <value>Connetti alla porta $1 </value>
  </data>
  <data name="index_version" xml:space="preserve">
    <value>Versione STunnel $1 </value>
  </data>
  <data name="index_eversion" xml:space="preserve">
    <value>La versione di STunnel installata sul tuo sistema è $1, ma questo modulo non supporta la versione $2 e successive.</value>
  </data>
  <data name="index_conf" xml:space="preserve">
    <value>Dal file di configurazione $1 </value>
  </data>
  <data name="index_noconf" xml:space="preserve">
    <value>Nessun file di configurazione!</value>
  </data>
  <data name="index_delete" xml:space="preserve">
    <value>Elimina i tunnel selezionati</value>
  </data>
  <data name="edit_title" xml:space="preserve">
    <value>Modifica tunnel SSL</value>
  </data>
  <data name="create_title" xml:space="preserve">
    <value>Crea tunnel SSL</value>
  </data>
  <data name="edit_header1" xml:space="preserve">
    <value>Opzioni della sorgente del tunnel</value>
  </data>
  <data name="edit_name" xml:space="preserve">
    <value>Nome di Servizio</value>
  </data>
  <data name="edit_port" xml:space="preserve">
    <value>Porta TCP</value>
  </data>
  <data name="edit_active" xml:space="preserve">
    <value>Attivo?</value>
  </data>
  <data name="edit_header2" xml:space="preserve">
    <value>Opzioni di destinazione del tunnel</value>
  </data>
  <data name="edit_mode0" xml:space="preserve">
    <value>Esegui il programma di stile &lt;tt&gt;inetd&lt;/tt&gt;</value>
  </data>
  <data name="edit_mode1" xml:space="preserve">
    <value>Esegui programma in PTY</value>
  </data>
  <data name="edit_mode2" xml:space="preserve">
    <value>Connetti all'host remoto</value>
  </data>
  <data name="edit_cmd" xml:space="preserve">
    <value>Percorso da programmare</value>
  </data>
  <data name="edit_args" xml:space="preserve">
    <value>con argomenti</value>
  </data>
  <data name="edit_rhost" xml:space="preserve">
    <value>Nome host remoto</value>
  </data>
  <data name="edit_rport" xml:space="preserve">
    <value>Porta remota</value>
  </data>
  <data name="edit_header3" xml:space="preserve">
    <value>Altre opzioni</value>
  </data>
  <data name="edit_pem" xml:space="preserve">
    <value>Certificato SSL e file chiave</value>
  </data>
  <data name="edit_pem0" xml:space="preserve">
    <value>Predefinito compilato</value>
  </data>
  <data name="edit_pem1" xml:space="preserve">
    <value>Usa il certificato Webmin</value>
  </data>
  <data name="edit_pem2" xml:space="preserve">
    <value>Usa cert nel file</value>
  </data>
  <data name="edit_cmode" xml:space="preserve">
    <value>Modalità tunnel</value>
  </data>
  <data name="edit_cmode0" xml:space="preserve">
    <value>Accetta SSL e connettiti normalmente</value>
  </data>
  <data name="edit_cmode1" xml:space="preserve">
    <value>Accetta normale e connettiti con SSL</value>
  </data>
  <data name="edit_tcpw" xml:space="preserve">
    <value>Nome wrapper TCP</value>
  </data>
  <data name="edit_auto" xml:space="preserve">
    <value>Automatico</value>
  </data>
  <data name="edit_iface" xml:space="preserve">
    <value>Indirizzo sorgente in uscita</value>
  </data>
  <data name="edit_type" xml:space="preserve">
    <value>Correre da</value>
  </data>
  <data name="save_err" xml:space="preserve">
    <value>Impossibile salvare il tunnel SSL</value>
  </data>
  <data name="save_enclash" xml:space="preserve">
    <value>Il nome del servizio $2 è già utilizzato sulla porta $1.</value>
  </data>
  <data name="save_einetd" xml:space="preserve">
    <value>Esiste già un servizio inetd chiamato $1.</value>
  </data>
  <data name="save_ename" xml:space="preserve">
    <value>Nome del servizio mancante o non valido</value>
  </data>
  <data name="save_eport" xml:space="preserve">
    <value>Numero porta mancante o non valido</value>
  </data>
  <data name="save_ecmd" xml:space="preserve">
    <value>Programma mancante o non valido da eseguire</value>
  </data>
  <data name="save_erhost" xml:space="preserve">
    <value>Nome host remoto non valido</value>
  </data>
  <data name="save_erport" xml:space="preserve">
    <value>Porta remota non valida</value>
  </data>
  <data name="save_epclash" xml:space="preserve">
    <value>La porta $1 è già utilizzata dal servizio $2.</value>
  </data>
  <data name="save_epem" xml:space="preserve">
    <value>Il file del certificato SSL $1 non esiste</value>
  </data>
  <data name="save_etcpw" xml:space="preserve">
    <value>Nome wrapper TCP mancante o non valido</value>
  </data>
  <data name="save_eiface" xml:space="preserve">
    <value>Indirizzo sorgente in uscita mancante o non valido</value>
  </data>
  <data name="save_exinetd" xml:space="preserve">
    <value>Esiste già un servizio xinetd chiamato $1 </value>
  </data>
  <data name="save_export" xml:space="preserve">
    <value>La porta $1 è già utilizzata dal servizio xinetd $2 </value>
  </data>
  <data name="log_apply" xml:space="preserve">
    <value>Modifiche applicate</value>
  </data>
  <data name="log_create" xml:space="preserve">
    <value>Tunnel SSL creato $1 </value>
  </data>
  <data name="log_delete" xml:space="preserve">
    <value>Tunnel SSL eliminato $1 </value>
  </data>
  <data name="log_modify" xml:space="preserve">
    <value>Tunnel SSL modificato $1 </value>
  </data>
  <data name="log_delete_stunnels" xml:space="preserve">
    <value>$1 tunnel SSL eliminati</value>
  </data>
</root>