<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="index_title" xml:space="preserve">
    <value>逻辑卷管理</value>
  </data>
  <data name="index_ecommands" xml:space="preserve">
    <value>在您的系统中未找到逻辑卷管理（LVM）命令$1。Webmin需要逻辑卷管理（LVM）管理命令以便设定和管理逻辑卷。</value>
  </data>
  <data name="index_emodule" xml:space="preserve">
    <value>逻辑卷管理（LVM）状态目录$1不存在。这表示您的核心不支持逻辑卷管理（LVM），或者未加载$2核心模组。</value>
  </data>
  <data name="index_vgs" xml:space="preserve">
    <value>卷组</value>
  </data>
  <data name="index_pvs" xml:space="preserve">
    <value>物理卷</value>
  </data>
  <data name="index_lvs" xml:space="preserve">
    <value>逻辑卷</value>
  </data>
  <data name="index_none" xml:space="preserve">
    <value>在您的系统中未找到卷组。</value>
  </data>
  <data name="index_add" xml:space="preserve">
    <value>新增一个卷组。</value>
  </data>
  <data name="index_nolvs" xml:space="preserve">
    <value>本卷组还没有&lt;br&gt;逻辑卷。</value>
  </data>
  <data name="index_nopvs" xml:space="preserve">
    <value>本卷组还没有&lt;br&gt;物理卷。</value>
  </data>
  <data name="index_addlv" xml:space="preserve">
    <value>创建一个新的物理卷。</value>
  </data>
  <data name="index_addsnap" xml:space="preserve">
    <value>创建一个新的快照。</value>
  </data>
  <data name="index_return" xml:space="preserve">
    <value>卷组</value>
  </data>
  <data name="index_eversion" xml:space="preserve">
    <value>Webmin只支持逻辑卷管理（LVM）1.0或更高版本。您的系统中的$1显示的版本为：$2</value>
  </data>
  <data name="lv_edit" xml:space="preserve">
    <value>编辑逻辑卷</value>
  </data>
  <data name="lv_edit_snap" xml:space="preserve">
    <value>编辑快照</value>
  </data>
  <data name="lv_create" xml:space="preserve">
    <value>创建逻辑卷</value>
  </data>
  <data name="lv_create_snap" xml:space="preserve">
    <value>创建快照</value>
  </data>
  <data name="lv_vg" xml:space="preserve">
    <value>在卷组$1中</value>
  </data>
  <data name="lv_header" xml:space="preserve">
    <value>逻辑卷细节</value>
  </data>
  <data name="lv_name" xml:space="preserve">
    <value>卷名</value>
  </data>
  <data name="lv_size" xml:space="preserve">
    <value>卷的大小</value>
  </data>
  <data name="lv_device" xml:space="preserve">
    <value>装置文件</value>
  </data>
  <data name="lv_status" xml:space="preserve">
    <value>当前状态</value>
  </data>
  <data name="lv_mount" xml:space="preserve">
    <value>以$2的身份加载$1上</value>
  </data>
  <data name="lv_umount" xml:space="preserve">
    <value>用于以$2的形式加载$1上</value>
  </data>
  <data name="lv_mountvm" xml:space="preserve">
    <value>以虚拟内存的形式加载</value>
  </data>
  <data name="lv_umountvm" xml:space="preserve">
    <value>用于以虚拟内存的形式加载</value>
  </data>
  <data name="lv_mountraid" xml:space="preserve">
    <value>RAID 部分装置 $1</value>
  </data>
  <data name="lv_notused" xml:space="preserve">
    <value>并无使用</value>
  </data>
  <data name="lv_cannot" xml:space="preserve">
    <value>因为本逻辑卷正在使用中，所以无法为其重新命名或调整大小。</value>
  </data>
  <data name="lv_perm" xml:space="preserve">
    <value>卷访问</value>
  </data>
  <data name="lv_permrw" xml:space="preserve">
    <value>读/写</value>
  </data>
  <data name="lv_permr" xml:space="preserve">
    <value>只读</value>
  </data>
  <data name="lv_alloc" xml:space="preserve">
    <value>分配方法</value>
  </data>
  <data name="lv_allocy" xml:space="preserve">
    <value>连接</value>
  </data>
  <data name="lv_allocn" xml:space="preserve">
    <value>未连接</value>
  </data>
  <data name="lv_stripe" xml:space="preserve">
    <value>分隔卷</value>
  </data>
  <data name="lv_nostripe" xml:space="preserve">
    <value>停用（每次启动时分配）</value>
  </data>
  <data name="lv_stripes" xml:space="preserve">
    <value>分隔物理卷$1</value>
  </data>
  <data name="lv_err" xml:space="preserve">
    <value>保存逻辑卷失败</value>
  </data>
  <data name="lv_ename" xml:space="preserve">
    <value>未输入或无效的卷名</value>
  </data>
  <data name="lv_esame" xml:space="preserve">
    <value>相同名称的逻辑卷已经存在</value>
  </data>
  <data name="lv_esize" xml:space="preserve">
    <value>未输入或无效的卷大小</value>
  </data>
  <data name="lv_estripe" xml:space="preserve">
    <value>未输入或无效的的分割数</value>
  </data>
  <data name="lv_delete" xml:space="preserve">
    <value>删除逻辑卷</value>
  </data>
  <data name="lv_rusure" xml:space="preserve">
    <value>您确定要删除逻辑$1吗？该逻辑卷上文件系统中的所有数据将会被永久删除！</value>
  </data>
  <data name="lv_rusnap" xml:space="preserve">
    <value>您确定要删除快照$1吗？</value>
  </data>
  <data name="lv_deleteok" xml:space="preserve">
    <value>现在删除</value>
  </data>
  <data name="lv_err2" xml:space="preserve">
    <value>删除逻辑卷失败</value>
  </data>
  <data name="lv_pesize" xml:space="preserve">
    <value>分配块大小</value>
  </data>
  <data name="lv_petotal" xml:space="preserve">
    <value>从卷组分配块</value>
  </data>
  <data name="lv_petotals" xml:space="preserve">
    <value>$1 超过 $2</value>
  </data>
  <data name="lv_mkfs" xml:space="preserve">
    <value>创建文件系统类型：</value>
  </data>
  <data name="lv_mkfsdesc" xml:space="preserve">
    <value>选择一种文件系统类型，并点击此按钮在本逻辑卷上创建新的文件系统。这样做将会删除当前该卷上的任何数据。</value>
  </data>
  <data name="lv_toobig" xml:space="preserve">
    <value>新的卷大小是$1块（每$2个），但是卷组中仅有$3可用空间。</value>
  </data>
  <data name="lv_snapof" xml:space="preserve">
    <value>逻辑卷的快照</value>
  </data>
  <data name="lv_nosnap" xml:space="preserve">
    <value>无法确定！</value>
  </data>
  <data name="mkfs_title" xml:space="preserve">
    <value>创建文件系统</value>
  </data>
  <data name="mkfs_desc" xml:space="preserve">
    <value>您可以用该表在逻辑卷$3上创建一个新的$2 ($1)文件系统。所有现有的数据将会被删除。</value>
  </data>
  <data name="mkfs_header" xml:space="preserve">
    <value>新的文件系统选项</value>
  </data>
  <data name="mkfs_err" xml:space="preserve">
    <value>创建文件系统选项失败</value>
  </data>
  <data name="mkfs_exec" xml:space="preserve">
    <value>执行命令$1 ..</value>
  </data>
  <data name="mkfs_failed" xml:space="preserve">
    <value>..命令失败！</value>
  </data>
  <data name="mkfs_ok" xml:space="preserve">
    <value>..命令完成。</value>
  </data>
  <data name="resize_title" xml:space="preserve">
    <value>调整逻辑卷的大小</value>
  </data>
  <data name="resize_mesg" xml:space="preserve">
    <value>无法调整该逻辑卷上的$1文件系统的大小。如果要调整该逻辑卷的大小，您必须重新创建这个文件系统----这样做将会删除该逻辑卷上的所有数据。</value>
  </data>
  <data name="resize_mesg2" xml:space="preserve">
    <value>Webmin无从知晓此逻辑卷上的文件系统类型（如果有的话）。如果您调整逻辑卷的大小，您必须重新创建文件系统---这样做将会删除其中的所有数据。</value>
  </data>
  <data name="resize_fs" xml:space="preserve">
    <value>在调整该逻辑卷上的$1文件系统时出现一个错误：$2，如果仅调整该逻辑卷的大小，您必须重新创建该文件系统----这样做将会删除其中的所有数据。</value>
  </data>
  <data name="resize_ok" xml:space="preserve">
    <value>调整逻辑卷的大小</value>
  </data>
  <data name="init_title" xml:space="preserve">
    <value>启动LVM</value>
  </data>
  <data name="init_cmd" xml:space="preserve">
    <value>执行命令$1 ..</value>
  </data>
  <data name="pv_edit" xml:space="preserve">
    <value>编辑物理卷</value>
  </data>
  <data name="pv_create" xml:space="preserve">
    <value>新增至卷组</value>
  </data>
  <data name="pv_vg" xml:space="preserve">
    <value>在卷组$1中</value>
  </data>
  <data name="pv_header" xml:space="preserve">
    <value>物理卷细节</value>
  </data>
  <data name="pv_device" xml:space="preserve">
    <value>磁盘装置</value>
  </data>
  <data name="pv_other" xml:space="preserve">
    <value>其他装置..</value>
  </data>
  <data name="pv_alloc" xml:space="preserve">
    <value>启动分配？</value>
  </data>
  <data name="pv_size" xml:space="preserve">
    <value>磁盘大小</value>
  </data>
  <data name="pv_petotal" xml:space="preserve">
    <value>分配的块</value>
  </data>
  <data name="pv_pesize" xml:space="preserve">
    <value>分配块大小</value>
  </data>
  <data name="pv_warn" xml:space="preserve">
    <value>警告！选中的装置上的所有数据将会被删除。</value>
  </data>
  <data name="pv_err" xml:space="preserve">
    <value>保存物理卷失败</value>
  </data>
  <data name="pv_err2" xml:space="preserve">
    <value>移除物理卷失败</value>
  </data>
  <data name="pv_delete" xml:space="preserve">
    <value>移除物理卷</value>
  </data>
  <data name="pv_rusure" xml:space="preserve">
    <value>您确定要从卷组中移除物理卷装置 $1？这样做将会将所有数据移至本组中的其他物理卷。</value>
  </data>
  <data name="pv_deleteok" xml:space="preserve">
    <value>移除卷</value>
  </data>
  <data name="pv_eother" xml:space="preserve">
    <value>未输入或无效的磁盘装置</value>
  </data>
  <data name="pv_raid" xml:space="preserve">
    <value>RAID 装置 $1</value>
  </data>
  <data name="vg_edit" xml:space="preserve">
    <value>编辑卷组</value>
  </data>
  <data name="vg_create" xml:space="preserve">
    <value>创建卷组</value>
  </data>
  <data name="vg_name" xml:space="preserve">
    <value>卷组名称</value>
  </data>
  <data name="vg_header" xml:space="preserve">
    <value>卷组细节</value>
  </data>
  <data name="vg_size" xml:space="preserve">
    <value>总计</value>
  </data>
  <data name="vg_petotal" xml:space="preserve">
    <value>分配的块</value>
  </data>
  <data name="vg_pesize" xml:space="preserve">
    <value>分配的块大小</value>
  </data>
  <data name="vg_device" xml:space="preserve">
    <value>初始的物理装置</value>
  </data>
  <data name="vg_err" xml:space="preserve">
    <value>保存卷组失败</value>
  </data>
  <data name="vg_err2" xml:space="preserve">
    <value>删除卷组失败</value>
  </data>
  <data name="vg_delete" xml:space="preserve">
    <value>删除卷组</value>
  </data>
  <data name="vg_rusure" xml:space="preserve">
    <value>您确定要删除卷组$1？</value>
  </data>
  <data name="vg_cannot" xml:space="preserve">
    <value>因为该卷组仍包含$1逻辑卷，所以无法将其删除。</value>
  </data>
  <data name="vg_deleteok" xml:space="preserve">
    <value>立刻删除</value>
  </data>
  <data name="vg_ename" xml:space="preserve">
    <value>未输入或无效的卷组名</value>
  </data>
  <data name="vg_epesize" xml:space="preserve">
    <value>未输入或无效的分配块大小</value>
  </data>
  <data name="log_create_vg" xml:space="preserve">
    <value>创建卷组$1</value>
  </data>
  <data name="log_modify_vg" xml:space="preserve">
    <value>修改卷组$1</value>
  </data>
  <data name="log_delete_vg" xml:space="preserve">
    <value>删除卷组$1</value>
  </data>
  <data name="log_create_lv" xml:space="preserve">
    <value>在 VG $2中创建逻辑卷$1</value>
  </data>
  <data name="log_modify_lv" xml:space="preserve">
    <value>在 VG $2中修改逻辑卷$1</value>
  </data>
  <data name="log_delete_lv" xml:space="preserve">
    <value>在 VG $2中删除逻辑卷$1</value>
  </data>
  <data name="log_mkfs_lv" xml:space="preserve">
    <value>在$2上创建$1文件系统</value>
  </data>
  <data name="log_create_pv" xml:space="preserve">
    <value>将物理卷$1 新增至VG $1</value>
  </data>
  <data name="log_modify_pv" xml:space="preserve">
    <value>修改VG $2中的物理卷$1</value>
  </data>
  <data name="log_delete_pv" xml:space="preserve">
    <value>从VG $2中移除物理卷$1</value>
  </data>
</root>