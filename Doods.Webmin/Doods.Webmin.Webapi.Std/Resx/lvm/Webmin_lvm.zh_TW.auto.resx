<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="i2ndex_addpv" xml:space="preserve">
    <value>將物理卷添加到該組。</value>
  </data>
  <data name="index_addpv2" xml:space="preserve">
    <value>將物理卷添加到&lt;tt&gt;$1&lt;/tt&gt;。</value>
  </data>
  <data name="index_addlv2" xml:space="preserve">
    <value>在&lt;tt&gt;$1&lt;/tt&gt;中創建邏輯卷。</value>
  </data>
  <data name="index_addlv2s" xml:space="preserve">
    <value>在&lt;tt&gt;$1&lt;/tt&gt;中創建快照。</value>
  </data>
  <data name="index_addlv3" xml:space="preserve">
    <value>在&lt;tt&gt;$1&lt;/tt&gt;中創建一個精簡池。</value>
  </data>
  <data name="index_return2" xml:space="preserve">
    <value>物理體積</value>
  </data>
  <data name="index_return3" xml:space="preserve">
    <value>邏輯卷</value>
  </data>
  <data name="index_version" xml:space="preserve">
    <value>LVM版本 $1</value>
  </data>
  <data name="index_vgname" xml:space="preserve">
    <value>卷組名稱</value>
  </data>
  <data name="index_vgsize" xml:space="preserve">
    <value>總尺寸</value>
  </data>
  <data name="index_vgtotal" xml:space="preserve">
    <value>使用的塊</value>
  </data>
  <data name="index_vgtotal2" xml:space="preserve">
    <value>使用尺寸</value>
  </data>
  <data name="index_nopvs2" xml:space="preserve">
    <value>尚未將物理卷添加到任何卷組。</value>
  </data>
  <data name="index_nolvs2" xml:space="preserve">
    <value>尚未從任何卷組創建邏輯卷。</value>
  </data>
  <data name="index_pvname" xml:space="preserve">
    <value>物理音量設備</value>
  </data>
  <data name="index_pvvg" xml:space="preserve">
    <value>卷組中</value>
  </data>
  <data name="index_pvsize" xml:space="preserve">
    <value>裝置尺寸</value>
  </data>
  <data name="index_pvtotal" xml:space="preserve">
    <value>使用的塊</value>
  </data>
  <data name="index_pvtotal2" xml:space="preserve">
    <value>使用尺寸</value>
  </data>
  <data name="index_vgsdesc" xml:space="preserve">
    <value>卷組是可以分配給一個或多個邏輯卷的一組磁盤。大多數係統只有一個，並且在添加任何物理或邏輯卷之前必須至少創建一個。</value>
  </data>
  <data name="index_pvsdesc" xml:space="preserve">
    <value>物理卷是屬於卷組的磁盤分區或RAID設備。然後，一個或多個邏輯卷可以使用其磁盤空間。</value>
  </data>
  <data name="index_lvsdesc" xml:space="preserve">
    <value>邏輯卷是從卷組的組合磁盤空間創建的虛擬分區。每個文件系統都可以具有一個文件系統，然後將其掛載以存儲文件。</value>
  </data>
  <data name="index_lvname" xml:space="preserve">
    <value>邏輯卷</value>
  </data>
  <data name="index_lvvg" xml:space="preserve">
    <value>卷組</value>
  </data>
  <data name="index_lvsize" xml:space="preserve">
    <value>尺寸</value>
  </data>
  <data name="index_lvused" xml:space="preserve">
    <value>使用空間</value>
  </data>
  <data name="index_lvuse" xml:space="preserve">
    <value>用於</value>
  </data>
  <data name="index_snapof" xml:space="preserve">
    <value>（$1的快照）</value>
  </data>
  <data name="index_thin" xml:space="preserve">
    <value>用於 $1 LV的LVM精簡池</value>
  </data>
  <data name="lv_thin" xml:space="preserve">
    <value>在池中創建為精簡LV</value>
  </data>
  <data name="lv_thin2" xml:space="preserve">
    <value>精簡配置在池中</value>
  </data>
  <data name="lv_nothin" xml:space="preserve">
    <value>無（創建為常規LV）</value>
  </data>
  <data name="lv_size0" xml:space="preserve">
    <value>絕對尺寸</value>
  </data>
  <data name="lv_size1" xml:space="preserve">
    <value>VG大小百分比</value>
  </data>
  <data name="lv_size2" xml:space="preserve">
    <value>VG可用空間百分比</value>
  </data>
  <data name="lv_size3" xml:space="preserve">
    <value>光伏可用空間百分比</value>
  </data>
  <data name="lv_size3a" xml:space="preserve">
    <value>第 $1個，共 $2個</value>
  </data>
  <data name="lv_sizeabs" xml:space="preserve">
    <value>確切尺寸</value>
  </data>
  <data name="lv_sizesimple" xml:space="preserve">
    <value>單位尺寸</value>
  </data>
  <data name="lv_sizeallfree" xml:space="preserve">
    <value>使用所有可用的VG空間</value>
  </data>
  <data name="lv_mountcm" xml:space="preserve">
    <value>由Cloudmin系統 $1使用</value>
  </data>
  <data name="lv_umountcm" xml:space="preserve">
    <value>供Cloudmin系統 $1使用</value>
  </data>
  <data name="lv_mountiscsi" xml:space="preserve">
    <value>iSCSI共享設備 $1</value>
  </data>
  <data name="lv_stripes2" xml:space="preserve">
    <value>要跨越的物理卷</value>
  </data>
  <data name="lv_stripesize" xml:space="preserve">
    <value>條紋尺寸</value>
  </data>
  <data name="lv_readahead" xml:space="preserve">
    <value>預讀行業</value>
  </data>
  <data name="lv_evgsize" xml:space="preserve">
    <value>卷組大小百分比丟失或無效</value>
  </data>
  <data name="lv_efreesize" xml:space="preserve">
    <value>可用卷組大小百分比丟失或無效</value>
  </data>
  <data name="lv_epvsize" xml:space="preserve">
    <value>可用物理卷大小百分比丟失或無效</value>
  </data>
  <data name="lv_snaprollback" xml:space="preserve">
    <value>回滾快照</value>
  </data>
  <data name="lv_rusnaprb" xml:space="preserve">
    <value>您確定要回滾快照 $1嗎？</value>
  </data>
  <data name="lv_delthin" xml:space="preserve">
    <value>警告！該LV是其他 $1精簡配置邏輯卷的精簡池，如果刪除它，它也將丟失！</value>
  </data>
  <data name="lv_snaprollbackok" xml:space="preserve">
    <value>立即回滾</value>
  </data>
  <data name="lv_err3" xml:space="preserve">
    <value>回滾快照失敗</value>
  </data>
  <data name="lv_mkfs2" xml:space="preserve">
    <value>創建文件系統</value>
  </data>
  <data name="lv_mkfsdesc2" xml:space="preserve">
    <value>單擊此按鈕可在此邏輯卷上創建新的 $1文件系統。這將清除卷上當前的所有數據。</value>
  </data>
  <data name="lv_newmount" xml:space="preserve">
    <value>將LV安裝在：</value>
  </data>
  <data name="lv_mountmsg" xml:space="preserve">
    <value>將此LV掛載到系統上的新目錄中，以便可以將其用於存儲文件。文件系統必須已經創建。</value>
  </data>
  <data name="lv_free" xml:space="preserve">
    <value>免費百分比</value>
  </data>
  <data name="lv_freedisk" xml:space="preserve">
    <value>可用空間</value>
  </data>
  <data name="lv_pvs" xml:space="preserve">
    <value>分配的物理卷</value>
  </data>
  <data name="lv_thincs" xml:space="preserve">
    <value>精簡池中的LV</value>
  </data>
  <data name="lv_thinpercent" xml:space="preserve">
    <value>精簡池使用百分比</value>
  </data>
  <data name="lv_thinused" xml:space="preserve">
    <value>使用的池空間薄</value>
  </data>
  <data name="lv_snapusage" xml:space="preserve">
    <value>快照使用率</value>
  </data>
  <data name="lv_egone" xml:space="preserve">
    <value>邏輯卷不再存在！</value>
  </data>
  <data name="lv_moveheader" xml:space="preserve">
    <value>移走體量</value>
  </data>
  <data name="lv_pvfrom" xml:space="preserve">
    <value>從物理體積移動塊</value>
  </data>
  <data name="lv_pvto" xml:space="preserve">
    <value>物理體積</value>
  </data>
  <data name="lv_moveok" xml:space="preserve">
    <value>移動塊</value>
  </data>
  <data name="lv_return" xml:space="preserve">
    <value>邏輯卷</value>
  </data>
  <data name="resize_emounted" xml:space="preserve">
    <value>掛載時無法調整此邏輯卷上的文件系統大小</value>
  </data>
  <data name="resize_emounted2" xml:space="preserve">
    <value>掛載該邏輯卷上的文件系統時，不能將其收縮</value>
  </data>
  <data name="pv_force" xml:space="preserve">
    <value>強制增加音量？</value>
  </data>
  <data name="pv_petotal2" xml:space="preserve">
    <value>分配大小</value>
  </data>
  <data name="pv_create2" xml:space="preserve">
    <value>添加到卷組</value>
  </data>
  <data name="pv_delete2" xml:space="preserve">
    <value>從卷組中刪除</value>
  </data>
  <data name="pv_resize" xml:space="preserve">
    <value>調整大小以匹配設備</value>
  </data>
  <data name="pv_err3" xml:space="preserve">
    <value>無法調整物理卷大小</value>
  </data>
  <data name="pv_lvs" xml:space="preserve">
    <value>按邏輯卷分配</value>
  </data>
  <data name="pv_egone" xml:space="preserve">
    <value>物理體積不再存在！</value>
  </data>
  <data name="vg_petotal2" xml:space="preserve">
    <value>分配大小</value>
  </data>
  <data name="vg_egone" xml:space="preserve">
    <value>卷組不再存在！</value>
  </data>
  <data name="pvmove_err" xml:space="preserve">
    <value>無法移動邏輯卷</value>
  </data>
  <data name="pvmove_title" xml:space="preserve">
    <value>移動邏輯卷</value>
  </data>
  <data name="pvmove_start" xml:space="preserve">
    <value>將邏輯卷 $1從 $2移動到 $3 ..</value>
  </data>
  <data name="pvmove_failed" xml:space="preserve">
    <value>..移動失敗！</value>
  </data>
  <data name="pvmove_done" xml:space="preserve">
    <value>..移動完成</value>
  </data>
  <data name="thin_title" xml:space="preserve">
    <value>創建精簡池</value>
  </data>
  <data name="thin_desc" xml:space="preserve">
    <value>精簡池是一對LV，可用於創建其他大於可用範圍的LV。僅在需要時才消耗空間，而不是在創建池內的LV時才消耗空間。警告-所選LV上的任何數據都將丟失！</value>
  </data>
  <data name="thin_header" xml:space="preserve">
    <value>新的精簡池詳細信息</value>
  </data>
  <data name="thin_datalv" xml:space="preserve">
    <value>現有LV數據</value>
  </data>
  <data name="thin_metadatalv" xml:space="preserve">
    <value>現有LV的元數據</value>
  </data>
  <data name="thin_ok" xml:space="preserve">
    <value>將LV轉換為精簡池</value>
  </data>
  <data name="thin_elvs" xml:space="preserve">
    <value>在此VG中找不到尚未使用的LV！</value>
  </data>
  <data name="thin_err" xml:space="preserve">
    <value>創建精簡池失敗</value>
  </data>
  <data name="thin_esame" xml:space="preserve">
    <value>所選的兩個LV相同</value>
  </data>
  <data name="thin_edata" xml:space="preserve">
    <value>所選數據LV已在使用中</value>
  </data>
  <data name="thin_emetadata" xml:space="preserve">
    <value>所選的元數據LV已在使用中</value>
  </data>
  <data name="log_rollback_lv" xml:space="preserve">
    <value>回滾快照 $1</value>
  </data>
  <data name="log_resize_pv" xml:space="preserve">
    <value>在VG $2中已調整大小的物理卷 $1</value>
  </data>
  <data name="blocks" xml:space="preserve">
    <value>塊</value>
  </data>
</root>