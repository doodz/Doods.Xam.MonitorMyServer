<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="i2ndex_addpv" xml:space="preserve">
    <value>将物理卷添加到组。</value>
  </data>
  <data name="index_addpv2" xml:space="preserve">
    <value>将物理卷添加到&lt;tt&gt;$1&lt;/tt&gt;。</value>
  </data>
  <data name="index_addlv2" xml:space="preserve">
    <value>在&lt;tt&gt;$1&lt;/tt&gt;中创建逻辑卷。</value>
  </data>
  <data name="index_addlv2s" xml:space="preserve">
    <value>在&lt;tt&gt;$1&lt;/tt&gt;中创建快照。</value>
  </data>
  <data name="index_addlv3" xml:space="preserve">
    <value>在&lt;tt&gt;$1&lt;/tt&gt;中创建一个精简池。</value>
  </data>
  <data name="index_return2" xml:space="preserve">
    <value>物理体积</value>
  </data>
  <data name="index_return3" xml:space="preserve">
    <value>逻辑卷</value>
  </data>
  <data name="index_version" xml:space="preserve">
    <value>LVM版本 $1</value>
  </data>
  <data name="index_vgname" xml:space="preserve">
    <value>卷组名称</value>
  </data>
  <data name="index_vgsize" xml:space="preserve">
    <value>总尺寸</value>
  </data>
  <data name="index_vgtotal" xml:space="preserve">
    <value>使用的块</value>
  </data>
  <data name="index_vgtotal2" xml:space="preserve">
    <value>使用尺寸</value>
  </data>
  <data name="index_nopvs2" xml:space="preserve">
    <value>尚未将物理卷添加到任何卷组。</value>
  </data>
  <data name="index_nolvs2" xml:space="preserve">
    <value>尚未从任何卷组创建逻辑卷。</value>
  </data>
  <data name="index_pvname" xml:space="preserve">
    <value>物理音量设备</value>
  </data>
  <data name="index_pvvg" xml:space="preserve">
    <value>卷组中</value>
  </data>
  <data name="index_pvsize" xml:space="preserve">
    <value>装置尺寸</value>
  </data>
  <data name="index_pvtotal" xml:space="preserve">
    <value>使用的块</value>
  </data>
  <data name="index_pvtotal2" xml:space="preserve">
    <value>使用尺寸</value>
  </data>
  <data name="index_vgsdesc" xml:space="preserve">
    <value>卷组是可以分配给一个或多个逻辑卷的一组磁盘。大多数系统只有一个，并且在添加任何物理或逻辑卷之前必须至少创建一个。</value>
  </data>
  <data name="index_pvsdesc" xml:space="preserve">
    <value>物理卷是属于卷组的磁盘分区或RAID设备。然后，一个或多个逻辑卷可以使用其磁盘空间。</value>
  </data>
  <data name="index_lvsdesc" xml:space="preserve">
    <value>逻辑卷是从卷组的组合磁盘空间创建的虚拟分区。每个文件系统都可以具有一个文件系统，然后将其挂载以存储文件。</value>
  </data>
  <data name="index_lvname" xml:space="preserve">
    <value>逻辑卷</value>
  </data>
  <data name="index_lvvg" xml:space="preserve">
    <value>卷组</value>
  </data>
  <data name="index_lvsize" xml:space="preserve">
    <value>尺寸</value>
  </data>
  <data name="index_lvused" xml:space="preserve">
    <value>使用空间</value>
  </data>
  <data name="index_lvuse" xml:space="preserve">
    <value>用于</value>
  </data>
  <data name="index_snapof" xml:space="preserve">
    <value>（$1的快照）</value>
  </data>
  <data name="index_thin" xml:space="preserve">
    <value>用于 $1 LV的LVM精简池</value>
  </data>
  <data name="lv_thin" xml:space="preserve">
    <value>在池中创建为精简LV</value>
  </data>
  <data name="lv_thin2" xml:space="preserve">
    <value>精简配置在池中</value>
  </data>
  <data name="lv_nothin" xml:space="preserve">
    <value>无（创建为常规LV）</value>
  </data>
  <data name="lv_size0" xml:space="preserve">
    <value>绝对尺寸</value>
  </data>
  <data name="lv_size1" xml:space="preserve">
    <value>VG大小百分比</value>
  </data>
  <data name="lv_size2" xml:space="preserve">
    <value>VG可用空间百分比</value>
  </data>
  <data name="lv_size3" xml:space="preserve">
    <value>光伏可用空间百分比</value>
  </data>
  <data name="lv_size3a" xml:space="preserve">
    <value>第 $1个，共 $2个</value>
  </data>
  <data name="lv_sizeabs" xml:space="preserve">
    <value>确切尺寸</value>
  </data>
  <data name="lv_sizesimple" xml:space="preserve">
    <value>单位尺寸</value>
  </data>
  <data name="lv_sizeallfree" xml:space="preserve">
    <value>使用所有可用的VG空间</value>
  </data>
  <data name="lv_mountcm" xml:space="preserve">
    <value>由Cloudmin系统 $1使用</value>
  </data>
  <data name="lv_umountcm" xml:space="preserve">
    <value>供Cloudmin系统 $1使用</value>
  </data>
  <data name="lv_mountiscsi" xml:space="preserve">
    <value>iSCSI共享设备 $1</value>
  </data>
  <data name="lv_stripes2" xml:space="preserve">
    <value>要跨越的物理卷</value>
  </data>
  <data name="lv_stripesize" xml:space="preserve">
    <value>条纹尺寸</value>
  </data>
  <data name="lv_readahead" xml:space="preserve">
    <value>预读行业</value>
  </data>
  <data name="lv_evgsize" xml:space="preserve">
    <value>卷组大小百分比丢失或无效</value>
  </data>
  <data name="lv_efreesize" xml:space="preserve">
    <value>可用卷组大小百分比丢失或无效</value>
  </data>
  <data name="lv_epvsize" xml:space="preserve">
    <value>可用物理卷大小百分比丢失或无效</value>
  </data>
  <data name="lv_snaprollback" xml:space="preserve">
    <value>回滚快照</value>
  </data>
  <data name="lv_rusnaprb" xml:space="preserve">
    <value>您确定要回滚快照 $1吗？</value>
  </data>
  <data name="lv_delthin" xml:space="preserve">
    <value>警告！该LV是用于其他 $1精简配置逻辑卷的精简池，如果将其删除，它也将丢失！</value>
  </data>
  <data name="lv_snaprollbackok" xml:space="preserve">
    <value>立即回滚</value>
  </data>
  <data name="lv_err3" xml:space="preserve">
    <value>回滚快照失败</value>
  </data>
  <data name="lv_mkfs2" xml:space="preserve">
    <value>创建文件系统</value>
  </data>
  <data name="lv_mkfsdesc2" xml:space="preserve">
    <value>单击此按钮可在此逻辑卷上创建新的 $1文件系统。这将清除卷上当前的所有数据。</value>
  </data>
  <data name="lv_newmount" xml:space="preserve">
    <value>将LV安装在：</value>
  </data>
  <data name="lv_mountmsg" xml:space="preserve">
    <value>将此LV挂载到系统的新目录中，以便可以将其用于存储文件。文件系统必须已经创建。</value>
  </data>
  <data name="lv_free" xml:space="preserve">
    <value>免费百分比</value>
  </data>
  <data name="lv_freedisk" xml:space="preserve">
    <value>可用空间</value>
  </data>
  <data name="lv_pvs" xml:space="preserve">
    <value>分配的物理卷</value>
  </data>
  <data name="lv_thincs" xml:space="preserve">
    <value>精简池中的LV</value>
  </data>
  <data name="lv_thinpercent" xml:space="preserve">
    <value>精简池使用百分比</value>
  </data>
  <data name="lv_thinused" xml:space="preserve">
    <value>使用的池空间薄</value>
  </data>
  <data name="lv_snapusage" xml:space="preserve">
    <value>快照使用率</value>
  </data>
  <data name="lv_egone" xml:space="preserve">
    <value>逻辑卷不再存在！</value>
  </data>
  <data name="lv_moveheader" xml:space="preserve">
    <value>移走体量</value>
  </data>
  <data name="lv_pvfrom" xml:space="preserve">
    <value>从物理体积移动块</value>
  </data>
  <data name="lv_pvto" xml:space="preserve">
    <value>物理体积</value>
  </data>
  <data name="lv_moveok" xml:space="preserve">
    <value>移动块</value>
  </data>
  <data name="lv_return" xml:space="preserve">
    <value>逻辑卷</value>
  </data>
  <data name="resize_emounted" xml:space="preserve">
    <value>挂载时无法调整此逻辑卷上的文件系统大小</value>
  </data>
  <data name="resize_emounted2" xml:space="preserve">
    <value>挂载该逻辑卷上的文件系统时，不能将其收缩</value>
  </data>
  <data name="pv_force" xml:space="preserve">
    <value>强制添加音量？</value>
  </data>
  <data name="pv_petotal2" xml:space="preserve">
    <value>分配大小</value>
  </data>
  <data name="pv_create2" xml:space="preserve">
    <value>添加到卷组</value>
  </data>
  <data name="pv_delete2" xml:space="preserve">
    <value>从卷组中删除</value>
  </data>
  <data name="pv_resize" xml:space="preserve">
    <value>调整大小以匹配设备</value>
  </data>
  <data name="pv_err3" xml:space="preserve">
    <value>无法调整物理卷大小</value>
  </data>
  <data name="pv_lvs" xml:space="preserve">
    <value>按逻辑卷分配</value>
  </data>
  <data name="pv_egone" xml:space="preserve">
    <value>物理体积不再存在！</value>
  </data>
  <data name="vg_petotal2" xml:space="preserve">
    <value>分配大小</value>
  </data>
  <data name="vg_egone" xml:space="preserve">
    <value>卷组不再存在！</value>
  </data>
  <data name="pvmove_err" xml:space="preserve">
    <value>无法移动逻辑卷</value>
  </data>
  <data name="pvmove_title" xml:space="preserve">
    <value>移动逻辑卷</value>
  </data>
  <data name="pvmove_start" xml:space="preserve">
    <value>将逻辑卷 $1从 $2移动到 $3 ..</value>
  </data>
  <data name="pvmove_failed" xml:space="preserve">
    <value>..移动失败！</value>
  </data>
  <data name="pvmove_done" xml:space="preserve">
    <value>..移动完成</value>
  </data>
  <data name="thin_title" xml:space="preserve">
    <value>创建精简池</value>
  </data>
  <data name="thin_desc" xml:space="preserve">
    <value>精简池是一对LV，可用于创建其他大于可用范围的LV。仅在需要时才消耗空间，而不是在创建池内的LV时才消耗空间。警告-所选LV上的任何数据都将丢失！</value>
  </data>
  <data name="thin_header" xml:space="preserve">
    <value>新的精简池详细信息</value>
  </data>
  <data name="thin_datalv" xml:space="preserve">
    <value>现有LV数据</value>
  </data>
  <data name="thin_metadatalv" xml:space="preserve">
    <value>现有LV的元数据</value>
  </data>
  <data name="thin_ok" xml:space="preserve">
    <value>将LV转换为精简池</value>
  </data>
  <data name="thin_elvs" xml:space="preserve">
    <value>在此VG中找不到尚未使用的LV！</value>
  </data>
  <data name="thin_err" xml:space="preserve">
    <value>创建精简池失败</value>
  </data>
  <data name="thin_esame" xml:space="preserve">
    <value>所选的两个LV相同</value>
  </data>
  <data name="thin_edata" xml:space="preserve">
    <value>所选数据LV已在使用中</value>
  </data>
  <data name="thin_emetadata" xml:space="preserve">
    <value>所选的元数据LV已在使用中</value>
  </data>
  <data name="log_rollback_lv" xml:space="preserve">
    <value>回滚快照 $1</value>
  </data>
  <data name="log_resize_pv" xml:space="preserve">
    <value>在VG $2中已调整大小的物理卷 $1</value>
  </data>
  <data name="blocks" xml:space="preserve">
    <value>块</value>
  </data>
</root>