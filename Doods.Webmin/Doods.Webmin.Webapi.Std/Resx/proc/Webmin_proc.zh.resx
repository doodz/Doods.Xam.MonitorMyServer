<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="index_title" xml:space="preserve">
    <value>进程管理</value>
  </data>
  <data name="index_display" xml:space="preserve">
    <value>显示</value>
  </data>
  <data name="index_tree" xml:space="preserve">
    <value>PID</value>
  </data>
  <data name="index_user" xml:space="preserve">
    <value>用户</value>
  </data>
  <data name="index_size" xml:space="preserve">
    <value>内存</value>
  </data>
  <data name="index_cpu" xml:space="preserve">
    <value>CPU</value>
  </data>
  <data name="index_search" xml:space="preserve">
    <value>搜索</value>
  </data>
  <data name="index_run" xml:space="preserve">
    <value>运行..</value>
  </data>
  <data name="index_return" xml:space="preserve">
    <value>进程列表</value>
  </data>
  <data name="pid" xml:space="preserve">
    <value>进程标识</value>
  </data>
  <data name="owner" xml:space="preserve">
    <value>用户</value>
  </data>
  <data name="command" xml:space="preserve">
    <value>命令</value>
  </data>
  <data name="cpu" xml:space="preserve">
    <value>CPU</value>
  </data>
  <data name="size" xml:space="preserve">
    <value>大小</value>
  </data>
  <data name="parent" xml:space="preserve">
    <value>父进程</value>
  </data>
  <data name="runtime" xml:space="preserve">
    <value>运行时间</value>
  </data>
  <data name="nice" xml:space="preserve">
    <value>Nice 级别</value>
  </data>
  <data name="search_user" xml:space="preserve">
    <value>拥有者</value>
  </data>
  <data name="search_match" xml:space="preserve">
    <value>匹配</value>
  </data>
  <data name="search_cpupc" xml:space="preserve">
    <value>使用了超过$1%的 CPU</value>
  </data>
  <data name="search_fs" xml:space="preserve">
    <value>使用文件系统</value>
  </data>
  <data name="search_files" xml:space="preserve">
    <value>使用文件</value>
  </data>
  <data name="search_submit" xml:space="preserve">
    <value>搜索</value>
  </data>
  <data name="search_none" xml:space="preserve">
    <value>没有找到匹配的进程。</value>
  </data>
  <data name="search_kill" xml:space="preserve">
    <value>发送信号</value>
  </data>
  <data name="search_ignore" xml:space="preserve">
    <value>在结果中忽略搜索进程</value>
  </data>
  <data name="search_return" xml:space="preserve">
    <value>搜索表</value>
  </data>
  <data name="search_sigterm" xml:space="preserve">
    <value>停止进程</value>
  </data>
  <data name="search_sigkill" xml:space="preserve">
    <value>删除进程</value>
  </data>
  <data name="search_port" xml:space="preserve">
    <value>使用的端口</value>
  </data>
  <data name="search_protocol" xml:space="preserve">
    <value>协议</value>
  </data>
  <data name="run_command" xml:space="preserve">
    <value>运行的命令</value>
  </data>
  <data name="run_submit" xml:space="preserve">
    <value>运行</value>
  </data>
  <data name="run_mode" xml:space="preserve">
    <value>运行模式</value>
  </data>
  <data name="run_bg" xml:space="preserve">
    <value>后台运行</value>
  </data>
  <data name="run_fg" xml:space="preserve">
    <value>等待直至完成</value>
  </data>
  <data name="run_input" xml:space="preserve">
    <value>输入到命令</value>
  </data>
  <data name="run_title" xml:space="preserve">
    <value>命令输出</value>
  </data>
  <data name="run_output" xml:space="preserve">
    <value>从$1 .. 输出</value>
  </data>
  <data name="run_none" xml:space="preserve">
    <value>没有产生输出</value>
  </data>
  <data name="run_ecannot" xml:space="preserve">
    <value>您没有执行命令的权限</value>
  </data>
  <data name="edit_title" xml:space="preserve">
    <value>进程信息</value>
  </data>
  <data name="edit_gone" xml:space="preserve">
    <value>此进程不再运行</value>
  </data>
  <data name="edit_sub" xml:space="preserve">
    <value>子进程</value>
  </data>
  <data name="edit_kill" xml:space="preserve">
    <value>发送信号</value>
  </data>
  <data name="edit_change" xml:space="preserve">
    <value>改变</value>
  </data>
  <data name="edit_prilow" xml:space="preserve">
    <value>低优先级</value>
  </data>
  <data name="edit_prihigh" xml:space="preserve">
    <value>高优先级</value>
  </data>
  <data name="edit_pridef" xml:space="preserve">
    <value>默认</value>
  </data>
  <data name="edit_none" xml:space="preserve">
    <value>无</value>
  </data>
  <data name="edit_ecannot" xml:space="preserve">
    <value>你没有编辑进程的权限</value>
  </data>
  <data name="edit_sigterm" xml:space="preserve">
    <value>停止进程</value>
  </data>
  <data name="edit_sigkill" xml:space="preserve">
    <value>删除进程</value>
  </data>
  <data name="kill_err" xml:space="preserve">
    <value>发送信号 $1 到进程 $2 失败</value>
  </data>
  <data name="kill_title" xml:space="preserve">
    <value>发送信号</value>
  </data>
  <data name="kill_sent" xml:space="preserve">
    <value>发送</value>
  </data>
  <data name="kill_ecannot" xml:space="preserve">
    <value>您没有删除进程的权限</value>
  </data>
  <data name="renice_err" xml:space="preserve">
    <value>renice 进程 $1 失败</value>
  </data>
  <data name="renice_ecannot" xml:space="preserve">
    <value>您没有renice进程的权限</value>
  </data>
  <data name="linux_pri" xml:space="preserve">
    <value>优先级</value>
  </data>
  <data name="linux_tty" xml:space="preserve">
    <value>TTY</value>
  </data>
  <data name="linux_status" xml:space="preserve">
    <value>状态</value>
  </data>
  <data name="linux_wchan" xml:space="preserve">
    <value>等待</value>
  </data>
  <data name="linux_mem" xml:space="preserve">
    <value>内存</value>
  </data>
  <data name="linux_group" xml:space="preserve">
    <value>组</value>
  </data>
  <data name="linux_ruser" xml:space="preserve">
    <value>真正用户</value>
  </data>
  <data name="linux_rgroup" xml:space="preserve">
    <value>真正组</value>
  </data>
  <data name="linux_pgid" xml:space="preserve">
    <value>进程组ID</value>
  </data>
  <data name="linuxstat_R" xml:space="preserve">
    <value>正在运行</value>
  </data>
  <data name="linuxstat_S" xml:space="preserve">
    <value>睡眠中</value>
  </data>
  <data name="linuxstat_D" xml:space="preserve">
    <value>深睡中</value>
  </data>
  <data name="linuxstat_T" xml:space="preserve">
    <value>已停止</value>
  </data>
  <data name="linuxstat_Z" xml:space="preserve">
    <value>僵停状态</value>
  </data>
  <data name="freebsd_ruser" xml:space="preserve">
    <value>真正用户</value>
  </data>
  <data name="freebsd_rgroup" xml:space="preserve">
    <value>真正组</value>
  </data>
  <data name="freebsd_tty" xml:space="preserve">
    <value>TTY</value>
  </data>
  <data name="freebsd_pgid" xml:space="preserve">
    <value>进程组</value>
  </data>
  <data name="freebsd_lim" xml:space="preserve">
    <value>内存限制</value>
  </data>
  <data name="hpux_pri" xml:space="preserve">
    <value>优先级</value>
  </data>
  <data name="hpux_tty" xml:space="preserve">
    <value>TTY</value>
  </data>
  <data name="hpux_status" xml:space="preserve">
    <value>状态</value>
  </data>
  <data name="hpux_wchan" xml:space="preserve">
    <value>等待</value>
  </data>
  <data name="hpuxstat_0" xml:space="preserve">
    <value>不存在</value>
  </data>
  <data name="hpuxstat_S" xml:space="preserve">
    <value>睡眠中</value>
  </data>
  <data name="hpuxstat_W" xml:space="preserve">
    <value>等待中</value>
  </data>
  <data name="hpuxstat_R" xml:space="preserve">
    <value>正在运行</value>
  </data>
  <data name="hpuxstat_I" xml:space="preserve">
    <value>中级</value>
  </data>
  <data name="hpuxstat_Z" xml:space="preserve">
    <value>僵停状态</value>
  </data>
  <data name="hpuxstat_T" xml:space="preserve">
    <value>停止</value>
  </data>
  <data name="hpuxstat_G" xml:space="preserve">
    <value>正在增长</value>
  </data>
  <data name="macos_tty" xml:space="preserve">
    <value>TTY</value>
  </data>
  <data name="sysv_group" xml:space="preserve">
    <value>组</value>
  </data>
  <data name="sysv_ruser" xml:space="preserve">
    <value>真正用户</value>
  </data>
  <data name="sysv_rgroup" xml:space="preserve">
    <value>真正组</value>
  </data>
  <data name="sysv_pgid" xml:space="preserve">
    <value>进程组ID</value>
  </data>
  <data name="sysv_tty" xml:space="preserve">
    <value>TTY</value>
  </data>
  <data name="log_run" xml:space="preserve">
    <value>已运行命令 "$1"</value>
  </data>
  <data name="log_kill" xml:space="preserve">
    <value>已向进程 $2发送信号 $1 </value>
  </data>
  <data name="log_kills" xml:space="preserve">
    <value>已到 $2 进程发送信号 $1 </value>
  </data>
  <data name="log_kill_l" xml:space="preserve">
    <value>已向进程 $2发送信号 $1 </value>
  </data>
  <data name="log_kills_l" xml:space="preserve">
    <value>已向进程&lt;br&gt;$2发送信号 $1 </value>
  </data>
  <data name="acl_manage" xml:space="preserve">
    <value>以用户的身份管理进程</value>
  </data>
  <data name="acl_manage_def" xml:space="preserve">
    <value>当前Webmin用户</value>
  </data>
  <data name="acl_edit" xml:space="preserve">
    <value>可以删除并renice进程吗？</value>
  </data>
  <data name="acl_run" xml:space="preserve">
    <value>可以执行命令吗？</value>
  </data>
  <data name="kill_kill" xml:space="preserve">
    <value>删除进程</value>
  </data>
  <data name="kill_term" xml:space="preserve">
    <value>    终止    </value>
  </data>
  <data name="kill_hup" xml:space="preserve">
    <value>  重新启动  </value>
  </data>
  <data name="kill_stop" xml:space="preserve">
    <value>    停止    </value>
  </data>
  <data name="kill_cont" xml:space="preserve">
    <value>    继续    </value>
  </data>
</root>