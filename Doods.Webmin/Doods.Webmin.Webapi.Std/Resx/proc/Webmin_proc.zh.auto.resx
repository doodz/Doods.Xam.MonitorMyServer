<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="index_zone" xml:space="preserve">
    <value>区</value>
  </data>
  <data name="index_mem2" xml:space="preserve">
    <value>&lt;b&gt;实际内存：&lt;/b&gt;总计 $1 /空闲 $2</value>
  </data>
  <data name="index_mem3" xml:space="preserve">
    <value>&lt;b&gt;实际内存：&lt;/b&gt;总计 $1 /空闲 $2 /已缓存 $3</value>
  </data>
  <data name="index_swap2" xml:space="preserve">
    <value>&lt;b&gt;交换空间：&lt;/b&gt;总计 $1 /空闲 $2</value>
  </data>
  <data name="index_burst" xml:space="preserve">
    <value>&lt;b&gt;可突发内存：&lt;/b&gt;总计 $1</value>
  </data>
  <data name="index_loadname" xml:space="preserve">
    <value>平均CPU负载：</value>
  </data>
  <data name="index_loadnums" xml:space="preserve">
    <value>$1（1分钟）， $2（5分钟）， $3（15分钟）</value>
  </data>
  <data name="index_cpuname" xml:space="preserve">
    <value>CPU类型：</value>
  </data>
  <data name="index_inzone" xml:space="preserve">
    <value>在 $1区域中</value>
  </data>
  <data name="stime" xml:space="preserve">
    <value>已开始</value>
  </data>
  <data name="sclass" xml:space="preserve">
    <value>IO调度类</value>
  </data>
  <data name="sprio" xml:space="preserve">
    <value>IO优先级</value>
  </data>
  <data name="search_cpupc2" xml:space="preserve">
    <value>使用更多的CPU</value>
  </data>
  <data name="search_ip" xml:space="preserve">
    <value>使用IP地址</value>
  </data>
  <data name="run_as" xml:space="preserve">
    <value>以用户身份运行</value>
  </data>
  <data name="run_euser" xml:space="preserve">
    <value>用户名缺失或无效</value>
  </data>
  <data name="run_euser2" xml:space="preserve">
    <value>不允许以所选用户身份运行命令</value>
  </data>
  <data name="edit_subid" xml:space="preserve">
    <value>ID</value>
  </data>
  <data name="edit_subcmd" xml:space="preserve">
    <value>子流程命令</value>
  </data>
  <data name="edit_sigstop" xml:space="preserve">
    <value>暂停</value>
  </data>
  <data name="edit_sigcont" xml:space="preserve">
    <value>恢复</value>
  </data>
  <data name="edit_open" xml:space="preserve">
    <value>文件和连接</value>
  </data>
  <data name="edit_trace" xml:space="preserve">
    <value>追踪过程</value>
  </data>
  <data name="edit_return" xml:space="preserve">
    <value>工艺细节</value>
  </data>
  <data name="linux_stime" xml:space="preserve">
    <value>已开始</value>
  </data>
  <data name="linux_real" xml:space="preserve">
    <value>即时的</value>
  </data>
  <data name="linux_be" xml:space="preserve">
    <value>最大努力</value>
  </data>
  <data name="linux_idle" xml:space="preserve">
    <value>闲</value>
  </data>
  <data name="freebsd_stime" xml:space="preserve">
    <value>已开始</value>
  </data>
  <data name="hpux_stime" xml:space="preserve">
    <value>已开始</value>
  </data>
  <data name="sysv_stime" xml:space="preserve">
    <value>已开始</value>
  </data>
  <data name="sysv_task" xml:space="preserve">
    <value>任务ID</value>
  </data>
  <data name="sysv_zone" xml:space="preserve">
    <value>区域名称</value>
  </data>
  <data name="log_renice" xml:space="preserve">
    <value>将进程 $2的优先级更改为 $1</value>
  </data>
  <data name="acl_only" xml:space="preserve">
    <value>只能看到自己的流程吗？</value>
  </data>
  <data name="acl_who" xml:space="preserve">
    <value>可以为用户管理流程</value>
  </data>
  <data name="acl_who0" xml:space="preserve">
    <value>所有用户</value>
  </data>
  <data name="acl_who1" xml:space="preserve">
    <value>Webmin当前用户</value>
  </data>
  <data name="acl_who2" xml:space="preserve">
    <value>列出的用户 ..</value>
  </data>
  <data name="open_title" xml:space="preserve">
    <value>打开文件和连接</value>
  </data>
  <data name="open_proc" xml:space="preserve">
    <value>对于进程 $1（PID $2）</value>
  </data>
  <data name="open_header1" xml:space="preserve">
    <value>打开文件</value>
  </data>
  <data name="open_header2" xml:space="preserve">
    <value>开放式网络连接</value>
  </data>
  <data name="open_type" xml:space="preserve">
    <value>类型</value>
  </data>
  <data name="open_proto" xml:space="preserve">
    <value>协议</value>
  </data>
  <data name="open_desc" xml:space="preserve">
    <value>细节</value>
  </data>
  <data name="open_fd" xml:space="preserve">
    <value>文件描述符</value>
  </data>
  <data name="open_listen1" xml:space="preserve">
    <value>在端口 $1上监听</value>
  </data>
  <data name="open_listen2" xml:space="preserve">
    <value>正在监听地址 $1端口 $2</value>
  </data>
  <data name="open_recv" xml:space="preserve">
    <value>在 $1上接收： $2</value>
  </data>
  <data name="open_conn" xml:space="preserve">
    <value>在 $3状态下从 $1连接到 $2</value>
  </data>
  <data name="open_cwd" xml:space="preserve">
    <value>当前目录</value>
  </data>
  <data name="open_rtd" xml:space="preserve">
    <value>根目录</value>
  </data>
  <data name="open_txt" xml:space="preserve">
    <value>程式码</value>
  </data>
  <data name="open_mem" xml:space="preserve">
    <value>共享库</value>
  </data>
  <data name="open_dir" xml:space="preserve">
    <value>目录</value>
  </data>
  <data name="open_reg" xml:space="preserve">
    <value>常规文件</value>
  </data>
  <data name="open_chr" xml:space="preserve">
    <value>特殊字符</value>
  </data>
  <data name="open_blk" xml:space="preserve">
    <value>块特</value>
  </data>
  <data name="open_size" xml:space="preserve">
    <value>文件大小</value>
  </data>
  <data name="open_inode" xml:space="preserve">
    <value>索引节点</value>
  </data>
  <data name="open_file" xml:space="preserve">
    <value>路径</value>
  </data>
  <data name="trace_title" xml:space="preserve">
    <value>追踪过程</value>
  </data>
  <data name="trace_start" xml:space="preserve">
    <value>正在启动 $1的系统调用跟踪。</value>
  </data>
  <data name="trace_doing" xml:space="preserve">
    <value>$1的系统调用跟踪：</value>
  </data>
  <data name="trace_done" xml:space="preserve">
    <value>..流程已终止。</value>
  </data>
  <data name="trace_failed" xml:space="preserve">
    <value>..追踪失败！</value>
  </data>
  <data name="trace_sorry" xml:space="preserve">
    <value>此页面需要浏览器中的Java支持。要使用纯文本过程跟踪，请调整模块配置。</value>
  </data>
  <data name="trace_syscalls" xml:space="preserve">
    <value>跟踪系统调用：</value>
  </data>
  <data name="trace_all" xml:space="preserve">
    <value>所有</value>
  </data>
  <data name="trace_sel" xml:space="preserve">
    <value>上市 ..</value>
  </data>
  <data name="trace_change" xml:space="preserve">
    <value>更改</value>
  </data>
  <data name="windows_threads" xml:space="preserve">
    <value>处理中的线程</value>
  </data>
  <data name="syslog_dmesg" xml:space="preserve">
    <value>内核消息</value>
  </data>
</root>