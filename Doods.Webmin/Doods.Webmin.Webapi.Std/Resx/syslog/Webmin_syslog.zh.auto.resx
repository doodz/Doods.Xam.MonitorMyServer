<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="index_socket" xml:space="preserve">
    <value>Unix套接字文件 $1</value>
  </data>
  <data name="index_cmd" xml:space="preserve">
    <value>$1的输出</value>
  </data>
  <data name="index_viewfile" xml:space="preserve">
    <value>查看日志文件：</value>
  </data>
  <data name="index_viewok" xml:space="preserve">
    <value>视图</value>
  </data>
  <data name="restart_ecannot" xml:space="preserve">
    <value>您不可以重新启动syslog</value>
  </data>
  <data name="start_ecannot" xml:space="preserve">
    <value>您无权启动syslog</value>
  </data>
  <data name="edit_socket" xml:space="preserve">
    <value>Unix域套接字文件</value>
  </data>
  <data name="edit_ecannot" xml:space="preserve">
    <value>您无权编辑日志设置</value>
  </data>
  <data name="edit_ecannot2" xml:space="preserve">
    <value>您无权编辑此日志</value>
  </data>
  <data name="view_filter" xml:space="preserve">
    <value>仅显示文字为 $1的行</value>
  </data>
  <data name="save_esocket" xml:space="preserve">
    <value>Unix域套接字丢失或无效</value>
  </data>
  <data name="save_ecannot1" xml:space="preserve">
    <value>您无权删除此日志</value>
  </data>
  <data name="save_ecannot2" xml:space="preserve">
    <value>您无权查看此日志</value>
  </data>
  <data name="save_ecannot3" xml:space="preserve">
    <value>不允许您使用此目标创建日志</value>
  </data>
  <data name="save_ecannot4" xml:space="preserve">
    <value>您无权使用此目标保存日志</value>
  </data>
  <data name="save_ecannot5" xml:space="preserve">
    <value>您无权修改此日志</value>
  </data>
  <data name="save_ecannot6" xml:space="preserve">
    <value>您无权查看任意日志</value>
  </data>
  <data name="save_ecannot7" xml:space="preserve">
    <value>您无权查看此额外日志</value>
  </data>
  <data name="save_emissing" xml:space="preserve">
    <value>缺少要查看的日志文件</value>
  </data>
  <data name="log_start" xml:space="preserve">
    <value>启动日志服务器</value>
  </data>
  <data name="acl_noedit" xml:space="preserve">
    <value>只能查看日志？</value>
  </data>
  <data name="acl_any" xml:space="preserve">
    <value>可以查看任何文件作为日志吗？</value>
  </data>
  <data name="acl_logs" xml:space="preserve">
    <value>可以查看和配置日志文件</value>
  </data>
  <data name="acl_all" xml:space="preserve">
    <value>所有日志</value>
  </data>
  <data name="acl_sel" xml:space="preserve">
    <value>仅列出文件和列出目录下的文件 ..</value>
  </data>
  <data name="acl_extra" xml:space="preserve">
    <value>该用户的额外日志文件</value>
  </data>
  <data name="acl_syslog" xml:space="preserve">
    <value>可以从syslog查看日志吗？</value>
  </data>
  <data name="acl_others" xml:space="preserve">
    <value>可以查看其他模块的日志吗？</value>
  </data>
</root>